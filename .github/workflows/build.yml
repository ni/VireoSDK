on:
  pull_request_target:
  push:
    branches-ignore:
    - 'gh-pages'
    tags:
    - 'v*'

jobs:
  lint_and_docs:
    if: false
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.5'
    - uses: actions/setup-node@v1
      with:
        node-version: '12'
        registry-url: 'https://registry.npmjs.org'
    - run: npm ci
    - run: make lint
    - run: npm run lint

    - run: sudo apt-get install doxygen
    - run: npm run doxygen
    - uses: actions/upload-artifact@v1
      with:
        name: gh-pages build
        path: ./gh-pages/
        if-no-files-found: error

    - if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.6'
    - if: startsWith(github.ref, 'refs/tags/v')
      run: |
        gem install dpl
        dpl --provider=pages --repo=ni/VireoSDK --local_dir=gh-pages --skip_cleanup --name=rajsite --email=rajsite@users.noreply.github.com --github-token=${{secrets.GITHUBPAGESDEPLOYTOKEN}}

  setup:
    runs-on: ubuntu-16.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  web:
    if: false
    needs: setup
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.5'
    - run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - run: nohup python -m httpbin.core --port 64526 --host 0.0.0.0 &

    - uses: actions/setup-node@v1
      with:
        node-version: '12'
        registry-url: 'https://registry.npmjs.org'
    - run: npm ci

    - run: |
        git clone https://github.com/juj/emsdk.git
        cd emsdk
        git checkout 369013943283939412fb2807bb0d2ded8ebd5a9e
    - run: |
        emsdk/emsdk install 1.39.5-fastcomp
        emsdk/emsdk activate 1.39.5-fastcomp

    - run: . emsdk/emsdk_env.sh && emcc -v
    - run: . emsdk/emsdk_env.sh && make vjs
    - run: . emsdk/emsdk_env.sh && make vjs BUILD=debug
    - run: . emsdk/emsdk_env.sh && make vjs BUILD=profile
    - run: . emsdk/emsdk_env.sh && make vjs BUILD=release TARGET=asmjs-unknown-emscripten
    - run: npm pack
    - uses: actions/upload-artifact@v2
      with:
        name: npm package
        path: ./vireo-*.tgz
        if-no-files-found: error

    - run: make testjs
      env:
        TZ: CST6CDT
    - run: make testhttpbin
      env:
        TZ: CST6CDT
    - run: npm run test-min
      env:
        TZ: CST6CDT
    - run: npm run test-asmjs
      env:
        TZ: CST6CDT

    - if: startsWith(github.ref, 'refs/tags/v')
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  windows:
    if: false
    needs: setup
    runs-on: windows-2019
    steps:
    - name: windows hello
      run: |
        echo windowshello

  linux:
    needs: setup
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12'
        registry-url: 'https://registry.npmjs.org'
    - run: npm ci

    - run: make native

    - name: calculate release name
      run: |
        export ESH_64_RELEASE="esh_"$(node -p "require('./package.json').version")"_x86_64-unknown-linux-gnu_release.zip"
        echo "ESH_64_RELEASE=$ESH_64_RELEASE" >> $GITHUB_ENV
    - run: zip -j $ESH_64_RELEASE dist/esh README.md LICENSE.txt
    - uses: actions/upload-artifact@v2
      with:
        name: esh release
        path: ./esh_*.zip
        if-no-files-found: error

    - run: make unittest
      env:
          TZ: CST6CDT
    - run: make testnative
      env:
          TZ: CST6CDT

    - if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.upload_url }}
        asset_name: ${{ env.ESH_64_RELEASE }}
        asset_path: ${{ env.ESH_64_RELEASE }}
        asset_content_type: application/zip

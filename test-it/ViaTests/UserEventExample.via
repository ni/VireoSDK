
define (MyEventData c(e(String str) e(Double val) ))  // Data to be carried by an example UserEvent

// Event enum:  1=Timeout, 2=Value Change, 1000=User Event Fired
define(UserEventTestProgram dv(.VirtualInstrument (
    Events:c( // Each entry in the top level cluster here represents Event config for a unique Event structure;
      e(c( // Event Struct 1
	// this example has only one Event structure.
	// Each element is an 'event spec' which defines the static configuration for the 
	// event structures; since multiple events can share diagrams, the diagram # (or branch
	// target) is not included here; instead, the WaitForEvents instruction will refer
	// to these specs and correlate them with diagrams (many:1)
       e(c(  // Event spec 0
           e(dv(Int32 25) eventSource)  // event source enum (CHANGED, eventSource is new)
           e(dv(Int32 1000) eventType)  // (1000=UserEventFired)
           e(dv(Int32 0) controlUID)  // ??? not sure how to represent statically registered controls
           e(dv(Int32 1) dynIndex)    // non-zero = dynamically registered, index into event reg ref
       ))
       e(dv(c(  // Event spec 1 (more compact equivalent representation)
            e(Int32 eventSource)e(Int32 eventType)e(Int32 controlUID)e(Int32 dynIndex)) (0 1 0 0)
       ))
       // TODO - should we make .EventSpec a built-in type so we don't have to generate the type each time?
     )) // End Event Struct 1
     //e(c( // Event Struct 2
     //  e(c(  // Event spec 1 ...
     //    e(...)
     //  ))
     //)) // End Event Struct 2
    )
    Locals:c(
        e(UserEventRefNum<MyEventData> userEventRef)
        e(EventRegRefNum<c(  // (CHANGED, now has top-level cluster)
	    // Each level in top level cluster is one registration entry, corresponding to
	    // inputs to the RegisterForEvents node which created the registration.
	    // Each entry is a cluster of an Int32 for the eventType code, and a polymorphic
	    // type matching the type wired to the input to RegisterForEvents, which is either
	    // a scalar refnum or array/cluster of such.
	        e(c(e(Int32 eventType)e(UserEventRefNum<MyEventData>)))
	    )> eventRegRef)

	e(dv(MyEventData ("Hello" 1.0)) myData)  // actual event data to be fired
	e(dv(MyEventData ("Goodbye" 2.0)) myData2)  // actual event data to be fired
        e(.ErrorCluster errorIO)
        e(dv(Int32 300) timeOut)

	e(c(  // Storage for event data node on left border of event case 1 (user event)
	    e(Int32 eventSource)
	    e(Int32 eventType)
	    e(UInt32 eventTime)
	    e(UserEventRefNum<MyEventData> eventRef)
	    e(MyEventData data)
        ) localEventData1)
	e(c(  // Storage for event data node on left border of event case 2 (timeout event)
	    e(Int32 eventSource)
	    e(Int32 eventType)
	    e(UInt32 eventTime)
        ) localEventData2)
	e(Boolean bool)
    )

    clump (1 // top level
	CreateUserEvent(userEventRef errorIO)
	RegisterForEvents(eventRegRef errorIO 1000 userEventRef)

	Trigger(3)  // start bg clump

	Printf("Generating User Event (before event wait)\n")
	GenerateUserEvent(userEventRef myData errorIO)
	WaitMilliseconds(50)

	Perch(5)
	Printf("Waiting on events\n")
	WaitForEventsAndDispatch(timeOut eventRegRef 0 // index of Events: config data
				// Var arg 3-tuples:
				//  <event spec #, event data node cluster to fill in, branch/perch number to jump to>
        			0 localEventData1 10 // e.g. event spec 0 fills into localEventData1 and branches to perch 10
				1 localEventData2 20
				)
	Branch(5)

	Perch(10)  // Event case 1
	Trigger(1)  // Trigger actual subdiagram code clump
	Wait(1)

	Branch(5)  // User Event waits again

	Perch(20) // Event case 2
	Trigger(2)
	Wait(2)
	Branch(30) // Timeout event finishes

 	Perch(30) // End of Event structure

	UnregisterForEvents(eventRegRef errorIO)
	DestroyUserEvent(userEventRef errorIO)

	Printf ("Done\n")
    )
    clump (1 // event case 1
	Printf ("Event case 1, User Event Fired time:%u ref:%z data:<%z>\n" localEventData1.eventTime localEventData1.eventRef localEventData1.data)
    )
    clump (1 // event case 2
	Printf ("Event case 2, Timeout time:%u\n" localEventData2.eventTime)
    )
    clump (1 // background clump
	WaitMilliseconds(100)
	Printf("(Generating User Event in background)\n")
	GenerateUserEvent(userEventRef myData2 errorIO)
    )

) ) )


enqueue(UserEventTestProgram)

 // test different format code
define(HelloWorld dv(.VirtualInstrument (
Locals: c(
    e(dv(.Int32 71) num1)
    e(dv(.Int32 364) num2)
    e(dv(.Int32 -73) num3)
    e(dv(.Int32 9984) num4)
    e(dv(.Int32 -1216) neg1)
    e(dv(.Int32 -99876) neg2)
    e(dv(.Double -128674.987) neg3)
    e(dv(.Double -999674.23) neg4)
    e(dv(.Double 162.34630) db1)
    e(dv(.Double 9.96)db2)
    e(dv(.Double 999.9996)db3)
    e(dv(.Double 13999.573)db4)
    e(dv(.Double 7.573)db5)
    e(dv(.Double 0.0199360) db6)
    e(dv(.Double -0.000197960) db7)
    e(dv(.Double 0.000000000000000123) db8)
    e(dv(.Double 893545675713456343412) db9)
    e(dv(.Double 0) db0)
    e(dv(.ComplexDouble (128674.9875 999.9996)) cdb1)
    e(dv(.ComplexDouble (-13999.5735678 -0.019360)) cdb2)
    e(dv(.String "abcde") s1)
    e(dv(.String "Hello") s3)
    e(dv(.String "你好") s4)
    e(dv(.String " ") variable5)
    e(dv(.String "") variable6)
	)
	clump (
	  Printf("Test Integer %d-------------------------\n" num1)
	  Printf("%%020d => %020d\n" num1)
	  Printf("%%020d => %020d\n" db1)
	  Printf("%%+020x => %020x\n" num4)
	  Printf("%%#020x => %#020x\n" db3)
 	  Printf("%%_1d => %_1d\n" num1)
 	  Printf("%%_2d => %_2d\n" num2)
 	  Printf("%%_2d => %_2d\n" num4)
	  Printf("\nTest Binary %b -------------------------\n" num1)
	  Printf("%%b => %b\n" num1)
	  Printf("%%b => %b\n" num2)
	  Printf("%%b => %b\n" num3)
 	  Printf("\nTest Float %f -------------------------\n" db1)
	  Printf("%%010_5f => *%010_5f*\n" db1  )
	  Printf("%%+_5f   => *%+_5f*\n" db1  )
	  Printf("%%+_0f   => *%+_0f*\n" db1  )
	  Printf("%%10_2f  => *%10_2f*\n" db1  )
	  Printf("%%+10.5f => *%+10.5f*\n" db1  )
 	  Printf("%%10.5f  => *%10.5f*\n" db1  )
	  Printf("%%#10.6f => *%#10.6f*\n" db1  )
	  Printf("%%.0f => *%.0f*\n" db1  )
 	  Printf("\nTest Float %f -------------------------\n" db2)
	  Printf("%%010_1f => *%010_1f*\n" db2  )
	  Printf("%%+_0f   => *%+_0f*\n" db2  )
	  Printf("%%10_2f  => *%10_2f*\n" db2 )
	  Printf("%%-10.1f => *%-10.1f*\n" db2  )
 	  Printf("%%.0f => *%.0f*\n" db2  )
	  Printf("%%#10.6f => *%#10.6f*\n" db2  )
	  Printf("Localized Decimal Separator => *%;%f %,;%f %.;%f %f %;%f*\n" db2 db2 db2 db2 db2)
	  Printf("ASCII Escape codes(Hex) => *\\61\\\\62\\\\\\63\\\\\\\\64%d*\n" num1 )

	  Printf("\nTest Float %f-------------------------\n" db6)
	  Printf("%%010_1f => *%010_1f*\n" db6  )
	  Printf("%%+_5f   => *%+_5f*\n" db6 )
	  Printf("%%10_2f  => *%10_2f*\n" db6 )
	  Printf("%%-10.1f => *%-10.1f*\n" db6  )
	  Printf("%%010_1f => *%010_1f*\n" db6  )
	  Printf("%%#10.6f => *%#10.6f*\n" db6  )
 	  Printf("\nTest Exp %e-------------------------\n" db3)
	  Printf("%%+10.5e => *%+10.5e*\n" db3  )
	  Printf("%%010_5e  => *%010_5e*\n" db3  )
	  Printf("%%#10.6e  => *%#10.6e*\n" db3  )
	  Printf("%%+^010_3e=> *%+^010_3e*\n" db3  )
	  Printf("%%^10.5e  => *%^10.5e*\n" db3  )
	  Printf("\nTest Exp %e-------------------------\n" db4)
	  Printf("%%+10.5e => *%+10.5e*\n" db4  )
	  Printf("%%010_5e  => *%010_5e*\n" db4  )
	  Printf("%%^10.6e  => *%^10.6e*\n" db4  )
	  Printf("%%+^010_3e=> *%+^010_3e*\n" db4  )
 	  Printf("\nTest Exp %e-------------------------\n" db5)
	  Printf("%%+10.1e => *%+10.1e*\n" db5  )
	  Printf("%%010_5e  => *%010_5e*\n" db5  )
	  Printf("%%^10.6e  => *%^10.6e*\n" db5 )
	  Printf("%%+^010_3e=> *%+^010_3e*\n" db5  )
 	  Printf("%%.0f => *%.0f*\n" db5  )
	  Printf("%%10_0f  => *%10_0f*\n" db5 )
	  Printf("Test Exp %e-------------------------\n" db7)
	  Printf("%%+10.5e   => *%+10.5e*\n" db7  )
	  Printf("%%#010_5e  => *%#010_5e*\n" db7  )
	  Printf("%%^10.6e   => *%^10.6e*\n" db7 )
	  Printf("%%+^010_3e => *%+^010_3e*\n" db7  )
 	  Printf("\nTest Zero-------------------------\n")
	  Printf("%%+10.5e   => *%+10.5e*\n" db0  )
	  Printf("%%#0_5e  => *%#0_5e*\n" db0  )
	  Printf("%%^10.6e   => *%^10.6e*\n" db0)
	  Printf("%%+^010_3e => *%+^010_3e*\n" db0  )
  	  Printf("%%010_1f => *%010_1f*\n" db0  )
	  Printf("%%#+_5f   => *%#+_5f*\n" db0  )
	  Printf("%%10_2f  => *%10_2f*\n" db0 )
	  Printf("%%-10.1f => *%-10.1f*\n" db0  )
	  Printf("%%#10.6f => *%#10.6f*\n" db0  )
	  Printf("\nTest int to %%e & %%f-------------------------\n")
	  Printf("%%+10.2f   => *%+10.2f*\n" num1 )
	  Printf("%%#0_5f    => *%#0_5f*\n" num2  )
	  Printf("%%^10.6e   => *%^10.6e*\n" num3)
	  Printf("%%+^010_3f => *%+^010_3e*\n" num4  )
 	  Printf("\nTest %%g-------------------------\n")
	  Printf("%%+10.5g   => *%+10.5g*\n" db1 )
	  Printf("%%#0_5g    => *%#0_5g*\n" db1  )
	  Printf("%%^10.6g   => *%^10.6g*\n" db2)
	  Printf("%%+^010_3g => *%+^010_3g*\n" db3  )
  	  Printf("%%010_1g   => *%010_1g*\n" db4  )
	  Printf("%%+_5g     => *%+_5g*\n" db5  )
	  Printf("%%10_2g    => *%10_2g*\n" db6 )
	  Printf("%%-10.1g   => *%-10.1g*\n" db7  )
	  Printf("%%10.6g    => *%10.6g*\n" db0  )
	  Printf("%%10.5g    => *%10.5g*\n" db8  )
  	  Printf("\nTest %%p-------------------------\n")
	  Printf("%%p        => *%p*\n" num1 )
	  Printf("%%+10.5p    => *%+10.5p*\n" db1 )
	  Printf("%%#0_5p    => *%#0_5p*\n" db8  )
	  Printf("%%0_5p      => *%0_5p*\n" db8  )
	  Printf("%%p   => *%p*\n" db9)
	  Printf("%%^10.2p   => *%^10.6p*\n" db9)
	  Printf("\nTest Complex Double %f -------------------------\n" cdb1)
	  Printf("%%020_1f => *%020_1f*\n" cdb1  )
	  Printf("%%+_0f   => *%+_0f*\n" cdb1  )
	  Printf("%%20_2f  => *%20_2f*\n" cdb1 )
	  Printf("%%-20.1f => *%-20.1f*\n" cdb1  )
	  Printf("%%.0f => *%.0f*\n" cdb1  )
	  Printf("%%#25.6f => *%#25.6f*\n" cdb1  )
	  Printf("\nTest Complex Double %f -------------------------\n" cdb2)
	  Printf("%%020_1f => *%020_1f*\n" cdb2  )
	  Printf("%%+_0f   => *%+_0f*\n" cdb2  )
	  Printf("%%20_2f  => *%20_2f*\n" cdb2 )
	  Printf("%%-20.1f => *%-20.1f*\n" cdb2  )
	  Printf("%%.0f => *%.0f*\n" cdb2  )
	  Printf("%%#25.6f => *%#25.6f*\n" cdb2  )
	  Printf("Empty format code input\n")
	  StringFormat(variable5  variable6 num1 db1 s1 )
	  Printf("Default formatted: (%s)\n" variable5)
	  StringFormat(variable5  * num1 db1 s1 )
	  Printf("Default formatted: (%s)\n" variable5)
	  Printf("\n test negative number\n")
	  Printf("%%_3d %%_2d %%_2f %%_3f => %_3d %_2d %_2f %_3f\n" neg1 neg2 neg3 neg4)

 	)
) ) )
enqueue(HelloWorld)

define(TypesToCheck dv(a(.Type *) (
    .Boolean
    .Int8 .Int16 .Int32 .Int64 .UInt8 .UInt16 .UInt32 .UInt64
    .Single .Double .ComplexSingle .ComplexDouble
    .String .Utf8Char .Utf32Char
    .Timestamp
    .Type .TypeManager
    .VI .Clump
    //.CodePointer .DataPointer -- omitted to avoid diffs between 32 and 64 bit builds.
    .BranchTarget .Instruction .InstructionBlock
    .Array .Object
    )
))

define(VIParamClusterFlat c())

define(HelloWorld dv(.VirtualInstrument (
    .VIParamClusterFlat
    c(
     e(.TypeManager tm)
     e(a(.Type *) allTypes)
     e(.Type telt)
     e(.String str1)
     e(.String str2)
     e(.Int32 usage)

     e(dv(.String "Hello world. I can fly.") variable1)
     e(dv(.Int32 1) one)
     e(.Int32 i)
     e(.Int32 n)
     e(.Int32 aqSize)
     e(.Int32 alignment)
     e(.Type baseType)
     e(.Boolean hasCustomDefault)
     e(.Boolean hasGeneric)

     e(.Int32 encoding)
     e(.String generatedString)
    )
    clump (1
        TypeManagerCurrentTypeManager(tm)
        TypeManagerGetTypes(tm allTypes)
        ArrayLength(allTypes n)
        Printf(" Total number of types %d\n" n)

       Println(TypesToCheck)
        ArrayLength(TypesToCheck n)

        Perch(0)
        BranchIfGE(1 i n)
            ArrayIndexElt(TypesToCheck i telt)
            TypeName(telt str1)
            TypeElementName(telt str2)
            TypeTopAQSize(telt aqSize)
            TypeAlignment(telt alignment)
            TypeBaseType(telt baseType)
            TypeHasCustomDefault(telt hasCustomDefault)
            TypeHasGenericType(telt hasGeneric)

            TypeEncoding(telt encoding)
            TypeUsageType(telt usage)

            // TopAQ size omitted to avoid differences between 32 and 64 bit builds.
            Printf(" e(.%s)  // encoding:%2d usage:%d baseType:%z dv:%s generic:%s\n"
                    str1 encoding usage baseType hasCustomDefault hasGeneric)
            ToTypeAndDataString(telt generatedString)
            //Printf(" generated strgin <%s>\n" generatedString)
            Add(i one i)
        Branch(0)
        Perch(1)
    )
    clump(1
       Println(n)
    )

      //  While()
      //  Unitl()
      //  For(i n 1)  // for arg0 goes from initial value to arg1 execute clump arg2. This can be done by a sub vi!

) ) )
enqueue(HelloWorld)

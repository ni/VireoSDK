define(Test dv(.VirtualInstrument (
 c(
    e(dv(.UInt8 12) uInt8_X)
    e(dv(.UInt8 10) uInt8_Y)
    e(.UInt8 uInt8_Value)
    e(dv(.Int8 12) int8_X)
    e(dv(.Int8 10) int8_Y)
    e(.Int8 int8_Value)

    e(dv(.UInt16 12) uInt16_X)
    e(dv(.UInt16 10) uInt16_Y)
    e(.UInt16 uInt16_Value)
    e(dv(.Int16 12) int16_X)
    e(dv(.Int16 10) int16_Y)
    e(.Int16 int16_Value)

    e(dv(.UInt32 12) uInt32_X)
    e(dv(.UInt32 10) uInt32_Y)
    e(.UInt32 uInt32_Value)
    e(dv(.Int32 12) int32_X)
    e(dv(.Int32 10) int32_Y)
    e(.Int32 int32_Value)

    e(dv(.UInt64 12) uInt64_X)
    e(dv(.UInt64 10) uInt64_Y)
    e(.UInt64 uInt64_Value)
    e(dv(.Int64 12) int64_X)
    e(dv(.Int64 10) int64_Y)
    e(.Int64 int64_Value)

 ) 
  clump(1 
    Printf("------------- Bitwise operation on numerics\n")

	Printf("------------- Bitwise operation on UInt8\n")
    And(uInt8_X uInt8_Y uInt8_Value)
    Printf(" And (%z %z) => %z\n" uInt8_X uInt8_Y uInt8_Value)
    Or(uInt8_X uInt8_Y uInt8_Value)
    Printf(" Or (%z %z) => %z\n" uInt8_X uInt8_Y uInt8_Value)
    Nor(uInt8_X uInt8_Y uInt8_Value)
    Printf(" Nor (%z %z) => %z\n" uInt8_X uInt8_Y uInt8_Value)
    Nand(uInt8_X uInt8_Y uInt8_Value)
    Printf(" Nand (%z %z) => %z\n" uInt8_X uInt8_Y uInt8_Value)
    Xor(uInt8_X uInt8_Y uInt8_Value)
    Printf(" Xor (%z %z) => %z\n" uInt8_X uInt8_Y uInt8_Value)
    Nxor(uInt8_X uInt8_Y uInt8_Value)
    Printf(" Nxor (%z %z) => %z\n" uInt8_X uInt8_Y uInt8_Value)
    Implies(uInt8_X uInt8_Y uInt8_Value)
    Printf(" Implies (%z %z) => %z\n" uInt8_X uInt8_Y uInt8_Value)
    Not(uInt8_X uInt8_Value)
    Printf(" Not (%z) => %z\n" uInt8_X uInt8_Value)
    Not(uInt8_Y uInt8_Value)
    Printf(" Not (%z) => %z\n" uInt8_Y uInt8_Value)

	Printf("------------- Bitwise operation on Int8\n")
    And(int8_X int8_Y int8_Value)
    Printf(" And (%z %z) => %z\n" int8_X int8_Y int8_Value)
    Or(int8_X int8_Y int8_Value)
    Printf(" Or (%z %z) => %z\n" int8_X int8_Y int8_Value)
    Nor(int8_X int8_Y int8_Value)
    Printf(" Nor (%z %z) => %z\n" int8_X int8_Y int8_Value)
    Nand(int8_X int8_Y int8_Value)
    Printf(" Nand (%z %z) => %z\n" int8_X int8_Y int8_Value)
    Xor(int8_X int8_Y int8_Value)
    Printf(" Xor (%z %z) => %z\n" int8_X int8_Y int8_Value)
    Nxor(int8_X int8_Y int8_Value)
    Printf(" Nxor (%z %z) => %z\n" int8_X int8_Y int8_Value)
    Implies(int8_X int8_Y int8_Value)
    Printf(" Implies (%z %z) => %z\n" int8_X int8_Y int8_Value)
    Not(int8_X int8_Value)
    Printf(" Not (%z) => %z\n" int8_X int8_Value)
    Not(int8_Y int8_Value)
    Printf(" Not (%z) => %z\n" int8_Y int8_Value)

	Printf("------------- Bitwise operation on UInt16\n")
    And(uInt16_X uInt16_Y uInt16_Value)
    Printf(" And (%z %z) => %z\n" uInt16_X uInt16_Y uInt16_Value)
    Or(uInt16_X uInt16_Y uInt16_Value)
    Printf(" Or (%z %z) => %z\n" uInt16_X uInt16_Y uInt16_Value)
    Nor(uInt16_X uInt16_Y uInt16_Value)
    Printf(" Nor (%z %z) => %z\n" uInt16_X uInt16_Y uInt16_Value)
    Nand(uInt16_X uInt16_Y uInt16_Value)
    Printf(" Nand (%z %z) => %z\n" uInt16_X uInt16_Y uInt16_Value)
    Xor(uInt16_X uInt16_Y uInt16_Value)
    Printf(" Xor (%z %z) => %z\n" uInt16_X uInt16_Y uInt16_Value)
    Nxor(uInt16_X uInt16_Y uInt16_Value)
    Printf(" Nxor (%z %z) => %z\n" uInt16_X uInt16_Y uInt16_Value)
    Implies(uInt16_X uInt16_Y uInt16_Value)
    Printf(" Implies (%z %z) => %z\n" uInt16_X uInt16_Y uInt16_Value)
    Not(uInt16_X uInt16_Value)
    Printf(" Not (%z) => %z\n" uInt16_X uInt16_Value)
    Not(uInt16_Y uInt16_Value)
    Printf(" Not (%z) => %z\n" uInt16_Y uInt16_Value)

	Printf("------------- Bitwise operation on Int16\n")
    And(int16_X int16_Y int16_Value)
    Printf(" And (%z %z) => %z\n" int16_X int16_Y int16_Value)
    Or(int16_X int16_Y int16_Value)
    Printf(" Or (%z %z) => %z\n" int16_X int16_Y int16_Value)
    Nor(int16_X int16_Y int16_Value)
    Printf(" Nor (%z %z) => %z\n" int16_X int16_Y int16_Value)
    Nand(int16_X int16_Y int16_Value)
    Printf(" Nand (%z %z) => %z\n" int16_X int16_Y int16_Value)
    Xor(int16_X int16_Y int16_Value)
    Printf(" Xor (%z %z) => %z\n" int16_X int16_Y int16_Value)
    Nxor(int16_X int16_Y int16_Value)
    Printf(" Nxor (%z %z) => %z\n" int16_X int16_Y int16_Value)
    Implies(int16_X int16_Y int16_Value)
    Printf(" Implies (%z %z) => %z\n" int16_X int16_Y int16_Value)
    Not(int16_X int16_Value)
    Printf(" Not (%z) => %z\n" int16_X int16_Value)
    Not(int16_Y int16_Value)
    Printf(" Not (%z) => %z\n" int16_Y int16_Value)

	Printf("------------- Bitwise operation on UInt32\n")
    And(uInt32_X uInt32_Y uInt32_Value)
    Printf(" And (%z %z) => %z\n" uInt32_X uInt32_Y uInt32_Value)
    Or(uInt32_X uInt32_Y uInt32_Value)
    Printf(" Or (%z %z) => %z\n" uInt32_X uInt32_Y uInt32_Value)
    Nor(uInt32_X uInt32_Y uInt32_Value)
    Printf(" Nor (%z %z) => %z\n" uInt32_X uInt32_Y uInt32_Value)
    Nand(uInt32_X uInt32_Y uInt32_Value)
    Printf(" Nand (%z %z) => %z\n" uInt32_X uInt32_Y uInt32_Value)
    Xor(uInt32_X uInt32_Y uInt32_Value)
    Printf(" Xor (%z %z) => %z\n" uInt32_X uInt32_Y uInt32_Value)
    Nxor(uInt32_X uInt32_Y uInt32_Value)
    Printf(" Nxor (%z %z) => %z\n" uInt32_X uInt32_Y uInt32_Value)
    Implies(uInt32_X uInt32_Y uInt32_Value)
    Printf(" Implies (%z %z) => %z\n" uInt32_X uInt32_Y uInt32_Value)
    Not(uInt32_X uInt32_Value)
    Printf(" Not (%z) => %z\n" uInt32_X uInt32_Value)
    Not(uInt32_Y uInt32_Value)
    Printf(" Not (%z) => %z\n" uInt32_Y uInt32_Value)

	Printf("------------- Bitwise operation on Int32\n")
    And(int32_X int32_Y int32_Value)
    Printf(" And (%z %z) => %z\n" int32_X int32_Y int32_Value)
    Or(int32_X int32_Y int32_Value)
    Printf(" Or (%z %z) => %z\n" int32_X int32_Y int32_Value)
    Nor(int32_X int32_Y int32_Value)
    Printf(" Nor (%z %z) => %z\n" int32_X int32_Y int32_Value)
    Nand(int32_X int32_Y int32_Value)
    Printf(" Nand (%z %z) => %z\n" int32_X int32_Y int32_Value)
    Xor(int32_X int32_Y int32_Value)
    Printf(" Xor (%z %z) => %z\n" int32_X int32_Y int32_Value)
    Nxor(int32_X int32_Y int32_Value)
    Printf(" Nxor (%z %z) => %z\n" int32_X int32_Y int32_Value)
    Implies(int32_X int32_Y int32_Value)
    Printf(" Implies (%z %z) => %z\n" int32_X int32_Y int32_Value)
    Not(int32_X int32_Value)
    Printf(" Not (%z) => %z\n" int32_X int32_Value)
    Not(int32_Y int32_Value)
    Printf(" Not (%z) => %z\n" int32_Y int32_Value)

	Printf("------------- Bitwise operation on UInt64\n")
    And(uInt64_X uInt64_Y uInt64_Value)
    Printf(" And (%z %z) => %z\n" uInt64_X uInt64_Y uInt64_Value)
    Or(uInt64_X uInt64_Y uInt64_Value)
    Printf(" Or (%z %z) => %z\n" uInt64_X uInt64_Y uInt64_Value)
    Nor(uInt64_X uInt64_Y uInt64_Value)
    Printf(" Nor (%z %z) => %z\n" uInt64_X uInt64_Y uInt64_Value)
    Nand(uInt64_X uInt64_Y uInt64_Value)
    Printf(" Nand (%z %z) => %z\n" uInt64_X uInt64_Y uInt64_Value)
    Xor(uInt64_X uInt64_Y uInt64_Value)
    Printf(" Xor (%z %z) => %z\n" uInt64_X uInt64_Y uInt64_Value)
    Nxor(uInt64_X uInt64_Y uInt64_Value)
    Printf(" Nxor (%z %z) => %z\n" uInt64_X uInt64_Y uInt64_Value)
    Implies(uInt64_X uInt64_Y uInt64_Value)
    Printf(" Implies (%z %z) => %z\n" uInt64_X uInt64_Y uInt64_Value)
    Not(uInt64_X uInt64_Value)
    Printf(" Not (%z) => %z\n" uInt64_X uInt64_Value)
    Not(uInt64_Y uInt64_Value)
    Printf(" Not (%z) => %z\n" uInt64_Y uInt64_Value)

	Printf("------------- Bitwise operation on Int64\n")
    And(int64_X int64_Y int64_Value)
    Printf(" And (%z %z) => %z\n" int64_X int64_Y int64_Value)
    Or(int64_X int64_Y int64_Value)
    Printf(" Or (%z %z) => %z\n" int64_X int64_Y int64_Value)
    Nor(int64_X int64_Y int64_Value)
    Printf(" Nor (%z %z) => %z\n" int64_X int64_Y int64_Value)
    Nand(int64_X int64_Y int64_Value)
    Printf(" Nand (%z %z) => %z\n" int64_X int64_Y int64_Value)
    Xor(int64_X int64_Y int64_Value)
    Printf(" Xor (%z %z) => %z\n" int64_X int64_Y int64_Value)
    Nxor(int64_X int64_Y int64_Value)
    Printf(" Nxor (%z %z) => %z\n" int64_X int64_Y int64_Value)
    Implies(int64_X int64_Y int64_Value)
    Printf(" Implies (%z %z) => %z\n" int64_X int64_Y int64_Value)
    Not(int64_X int64_Value)
    Printf(" Not (%z) => %z\n" int64_X int64_Value)
    Not(int64_Y int64_Value)
    Printf(" Not (%z) => %z\n" int64_Y int64_Value)

   )

 ) ) )
enqueue(Test)




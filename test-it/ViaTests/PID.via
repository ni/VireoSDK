// Autogenerated Vireo assembly file
// Generated on Fri Jun  6 14:11:39 2014

define(c0 dv(.Int32 1000000) )
define(c1 dv(.Double 0.000000) )
define(c2 dv(.Double 0.010000) )
define(c3 dv(.Int32 50) )
define(c4 dv(.Double 0.500000) )
define(c5 dv(.Double 0.016667) )
define(c6 dv(.Boolean false) )
define(c7 dv(.Int32 0) )
define(c8 dv(.Boolean true) )
define(c9 dv(.Int32 1) )
//---------------------------------------------------
//VI Definition: PID Batch.vi
define(videf1 dv(.VirtualInstrument (
    c(
        e(dv(c(
            e(.Double n0)   // proportional gain (Kc)
            e(.Double n1)   // integral time (Ti min)
            e(.Double n2)   // derivative time (Td min)
        ) (0.800000 0.000100 0.000010 )) local1)   // PID gains
        e(dv(c(
            e(.Double n0)   // output high
            e(.Double n1)   // output low
        ) (100.000000 -100.000000 )) local2)   // output range
        e(dv(.Double 45.510836) local3)   // SetPoint
        e(dv(.UInt32 988) local4)   // Time
        e(dv(a(.Double *) ( ) ) local5)   // subarray
        e(dv(a(.Double *) ( ) ) local6)   // Waveform Graph
        e(.UInt32 local7)   // millisecond timer value
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Int32 local10)
        e(.Double local11)   // output
        e(.Double local12)   // output
        e(.Boolean local13)
        e(.Double local14)   // output
        e(a(.Double *) local15)
        e(.UInt32 local16)   // millisecond timer value
    )
        clump(1
        GetMillisecondTickCount(local7)
//--- begin for loop
        Copy(c1 local12 )                         // Pre-Loop copy into LSR
        Copy(c0 local9 )                          // set loop count
        Sub(local9 c9 local10)
        Copy(c7 local8 )                          // initialize i
        ArrayResize(local15 local9)
        //ArrayFill(local15 local9 local14)
        Perch(0)
        Copy(local12 local11 )   // LSR copy into inner wire
        IsEQ(local8 c7 local13)
        videf2(local14 local13 local2 c2 local1 local11 local3)
        Copy(local14 local12 )
        ArrayReplaceElt(local15 local15 local8 local14)
        BranchIfGE(1 local8 local10)
        Add(local8 c9 local8)                     // increment i
        Branch(0)                                 // loop again
        Perch(1)
        GetMillisecondTickCount(local16)
        Sub(local16 local7 local4)
        ArraySubset(local15 local15 * c3)
        Printf(" First 50 values %z\n" local15)
   //     Printf(" Time it took %s\n" local4)
        Copy(local15 local6 )
        Copy(local15 local5 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: PID.vi
define(videf2 dv(.VirtualInstrument (
    c(
        o(.Double  local7)   // output
//      o(dv(.Double 0.000000) local7)   // output
        i(dv(.Boolean false) local6)   // reinitialize? (F)
        i(dv(c(
            e(.Double n0)   // output high
            e(.Double n1)   // output low
        ) (100.000000 -100.000000 )) local1)   // output range
        i(dv(.Double -1.000000) local2)   // dt (s)
        i(dv(c(
            e(.Double n0)   // proportional gain (Kc)
            e(.Double n1)   // integral time (Ti min)
            e(.Double n2)   // derivative time (Td min)
        ) (1.000000 0.010000 0.000000 )) local5)   // PID gains
        i(dv(.Double 0.000000) local4)   // process variable
        i(dv(.Double 0.000000) local3)   // setpoint
    )
    c(
        e(.Double local8)
        e(.Double local9)   // proportional gain (Kc)
        e(.Double local10)   // integral time (Ti min)
        e(.Double local11)   // derivative time (Td min)
        e(.Boolean local12)
        e(.Double local13)
        e(.Double local14)   // y
        e(.Double local15)
        e(.Double local16)
        e(.Double local17)
        e(.Boolean local18)
        e(.Double local19)   // proportional gain (Kc)
        e(.Double local20)   // proportional gain (Kc)
        e(.Double local21)   // integral time (Ti min)
        e(.Double local22)   // integral time (Ti min)
        e(.Double local23)   // derivative time (Td min)
        e(.Double local24)   // derivative time (Td min)
        e(.Double local25)   // process variable
        e(.Double local26)   // process variable
        e(.Double local27)
        e(.Double local28)
        e(.Double local29)
        e(.Double local30)
        e(.Double local31)
        e(.Double local32)
        e(.Double local33)
        e(.Double local34)
        e(.Boolean local35)
        e(.Boolean local36)
        e(.Boolean local37)
    )
        clump(1
        
        Sub(local3 local4 local8)
        Copy(local5.n0 local9 )                   // unbundle
        Copy(local5.n1 local10 )                  // unbundle
        Copy(local5.n2 local11 )                  // unbundle
        IsNE(local10 c1 local12)
//--- begin case structure
        BranchIfTrue(0 local12)                   // CaseStructure test
//--- default case
        Copy(c1 local14 )                         // case output tunnel
        Copy(c1 local13 )                         // case output tunnel
        Branch(1)
//--- case
        Perch(0)
        Div(local9 local10 local13)
        Copy(c4 local14 )                         // case output tunnel
//--- end case structure
        Perch(1)
        Mul(local11 local9 local15)
        Mul(local8 local9 local16)
        Mul(c5 local2 local17)
//--- begin case structure
        BranchIfTrue(2 local6)                    // CaseStructure test
//--- default case
        IsGT(local17 c1 local18)
        Branch(3)
//--- case
        Perch(2)
        Copy(c6 local18 )        // case output tunnel
//--- end case structure
//--- begin while loop
        Perch(3)
        Copy(local20 local19 )   // LSR copy into inner wire
        Copy(local22 local21 )                    // LSR copy into inner wire
        Copy(local24 local23 )                    // LSR copy into inner wire
        Copy(local26 local25 )                    // LSR copy into inner wire
        Copy(local28 local27 )                    // LSR copy into inner wire
        Copy(local30 local29 )                    // LSR copy into inner wire
        Copy(local32 local31 )                    // LSR copy into inner wire
        Copy(local34 local33 )                    // LSR copy into inner wire
        Copy(local8 local32 )
        Copy(local11 local24 )
        IsEQ(local11 local23 local35)
        Copy(local10 local22 )
        IsEQ(local10 local21 local36)
        Copy(local9 local20 )
        IsEQ(local9 local19 local37)
        And(local37 local36 local36)
        And(local36 local35 local35)
//--- begin case structure
        BranchIfTrue(6 local6)                    // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfTrue(4 local18)                   // CaseStructure test
//--- default case
        Copy(local27 local19 )                    // case output tunnel
        Copy(local25 local21 )                    // case output tunnel
        Branch(5)
//--- case
        Perch(4)
        Sub(local4 local25 local19)
        Sub(c1 local19 local19)
        Mul(local15 local19 local19)
        Div(local19 local17 local19)
        Copy(local4 local21 )                     // case output tunnel
//--- end case structure
        Perch(5)
        Branch(7)
//--- case
        Perch(6)
        Copy(local4 local21 )    // case output tunnel
        Copy(c1 local19 )                         // case output tunnel
//--- end case structure
        Perch(7)
        Copy(local19 local28 )
//--- begin case structure
        BranchIfTrue(8 local12)                   // CaseStructure test
//--- default case
        Add(local16 local19 local23)
        Copy(c1 local25 )                         // case output tunnel
        Copy(local23 local19 )                    // case output tunnel
        Branch(12)
//--- case
        Perch(8)
        Or(local6 local35 local35)
        Add(local8 local31 local25)
        Mul(local25 local14 local25)
        Mul(local25 local13 local25)
        Mul(local25 local17 local25)
        Add(local25 local33 local25)
//--- begin case structure
        BranchIfTrue(9 local35)                   // CaseStructure test
//--- default case
        Add(local16 local19 local27)
        Sub(local29 local27 local27)
        Copy(local27 local25 )                    // case output tunnel
        Copy(local29 local19 )                    // case output tunnel
        Branch(12)
//--- case
//--- begin case structure
        Perch(9)
        BranchIfTrue(10 local6)  // CaseStructure test
//--- default case
        Branch(11)
//--- case
        Perch(10)
        Copy(c1 local25 )       // case output tunnel
//--- end case structure
        Perch(11)
        Add(local25 local16 local31)
        Add(local31 local19 local19)
//--- end case structure
//--- end case structure
        Perch(12)
        Copy(local19 local30 )
        Copy(local25 local34 )
        Copy(local21 local26 )
        BranchIfFalse(13 c6)                      // Loop condition terminal
        Branch(3)                                 // loop again
//--- end while loop
        Perch(13)
        Copy(local30 local7 )
//--- end of vi
    )
)))
enqueue(videf1)

// Autogenerated Vireo assembly file
// Generated on 12/14/2016 16:33:13
define (c0 dv(.Boolean true))
define (c1 dv(.UInt32 50))
//---------------------------------------------------
//VI Definition: TestVI_Wait.gvi
define (_%54estVI_Wait%2Egvi dv(.VirtualInstrument (
    Locals: c(   // Data Space1
        e(dv(.Boolean false)dataItem_Expected)   // Boolean
        e(.UInt32 local3)   // UInt32
        e(.UInt32 local4)   // UInt32
        e(dv(.UInt32 0)dataItem_UInt32TicksB)   // UInt32
        e(dv(.UInt32 0)dataItem_UInt32TicksA)   // UInt32
        e(.Boolean local7)   // Boolean
        e(dv(.Boolean false)dataItem_UInt32TicksDifferent)   // Boolean
        e(.UInt8 local9)   // UInt8
        e(.UInt8 local10)   // UInt8
        e(.UInt8 local11)   // UInt8
        e(.UInt8 local12)   // UInt8
        e(dv(.UInt8 0)dataItem_UInt8TicksB)   // UInt8
        e(dv(.UInt8 0)dataItem_UInt8TicksA)   // UInt8
        e(.Boolean local15)   // Boolean
        e(dv(.Boolean false)dataItem_UInt8TicksDifferent)   // Boolean
        e(.UInt8 local17)   // UInt8
        e(.UInt8 local18)   // UInt8
        e(.UInt8 local19)   // UInt8
        e(.UInt8 local20)   // UInt8
        e(dv(.UInt8 0)dataItem_UInt8MillisecondsB)   // UInt8
        e(dv(.UInt8 0)dataItem_UInt8MillisecondsA)   // UInt8
        e(.Boolean local23)   // Boolean
        e(dv(.Boolean false)dataItem_UInt8MillisecondsDifferent)   // Boolean
        e(.UInt8 local25)   // UInt8
        e(.UInt8 local26)   // UInt8
        e(.UInt8 local27)   // UInt8
        e(.UInt8 local28)   // UInt8
        e(dv(.UInt8 0)dataItem_UInt8MicrosecondsB)   // UInt8
        e(dv(.UInt8 0)dataItem_UInt8MicrosecondsA)   // UInt8
        e(.Boolean local31)   // Boolean
        e(dv(.Boolean false)dataItem_UInt8MicrosecondsDifferent)   // Boolean
        e(.Boolean local33)   // Boolean
        e(dv(.Boolean false)dataItem_UInt8CounterSize)   // Boolean
        e(.UInt16 local35)   // UInt16
        e(.UInt16 local36)   // UInt16
        e(.UInt16 local37)   // UInt16
        e(.UInt16 local38)   // UInt16
        e(dv(.UInt16 0)dataItem_UInt16MillisecondsB)   // UInt16
        e(dv(.UInt16 0)dataItem_UInt16MillisecondsA)   // UInt16
        e(.Boolean local41)   // Boolean
        e(dv(.Boolean false)dataItem_UInt16MillisecondsDifferent)   // Boolean
        e(.UInt16 local43)   // UInt16
        e(.UInt16 local44)   // UInt16
        e(.UInt16 local45)   // UInt16
        e(.UInt16 local46)   // UInt16
        e(dv(.UInt16 0)dataItem_UInt16MicrosecondsB)   // UInt16
        e(dv(.UInt16 0)dataItem_UInt16MicrosecondsA)   // UInt16
        e(.Boolean local49)   // Boolean
        e(dv(.Boolean false)dataItem_UInt16MicrosecondsDifferent)   // Boolean
        e(.UInt16 local51)   // UInt16
        e(.UInt16 local52)   // UInt16
        e(.UInt16 local53)   // UInt16
        e(.UInt16 local54)   // UInt16
        e(dv(.UInt16 0)dataItem_UInt16TicksB)   // UInt16
        e(dv(.UInt16 0)dataItem_UInt16TicksA)   // UInt16
        e(.Boolean local57)   // Boolean
        e(dv(.Boolean false)dataItem_UInt16TicksDifferent)   // Boolean
        e(.Boolean local59)   // Boolean
        e(dv(.Boolean false)dataItem_UInt16CounterSize)   // Boolean
        e(.UInt32 local61)   // UInt32
        e(.UInt32 local62)   // UInt32
        e(dv(.UInt32 0)dataItem_UInt32MillisecondsB)   // UInt32
        e(dv(.UInt32 0)dataItem_UInt32MillisecondsA)   // UInt32
        e(.Boolean local65)   // Boolean
        e(dv(.Boolean false)dataItem_UInt32MillisecondsDifferent)   // Boolean
        e(.UInt32 local67)   // UInt32
        e(.UInt32 local68)   // UInt32
        e(dv(.UInt32 0)dataItem_UInt32MicrosecondsB)   // UInt32
        e(dv(.UInt32 0)dataItem_UInt32MicrosecondsA)   // UInt32
        e(.Boolean local71)   // Boolean
        e(dv(.Boolean false)dataItem_UInt32MicrosecondsDifferent)   // Boolean
        e(.Boolean local73)   // Boolean
        e(dv(.Boolean false)dataItem_UInt32CounterSize)   // Boolean
        e(.Boolean local75)   // Boolean
        e(dv(.Boolean false)dataItem_Actual)   // Boolean
        e(.Boolean local77)   // Boolean
        e(.Boolean local78)   // Boolean
        e(.Boolean local79)   // Boolean
        e(.Boolean local80)   // Boolean
    )
        clump(1
        Copy(c0 dataItem_Expected )
        Trigger(1)
        Trigger(2)
        Trigger(3)
        Trigger(4)
        Trigger(5)
        Trigger(6)
        Trigger(7)
        Trigger(8)
        Trigger(9)
        Wait(1)
        Wait(2)
        Wait(3)
        Wait(4)
        Wait(5)
        Wait(6)
        Wait(7)
        Wait(8)
        Wait(9)
        And(local73 local59 local80)
        Copy(local80 local75 )
        Copy(local75 dataItem_Actual )
        Printf ("All tests pass: '%s'.\n" dataItem_Actual)
        Printf ("    UInt32 counter size: '%s'.\n" dataItem_UInt32CounterSize)
        Printf ("        Ticks different: '%s'.\n" dataItem_UInt32TicksDifferent)
        Printf ("        Microseconds different: '%s'.\n" dataItem_UInt32MicrosecondsDifferent)
        Printf ("        Milliseconds different: '%s'.\n" dataItem_UInt32MillisecondsDifferent)
        Printf ("    UInt16 counter size: '%s'.\n" dataItem_UInt16CounterSize)
        Printf ("        Ticks different: '%s'.\n" dataItem_UInt16TicksDifferent)
        Printf ("        Microseconds different: '%s'.\n" dataItem_UInt16MicrosecondsDifferent)
        Printf ("        Milliseconds different: '%s'.\n" dataItem_UInt16MillisecondsDifferent)
/* Clump Ended. */    )
    clump(1
        Convert(c1 local9)
        WaitTickCount(local9 local10 )
        Convert(c1 local11)
        WaitTickCount(local11 local12 )
        Copy(local12 dataItem_UInt8TicksB )
        Copy(local10 dataItem_UInt8TicksA )
        //IsNE(local10 local12 local15) // sometimes an Int8 wraps fast enough that this generates a false negative.  This is not a real failure and not useful; making always pass
        Copy(true local15)
        Copy(local15 dataItem_UInt8TicksDifferent )
        Trigger(11)
        Wait(11)
        // Code End
/* Clump Ended. */    )
    clump(1
        Convert(c1 local17)
        WaitMilliseconds(local17 local18 )
        Convert(c1 local19)
        WaitMilliseconds(local19 local20 )
        Copy(local20 dataItem_UInt8MillisecondsB )
        Copy(local18 dataItem_UInt8MillisecondsA )
        IsNE(local18 local20 local23)
        Copy(local23 dataItem_UInt8MillisecondsDifferent )
        Trigger(11)
        Wait(11)
        // Code End
/* Clump Ended. */    )
    clump(1
        Convert(c1 local25)
        WaitMicroseconds(local25 local26 )
        Convert(c1 local27)
        WaitMicroseconds(local27 local28 )
        Copy(local28 dataItem_UInt8MicrosecondsB )
        Copy(local26 dataItem_UInt8MicrosecondsA )
        IsNE(local26 local28 local31)
        Copy(local31 dataItem_UInt8MicrosecondsDifferent )
        Trigger(11)
        Wait(11)
        // Code End
/* Clump Ended. */    )
    clump(1
        Convert(c1 local35)
        WaitMilliseconds(local35 local36 )
        Convert(c1 local37)
        WaitMilliseconds(local37 local38 )
        Copy(local38 dataItem_UInt16MillisecondsB )
        Copy(local36 dataItem_UInt16MillisecondsA )
        IsNE(local36 local38 local41)
        Copy(local41 dataItem_UInt16MillisecondsDifferent )
        Trigger(12)
        Wait(12)
        // Code End
/* Clump Ended. */    )
    clump(1
        Convert(c1 local43)
        WaitMicroseconds(local43 local44 )
        Convert(c1 local45)
        WaitMicroseconds(local45 local46 )
        Copy(local46 dataItem_UInt16MicrosecondsB )
        Copy(local44 dataItem_UInt16MicrosecondsA )
        IsNE(local44 local46 local49)
        Copy(local49 dataItem_UInt16MicrosecondsDifferent )
        Trigger(12)
        Wait(12)
        // Code End
/* Clump Ended. */    )
    clump(1
        Convert(c1 local51)
        WaitTickCount(local51 local52 )
        Convert(c1 local53)
        WaitTickCount(local53 local54 )
        Copy(local54 dataItem_UInt16TicksB )
        Copy(local52 dataItem_UInt16TicksA )
        IsNE(local52 local54 local57)
        Copy(local57 dataItem_UInt16TicksDifferent )
        Trigger(12)
        Wait(12)
        // Code End
/* Clump Ended. */    )
    clump(1
        WaitMilliseconds(c1 local61 )
        WaitMilliseconds(c1 local62 )
        Copy(local62 dataItem_UInt32MillisecondsB )
        Copy(local61 dataItem_UInt32MillisecondsA )
        IsNE(local61 local62 local65)
        Copy(local65 dataItem_UInt32MillisecondsDifferent )
        Trigger(10)
        Wait(10)
        // Code End
/* Clump Ended. */    )
    clump(1
        WaitMicroseconds(c1 local67 )
        WaitMicroseconds(c1 local68 )
        Copy(local68 dataItem_UInt32MicrosecondsB )
        Copy(local67 dataItem_UInt32MicrosecondsA )
        IsNE(local67 local68 local71)
        Copy(local71 dataItem_UInt32MicrosecondsDifferent )
        Trigger(10)
        Wait(10)
        // Code End
/* Clump Ended. */    )
    clump(1
        WaitTickCount(c1 local3 )
        WaitTickCount(c1 local4 )
        Copy(local4 dataItem_UInt32TicksB )
        Copy(local3 dataItem_UInt32TicksA )
        IsNE(local3 local4 local7)
        Copy(local7 dataItem_UInt32TicksDifferent )
        Trigger(10)
        Wait(10)
        // Code End
/* Clump Ended. */    )
    clump(3
        And(local7 local71 local79)
        And(local65 local79 local79)
        Copy(local79 local73 )
        Copy(local73 dataItem_UInt32CounterSize )
        // Code End
/* Clump Ended. */    )
    clump(3
        And(local15 local31 local77)
        And(local23 local77 local77)
        Copy(local77 local33 )
        Copy(local33 dataItem_UInt8CounterSize )
        // Code End
/* Clump Ended. */    )
    clump(3
        And(local57 local49 local78)
        And(local41 local78 local78)
        Copy(local78 local59 )
        Copy(local59 dataItem_UInt16CounterSize )
        // Code End
/* Clump Ended. */    )
)))
enqueue (_%54estVI_Wait%2Egvi)
//Finished!! :D

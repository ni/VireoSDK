// Autogenerated Vireo assembly file
// Generated on Wed Feb 26 13:46:50 2014


define(c0 dv(.Int32 50) )
define(c1 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((8 )  0 false )) )
define(c2 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((0 )  0 false )) )
define(c3 dv(.Int32 8) )
define(c4 dv(.Int32 6) )
define(c5 dv(.Int32 9801) )
define(c6 dv(.Int32 396) )
define(c7 dv(.Int32 4) )
define(c8 dv(.Int32 1103) )
define(c9 dv(.Int32 26390) )
define(c10 dv(.Int32 0) )
define(c11 dv(.Boolean true) )
define(c12 dv(.Int32 1) )
define(c13 dv(a(.Int8 *) () ) )
define(c14 dv(.Int32 10) )
define(c15 dv(.Int8 0) )
define(c16 dv(.Boolean true) )
define(c17 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) (((1 0 0 0 )  0 false ) ((1 0 0 0 )  0 false ) ((6 1 0 0 )  0 false ) ((6 9 2 1 )  0 false ) ((6 7 7 1 3 3 0 0 )  0 false ) ((0 0 0 0 6 3 7 0 2 0 0 0 )  0 false ) ((0 0 0 0 6 5 8 3 7 8 6 2 )  0 false ) ((0 0 0 0 6 5 2 8 2 1 4 2 5 4 6 0 )  0 false ) ((0 0 0 0 6 7 5 6 3 3 9 2 8 0 9 2 4 6 2 0 )  0 false ) ((0 0 0 0 6 3 1 5 7 2 7 7 2 1 3 1 2 1 0 4 3 7 1 0 )  0 false ) ((0 0 0 0 0 0 0 0 6 3 1 5 7 2 7 7 2 1 3 1 2 1 0 4 3 7 1 0 )  0 false ) ) ) )
define(c18 dv(.Boolean false) )
define(c19 dv(.Int32 0) )
define(c20 dv(.Int32 1) )
define(c21 dv(.Int8 0) )
define(c22 dv(.Int8 10) )
define(c23 dv(a(.Int8 *) (0 ) ) )
define(c24 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) (((1 )  0 false ) ((1 )  0 false ) ((2 )  0 false ) ((6 )  0 false ) ((4 2 )  0 false ) ((0 2 1 )  0 false ) ((0 2 7 )  0 false ) ((0 4 0 5 )  0 false ) ((0 2 3 0 4 )  0 false ) ((0 8 8 2 6 3 )  0 false ) ((0 0 8 8 2 6 3 )  0 false ) ) ) )
define(c25 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((1 )  0 false )) )
define(c26 dv(c(
    e(.Int32 n0)
    e(.Int32 n1)
) (5 -1 )) )
define(c27 dv(.Int32 -1) )
define(c28 dv(.Int32 9) )
define(c29 dv(.Int8 1) )
define(c30 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) (()  0 false )) )
define(c31 dv(.Int32 0) )
define(c32 dv(.Int32 1) )
define(c33 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) () ) )
define(c34 dv(.Int32 7) )
define(c35 dv(.Int32 2) )
define(c36 dv(a(.Int8 *) () ) )
define(c37 dv(.Int8 9) )
define(c38 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((1 )  0 false )) )
define(c39 dv(.UInt8 35) )
define(c40 dv(.Int8 46) )
define(c41 dv(.UInt8 48) )
define(c42 dv(.Int8 48) )
define(c43 dv(.UInt8 0) )
define(c44 dv(.Int8 45) )
define(c45 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((5 1 )  1 false )) )
define(c46 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((2 4 8 2 8 2 )  5 false )) )
define(c47 dv(.Int32 5) )
define(c48 dv(.Int8 2) )
//---------------------------------------------------
//VI Definition: Add.vi
define(videf1 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local34)   // A+B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local5)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(a(.Int8 *) local2)   // Array Num
        e(.Int32 local3)   // Decimal Index
        e(.Boolean local4)   // stop
        e(a(.Int8 *) local6)   // Array Num
        e(.Int32 local7)   // Decimal Index
        e(.Boolean local8)   // stop
        e(.Boolean local9)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // Larger
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // Smaller
        e(.Boolean local14)   // Equal
        e(a(.Int8 *) local15)   // Array Num
        e(.Int32 local16)   // Decimal Index
        e(a(.Int32 *) local17)   // Array Num
        e(a(.Int32 *) local18)
        e(.Int32 local19)   // Decimal Index
        e(.Int32 local20)
        e(.Int32 local21)
        e(.Int32 local22)
        e(.Int32 local23)
        e(.Int32 local24)   // Digits
        e(.Int8 local25)
        e(.Int8 local26)
        e(a(.Int32 *) local27)
        e(.Int32 local28)   // digit
        e(.Int32 local29)   // digit
        e(.Int32 local30)
        e(.Int8 local31)
        e(.Int8 local32)
        e(a(.Int32 *) local33)
    )

    clump(1
        Copy(local1.n0 local2 )                   // unbundle
        Copy(local1.n1 local3 )                   // unbundle
        Copy(local1.n2 local4 )                   // unbundle
        Copy(local5.n0 local6 )                   // unbundle
        Copy(local5.n1 local7 )                   // unbundle
        Copy(local5.n2 local8 )                   // unbundle
        IsEQ(local4 local8 local9)
//--- begin case structure
        Copy(local1 local10 )                     // case input tunnel
        Copy(local5 local11 )                     // case input tunnel
        BranchIfTrue(3 local9)                    // CaseStructure test
//--- default case
        videf2(local10 local11 local12 local13 local9 local14)
        BranchIfTrue(0 local9)
        Copy(local8 local4 )
//--- begin case structure
        Perch(0)
        BranchIfTrue(1 local14)  // CaseStructure test
//--- default case
        videf3(local11 local13 local12)
        Copy(local11.n0 local15 )                 // unbundle
        Copy(local11.n1 local16 )                 // unbundle
        Branch(2)
//--- case
        Perch(1)
        Copy(c36 local15 )       // case output tunnel
        Copy(c31 local16 )                        // case output tunnel
        Copy(c18 local4 )                         // case output tunnel
//--- end case structure
        Perch(2)
        Convert(local15 local17)
        Copy(local16 local3 )                     // case output tunnel
        Branch(15)
//--- case
        Perch(3)
        Convert(c36 local18)
        IsGT(local3 local7 local9)
        Copy(local7 local19 )
        BranchIfFalse(4 local9)
        Copy(local3 local19 )
        Perch(4)
        Sub(local3 local19 local20)
        Sub(local7 local19 local21)
        ArrayLength(local2 local22 )
        ArrayLength(local6 local23 )
        videf4(local24 local7 local23 local3 local22)
        Sub(local24 c32 local3)
        Copy(c21 local26 )                        // Pre-Loop copy into LSR
        Copy(local18 local27 )                    // Pre-Loop copy into LSR
        Copy(c31 local7 )                         // initialize i
//--- begin while loop
        Perch(5)
        Copy(local26 local25 )   // LSR copy into inner wire
        Copy(local27 local18 )                    // LSR copy into inner wire
        Convert(c37 local22)
        Convert(local25 local23)
        IsGT(local3 local7 local9)
        Add(local20 local7 local24)
        videf5(local28 local24 local2)
        Add(local7 local21 local24)
        videf5(local29 local24 local6)
        Add(local28 local29 local24)
        Add(local24 local23 local23)
        IsGT(local23 local22 local14)
//--- begin case structure
        BranchIfTrue(6 local14)                   // CaseStructure test
//--- default case
        Copy(local23 local22 )                    // case output tunnel
        Copy(c21 local25 )                        // case output tunnel
        Branch(9)
//--- case
        Perch(6)
        Copy(local23 local30 )   // Pre-Loop copy into LSR
        Copy(c21 local31 )                        // Pre-Loop copy into LSR
//--- begin while loop
        Perch(7)
        Copy(local30 local22 )   // LSR copy into inner wire
        Copy(local31 local25 )                    // LSR copy into inner wire
        Convert(c22 local24)
        Convert(c22 local28)
        Add(local25 c29 local25)
        Sub(local22 local28 local22)
        IsGE(local22 local24 local14)
        Copy(local22 local30 )
        Copy(local25 local31 )
        BranchIfFalse(8 local14)                  // Loop condition terminal
        Branch(7)                                 // loop again
//--- end while loop
        Perch(8)
        Copy(local30 local22 )   // case output tunnel
        Copy(local31 local25 )                    // case output tunnel
//--- end case structure
        Perch(9)
        ArrayConcatenate( local18 local18 local22)
        Copy(local25 local26 )
        Copy(local18 local27 )
        BranchIfFalse(10 local9)                  // Loop condition terminal
        Add(local7 c32 local7)                    // increment i
        Branch(5)                                 // loop again
//--- end while loop
        Perch(10)
        IsEQ(local26 c21 local9)
//--- begin case structure
        BranchIfTrue(13 local9)                   // CaseStructure test
//--- default case
        Quotient(local26 c22 local25)
        Remainder(local26 c22 local32)
        IsNE(local25 c21 local9)
        Copy(local27 local33 )                    // Pre-Loop copy into LSR
//--- begin while loop
        Perch(11)
        Copy(local33 local18 )  // LSR copy into inner wire
        Convert(local32 local3)
        ArrayConcatenate( local18 local18 local3)
        Copy(local18 local33 )
        BranchIfFalse(12 local9)                  // Loop condition terminal
        Branch(11)                                // loop again
//--- end while loop
        Perch(12)
        Copy(local33 local18 )  // case output tunnel
        Branch(14)
//--- case
        Perch(13)
        Copy(local27 local18 )  // case output tunnel
//--- end case structure
        Perch(14)
        Copy(local18 local17 )  // case output tunnel
        Copy(local19 local3 )                     // case output tunnel
        Copy(local8 local4 )                      // case output tunnel
//--- end case structure
        Perch(15)
        Convert(local17 local2)
        Copy(local2 local10.n0 )                  // bundle
        Copy(local3 local10.n1 )                  // bundle
        Copy(local4 local10.n2 )                  // bundle
        Copy(local10 local34 )                    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: CalcDivideDigits.vi
define(videf6 dv(.VirtualInstrument (
    c(
        o(dv(.Int32 0) local8)   // decimal Ofst 2
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 0) local2)   // decimal Ofst
        i(dv(.Int32 0) local3)   // Array Size
    )
    c(
        e(.Boolean local4)
        e(.Int32 local5)   // Digits
        e(.Int32 local6)   // decimal Ofst
        e(.Int32 local7)   // Array Size
    )

    clump(1
        IsGT(local2 local3 local4)
//--- begin case structure
        Copy(local1 local5 )                      // case input tunnel
        Copy(local2 local6 )                      // case input tunnel
        Copy(local3 local7 )                      // case input tunnel
        BranchIfTrue(0 local4)                    // CaseStructure test
//--- default case
        Sub(local7 local6 local6)
        Add(local6 local5 local6)
        Copy(local6 local5 )                      // case output tunnel
        Branch(0)
//--- case
//--- end case structure
        Perch(0)
        Copy(local5 local8 )     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: CompareToDigits.vi
define(videf7 dv(.VirtualInstrument (
    c(
        o(dv(.Boolean false) local7)   // Equal
        i(dv(.Int32 0) local1)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local3)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local2)   // A 2
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local4)   // A rounded to Digits
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A rounded to Digits
        e(.Boolean local6)   // Equal
    )

    clump(1
        Trigger(1)                                // fork
        videf8(local4 local1 local2)
        Wait(1)                                   // join
        videf9(local4 local5 * local6)
        Copy(local6 local7 )                      // FP Term
//--- end of vi
    )
    clump(1
        videf8(local5 local1 local3)
    )
)))
//---------------------------------------------------
//VI Definition: ComputeAddSize.vi
define(videf4 dv(.VirtualInstrument (
    c(
        o(dv(.Int32 0) local9)   // Digits
        i(dv(.Int32 0) local3)   // B Position
        i(dv(.Int32 0) local1)   // B Array Size
        i(dv(.Int32 0) local7)   // A Position
        i(dv(.Int32 0) local2)   // A Array Size
    )
    c(
        e(.Int32 local4)
        e(.Boolean local5)
        e(.Int32 local6)   // B Position
        e(.Int32 local8)
    )

    clump(1
        Sub(local1 local3 local4)
        IsGT(local3 c31 local5)
        Copy(c31 local6 )
        BranchIfFalse(0 local5)
        Copy(local3 local6 )
        Perch(0)
        Sub(local2 local7 local8)
        IsGT(local8 local4 local5)
        BranchIfFalse(1 local5)
        Copy(local8 local4 )
        Perch(1)
        IsGT(local7 c31 local5)
        Copy(c31 local8 )
        BranchIfFalse(2 local5)
        Copy(local7 local8 )
        Perch(2)
        IsGT(local8 local6 local5)
        BranchIfFalse(3 local5)
        Copy(local8 local6 )
        Perch(3)
        Add(local4 local6 local4)
        Copy(local4 local9 )                      // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: ComputeUUSSize.vi
define(videf10 dv(.VirtualInstrument (
    c(
        o(dv(.Int32 0) local7)   // B Index
        o(dv(.Int32 0) local8)   // A Index
        o(dv(.Int32 0) local16)   // Loop Count
        i(dv(.Int32 0) local1)   // B Array Position
        i(dv(a(.Int8 *) () ) local9)   // BArray
        i(dv(.Int32 0) local4)   // A Array Position
        i(dv(a(.Int8 *) () ) local10)   // A Array Num
    )
    c(
        e(.Boolean local2)
        e(.Int32 local3)   // B Array Position
        e(.Int32 local5)
        e(.Int32 local6)
        e(.Int32 local11)
        e(a(.Int8 *) local12)   // A Array Num
        e(.Int32 local13)
        e(.Int32 local14)   // digit
        e(.Boolean local15)
    )

    clump(1
        IsGT(local1 c19 local2)
        Copy(c19 local3 )
        BranchIfFalse(0 local2)
        Copy(local1 local3 )
        Perch(0)
        Sub(local1 local4 local5)
        IsLT(local5 c19 local2)
//--- begin case structure
        BranchIfTrue(1 local2)                    // CaseStructure test
//--- default case
        Sub(c19 local5 local6)
        Copy(c19 local5 )                         // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Copy(c19 local6 )        // case output tunnel
//--- end case structure
        Perch(2)
        Copy(local5 local7 )     // FP Term
        Copy(local6 local8 )                      // FP Term
        IsGT(local4 c19 local2)
        Copy(c19 local5 )
        BranchIfFalse(3 local2)
        Copy(local4 local5 )
        Perch(3)
        IsGT(local5 local3 local2)
        BranchIfFalse(4 local2)
        Copy(local5 local3 )
        Perch(4)
        ArrayLength(local9 local5 )
        Sub(local5 local1 local5)
        ArrayLength(local10 local6 )
        Sub(local6 c20 local6)
        Copy(local10 local12 )
        Copy(c31 local11 )                        // initialize i
//--- begin while loop
        Perch(5)
        IsLE(local11 local6 local2)
        Sub(local6 local11 local13)
        videf5(local14 local13 local12)
        IsEQ(local14 c19 local15)
        And(local15 local2 local2)
        BranchIfFalse(6 local2)                   // Loop condition terminal
        Add(local11 c32 local11)                  // increment i
        Branch(5)                                 // loop again
//--- end while loop
        Perch(6)
        Add(local13 c20 local6)
        Sub(local6 local4 local6)
        IsGT(local6 local5 local2)
        BranchIfFalse(7 local2)
        Copy(local6 local5 )
        Perch(7)
        Add(local5 local3 local3)
        Copy(local3 local16 )                     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Count Leading Zeros.vi
define(videf11 dv(.VirtualInstrument (
    c(
        i(dv(a(.Int8 *) () ) local1)   // Array Num
        o(dv(a(.Int8 *) () ) local9)   // Array Dup
        o(dv(.Int32 0) local10)   // NonZero Count
    )
    c(
        e(.Int32 local2)
        e(.Int32 local3)
        e(a(.Int8 *) local4)   // Array Num
        e(.Int32 local5)
        e(.Boolean local6)
        e(.Int8 local7)   // digit
        e(.Boolean local8)
    )

    clump(1
        ArrayLength(local1 local2 )
        Sub(local2 c32 local2)
        Copy(local1 local4 )
        Copy(c31 local3 )                         // initialize i
//--- begin while loop
        Perch(0)
        Sub(local2 local3 local5)
        IsGT(local5 c31 local6)
        ArrayIndexElt(local4 local5 local7)
        IsEQ(local7 c21 local8)
        And(local8 local6 local6)
        BranchIfFalse(1 local6)                   // Loop condition terminal
        Add(local3 c32 local3)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Add(local5 c32 local2)
        Copy(local4 local9 )                      // FP Term
        BranchIfFalse(2 local8)
        Copy(c31 local2 )
        Perch(2)
        Copy(local2 local10 )    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Display Intermed Text.vi
define(videf12 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 -1) local4)   // Block Out
        o(dv(.String '') local11)   // Results
    )
    c(
        e(.Boolean local5)
        e(.Int32 local6)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A/B
        e(.String local9)   // String
        e(.String local10)   // String Out
    )

    clump(1
        IsGE(local4 c31 local5)
        Sub(local1 c4 local6)
        videf13(local7 local2 local3)
        videf14(c38 local7 local1 local8)
        videf15(local9 local6 local8)
//--- begin case structure
        Copy(local4 local6 )                      // case input tunnel
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        Branch(1)
//--- case
        Perch(0)
        videf16(local10 local6 local9)
        Copy(local10 local9 )                     // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local9 local11 )    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Div Scalar.vi
define(videf17 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local21)   // A / Scalar
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 0) local2)   // Scalar
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // A
    )
    c(
        e(.Boolean local3)
        e(.Int32 local5)   // Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A
        e(.Int32 local7)   // Digits
        e(a(.Int8 *) local8)   // Array Num
        e(.Int32 local9)   // Decimal Index
        e(.Int32 local10)
        e(.Int32 local11)   // decimal Ofst 2
        e(.Int32 local12)
        e(.Int32 local13)
        e(a(.Int8 *) local14)
        e(a(.Int8 *) local15)
        e(.Int32 local16)
        e(.Int32 local17)   // digit
        e(.Int8 local18)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local20)   // Normalized A
    )

    clump(1
        IsEQ(local2 c10 local3)
//--- begin case structure
        Copy(local2 local5 )                      // case input tunnel
        Copy(local4 local6 )                      // case input tunnel
        Copy(local1 local7 )                      // case input tunnel
        BranchIfTrue(4 local3)                    // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfEQ(2 local5 c12)             // CaseStructure test
//--- default case
        Copy(local6.n0 local8 )                   // unbundle
        Copy(local6.n1 local9 )                   // unbundle
        ArrayLength(local8 local10 )
        videf6(local11 local7 local9 local10)
        Sub(local11 c12 local7)
        Sub(local11 local10 local11)
        Add(local11 local9 local9)
        Copy(c10 local13 )                        // Pre-Loop copy into LSR
        Copy(c13 local15 )                        // Pre-Loop copy into LSR
        Copy(c31 local11 )                        // initialize i
//--- begin while loop
        Perch(0)
        Copy(local13 local12 )   // LSR copy into inner wire
        Copy(local15 local14 )                    // LSR copy into inner wire
        IsGT(local7 local11 local3)
        Sub(local10 local11 local16)
        Sub(local16 c12 local16)
        videf5(local17 local16 local8)
        Add(local17 local12 local12)
        Quotient(local12 local5 local16)
        Remainder(local12 local5 local12)
        Mul(c14 local12 local12)
        Convert(local16 local18)
        ArrayConcatenate( local14 local14 local18)
        Copy(local12 local13 )
        Copy(local14 local15 )
        BranchIfFalse(1 local3)                   // Loop condition terminal
        Add(local11 c32 local11)                  // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        videf18(local15 local8 *)
        Copy(local6 local19 )
        Copy(local8 local19.n0 )                  // bundle
        Copy(local9 local19.n1 )                  // bundle
        videf19(local20 * local19)
        Copy(local20 local19 )                    // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Copy(local6 local19 )    // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local19 local6 )    // case output tunnel
        Branch(4)
//--- case
//--- end case structure
        Perch(4)
        Copy(local6 local21 )    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Divide.vi
define(videf14 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // B
        i(dv(.Int32 10) local1)   // digits
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local29)   // A/B
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local4)   // Normalized A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // B copy
        e(.Int32 local6)   // Shifted
        e(.Int32 local7)
        e(.Boolean local8)   // stop
        e(.Boolean local9)   // stop
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local10)   // Arrays of A
        e(.Int32 local11)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // Normalized A
        e(.Boolean local13)
        e(a(.Int8 *) local14)
        e(a(.Int8 *) local15)
        e(.Int32 local16)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local17)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local18)
        e(.Int32 local19)
        e(.Boolean local20)   // A Greater
        e(.Boolean local21)   // Equal
        e(.Boolean local22)
        e(.Int32 local23)
        e(.Int32 local24)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local25)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local26)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local27)   // A-B
        e(.Int8 local28)
    )

    clump(1
        videf20(local2 local3 local4 local5 local6)
        Add(local6 c20 local6)
        Add(local1 local6 local7)
        Sub(local7 c20 local7)
        Copy(local5.n2 local8 )                   // unbundle
        Copy(local4.n2 local9 )                   // unbundle
        IsNE(local9 local8 local8)
        videf21(local10 local5)
        Copy(local4 local12 )                     // Pre-Loop copy into LSR
        Copy(c18 local13 )                        // Pre-Loop copy into LSR
        Copy(c13 local15 )                        // Pre-Loop copy into LSR
        Copy(c31 local11 )                        // initialize i
//--- begin while loop
        Perch(0)
        Copy(local12 local4 )    // LSR copy into inner wire
        Copy(local13 local9 )                     // LSR copy into inner wire
        Copy(local15 local14 )                    // LSR copy into inner wire
//--- begin case structure
        BranchIfTrue(15 local9)                   // CaseStructure test
//--- default case
        Copy(c26 local18 )                        // Pre-Loop copy into LSR
        Copy(c31 local16 )                        // initialize i
//--- begin while loop
        Perch(1)
        Copy(local18 local17 )   // LSR copy into inner wire
        Copy(local17.n0 local19 )                 // unbundle
        videf22(local5 local19 local10)
        videf9(local4 local5 local20 local21)
        IsEQ(local16 c19 local22)
//--- begin case structure
        BranchIfTrue(10 local21)                  // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfTrue(7 local22)                   // CaseStructure test
//--- default case
        Copy(local17.n0 local19 )                 // unbundle
        Copy(local17.n1 local23 )                 // unbundle
        IsGT(local23 c19 local21)
        IsEQ(local21 local20 local22)
//--- begin case structure
        BranchIfTrue(3 local22)                   // CaseStructure test
//--- default case
        Sub(local19 c20 local24)
        BranchIfTrue(2 local21)
        Copy(local19 local24 )
        Perch(2)
        Copy(local17 local25 )
        Copy(local24 local25.n0 )                 // bundle
        Copy(c18 local21 )                        // case output tunnel
        Branch(6)
//--- case
        Perch(3)
        IsNE(local19 c28 local21)
//--- begin case structure
        BranchIfTrue(4 local21)                   // CaseStructure test
//--- default case
        Branch(5)
//--- case
        Perch(4)
        Add(local19 local23 local23)
        IsNE(local23 c19 local22)
        Copy(local23 local19 )                    // case output tunnel
        Copy(local22 local21 )                    // case output tunnel
//--- end case structure
        Perch(5)
        Copy(local17 local26 )
        Copy(local19 local26.n0 )                 // bundle
        Copy(local26 local25 )                    // case output tunnel
//--- end case structure
        Perch(6)
        Copy(local21 local20 )   // case output tunnel
        Branch(9)
//--- case
        Perch(7)
        Copy(local17.n0 local19 )// unbundle
        Copy(c27 local23 )
        BranchIfFalse(8 local20)
        Copy(c20 local23 )
        Perch(8)
        Add(local19 local23 local19)
        Copy(local17 local26 )
        Copy(local19 local26.n0 )                 // bundle
        Copy(local23 local26.n1 )                 // bundle
        Copy(local26 local25 )                    // case output tunnel
        Copy(c16 local20 )                        // case output tunnel
//--- end case structure
        Perch(9)
        Copy(local25 local17 )   // case output tunnel
        Copy(c18 local21 )                        // case output tunnel
        Branch(11)
//--- case
        Perch(10)
        Copy(c18 local20 )      // case output tunnel
        Copy(c16 local21 )                        // case output tunnel
//--- end case structure
        Perch(11)
        Copy(local17 local18 )
        BranchIfFalse(12 local20)                 // Loop condition terminal
        Add(local16 c32 local16)                  // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(12)
        Copy(local18.n0 local16 )// unbundle
        IsNE(local16 c19 local20)
//--- begin case structure
        BranchIfTrue(13 local20)                  // CaseStructure test
//--- default case
        Copy(local4 local5 )                      // case output tunnel
        Branch(14)
//--- case
        Perch(13)
        videf22(local5 local16 local10)
        videf3(local27 local5 local4)
        Copy(local27 local5 )                     // case output tunnel
//--- end case structure
        Perch(14)
        videf23(local27 c27 local5)
        Convert(local16 local28)
        Copy(local27 local4 )                     // case output tunnel
        Copy(local21 local9 )                     // case output tunnel
        Branch(16)
//--- case
        Perch(15)
        Copy(c21 local28 )      // case output tunnel
//--- end case structure
        Perch(16)
        ArrayConcatenate( local14 local14 local28)
        IsGT(local7 local11 local20)
        Copy(local4 local12 )
        Copy(local9 local13 )
        Copy(local14 local15 )
        BranchIfFalse(17 local20)                 // Loop condition terminal
        Add(local11 c32 local11)                  // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(17)
        videf18(local15 local14 local7)
        Sub(local7 local6 local6)
        Copy(local12 local4 )
        Copy(local14 local4.n0 )                  // bundle
        Copy(local6 local4.n1 )                   // bundle
        Copy(local8 local4.n2 )                   // bundle
        Copy(local4 local29 )                     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Factorial To the Fourth.vi
define(videf24 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local15)   // (N!)^4
        i(dv(.Int32 0) local1)   // N
    )
    c(
        e(.Int32 local2)   // N
        e(.Int32 local3)   // N
        e(.Int32 local4)   // N
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A x Scalar
        e(.Boolean local7)
        e(.Boolean local8)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // N!
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // Answer
        e(.Int32 local11)
        e(.Int32 local12)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // A x Scalar
        e(.Int32 local14)
    )

    clump(1
        Copy(local1 local2 )
//--- begin while loop
        Perch(0)
        Copy(local4 local3 )     // LSR copy into inner wire
        Copy(local6 local5 )                      // LSR copy into inner wire
        IsNE(local3 c19 local7)
        IsGE(local2 local3 local8)
        And(local8 local7 local7)
//--- begin case structure
        BranchIfTrue(1 local7)                    // CaseStructure test
//--- default case
        videf25(local9 local2)
        videf13(local10 local9 local9)
        videf13(local9 local10 local10)
        Copy(local9 local5 )                      // case output tunnel
        Branch(4)
//--- case
        Perch(1)
        Add(local3 c20 local11)
        Sub(local2 local3 local3)
        Sub(local3 c20 local3)
        Copy(local5 local13 )                     // Pre-Loop copy into LSR
        Copy(c31 local12 )                        // initialize i
//--- begin while loop
        Perch(2)
        Copy(local13 local5 )    // LSR copy into inner wire
        IsGT(local3 local12 local7)
        Add(local11 local12 local14)
        Mul(local14 local14 local14)
        videf26(local5 local14 * local10)
        videf26(local10 local14 * local5)
        Copy(local5 local13 )
        BranchIfFalse(3 local7)                   // Loop condition terminal
        Add(local12 c32 local12)                  // increment i
        Branch(2)                                 // loop again
//--- end while loop
        Perch(3)
        Copy(local13 local5 )    // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local2 local4 )
        Copy(local5 local6 )
        BranchIfFalse(5 c18)                      // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(5)
        Copy(local5 local15 )    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Factorial.vi
define(videf25 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local19)   // N!
        i(dv(.Int32 0) local1)   // N
    )
    c(
        e(.Boolean local2)
        e(.Int32 local3)   // N
        e(.Int32 local4)   // N
        e(.Int32 local5)   // N
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A x Scalar
        e(.Boolean local8)
        e(.Boolean local9)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // N!
        e(.Int32 local11)
        e(.Int32 local12)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // N!
        e(.Int32 local14)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // N!
        e(.Int32 local16)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A x Scalar
    )

    clump(1
        IsGT(local1 c14 local2)
        Copy(local1 local3 )
//--- begin while loop
        Perch(0)
        Copy(local5 local4 )     // LSR copy into inner wire
        Copy(local7 local6 )                      // LSR copy into inner wire
        IsNE(local4 c19 local8)
        IsGE(local3 local4 local9)
        And(local9 local8 local8)
//--- begin case structure
        BranchIfTrue(5 local8)                    // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfTrue(1 local2)                    // CaseStructure test
//--- default case
        ArrayIndexElt(c24 local3 local10)
        Branch(4)
//--- case
        Perch(1)
        Add(c14 c20 local11)
        Sub(local3 c14 local12)
        Sub(local12 c20 local12)
        ArrayIndexElt(c24 c14 local13)
        Copy(local13 local15 )                    // Pre-Loop copy into LSR
        Copy(c31 local14 )                        // initialize i
//--- begin while loop
        Perch(2)
        Copy(local15 local13 )   // LSR copy into inner wire
        Add(local11 local14 local16)
        videf26(local13 local16 * local17)
        IsGT(local12 local14 local8)
        Copy(local17 local15 )
        BranchIfFalse(3 local8)                   // Loop condition terminal
        Add(local14 c32 local14)                  // increment i
        Branch(2)                                 // loop again
//--- end while loop
        Perch(3)
        Copy(local15 local10 )   // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local10 local6 )    // case output tunnel
        Branch(8)
//--- case
        Perch(5)
        Add(local4 c20 local11)
        Sub(local3 local4 local4)
        Sub(local4 c20 local4)
        Copy(local6 local18 )                     // Pre-Loop copy into LSR
        Copy(c31 local12 )                        // initialize i
//--- begin while loop
        Perch(6)
        Copy(local18 local6 )    // LSR copy into inner wire
        IsGT(local4 local12 local8)
        Add(local11 local12 local14)
        videf26(local6 local14 * local13)
        Copy(local13 local18 )
        BranchIfFalse(7 local8)                   // Loop condition terminal
        Add(local12 c32 local12)                  // increment i
        Branch(6)                                 // loop again
//--- end while loop
        Perch(7)
        Copy(local18 local6 )    // case output tunnel
//--- end case structure
        Perch(8)
        Copy(local3 local5 )
        Copy(local6 local7 )
        BranchIfFalse(9 c18)                      // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(9)
        Copy(local6 local19 )    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Filter String.vi
define(videf16 dv(.VirtualInstrument (
    c(
        o(dv(.String '') local11)   // String Out
        i(dv(.Int32 0) local1)   // Index
        i(dv(.String '') local3)   // String In
    )
    c(
        e(.Int32 local2)
        e(a(.UInt8 *) local4)   // unsigned byte array
        e(.Int32 local5)
        e(.Int32 local6)
        e(a(.UInt8 *) local7)   // unsigned byte array
        e(.Boolean local8)
        e(.Int32 local9)
        e(.String local10)   // string
    )

    clump(1
        Mul(local1 c3 local2)
        Add(local2 c3 local2)
        Copy(local3 local4 )
        ArrayLength(local3 local5 )
        Sub(local5 local2 local5)
        Sub(local5 c32 local5)
        Copy(local4 local7 )                      // Pre-Loop copy into LSR
        Copy(c31 local6 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local7 local4 )     // LSR copy into inner wire
        IsGT(local5 local6 local8)
        Add(local2 local6 local9)
        ArrayReplaceElt(local4 local4 local9 c39)
        Copy(local4 local7 )
        BranchIfFalse(1 local8)                   // Loop condition terminal
        Add(local6 c32 local6)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Copy(local7 local10 )
        Copy(local10 local11 )                    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: GreaterNoOutput.vi
define(videf9 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local5)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(.Boolean false) local24)   // A Greater
        o(dv(.Boolean false) local23)   // Equal
    )
    c(
        e(a(.Int8 *) local2)   // Array Num
        e(.Int32 local3)   // Decimal Index
        e(.Int32 local4)
        e(a(.Int8 *) local6)   // Array Num
        e(.Int32 local7)   // Decimal Index
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Int32 local10)
        e(.Boolean local11)
        e(.Int32 local12)   // digit
        e(.Boolean local13)
        e(.Int32 local14)
        e(.Int32 local15)
        e(.Int32 local16)
        e(.Boolean local17)
        e(.Int32 local18)   // digit
        e(.Boolean local19)
        e(.Int32 local20)
        e(.Int32 local21)
        e(.Int32 local22)   // digit
    )

    clump(1
        Copy(local1.n0 local2 )                   // unbundle
        Copy(local1.n1 local3 )                   // unbundle
        ArrayLength(local2 local4 )
        Sub(local4 c20 local4)
        Copy(local5.n0 local6 )                   // unbundle
        Copy(local5.n1 local7 )                   // unbundle
        ArrayLength(local6 local8 )
        Sub(local8 c20 local8)
        Trigger(1)                                // fork
        Copy(local4 local9 )                      // Pre-Loop copy into LSR
//--- begin while loop
        Perch(0)
        Copy(local9 local4 )     // LSR copy into inner wire
        Sub(local4 c20 local10)
        IsGE(local4 local3 local11)
        videf5(local12 local4 local2)
        IsEQ(local12 c19 local13)
        And(local13 local11 local11)
        Copy(local10 local9 )
        BranchIfFalse(1 local11)                  // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Add(local4 c20 local4)
        Sub(local4 local3 local4)
        IsGT(local4 c19 local11)
        BranchIfTrue(2 local11)
        Copy(c19 local4 )
        Perch(2)
        Wait(1)                  // join
        IsGT(local14 local4 local11)
//--- begin case structure
        BranchIfTrue(8 local11)                   // CaseStructure test
//--- default case
        IsLT(local14 local4 local11)
//--- begin case structure
        BranchIfTrue(6 local11)                   // CaseStructure test
//--- default case
        Add(local4 local3 local3)
        Add(local4 local7 local4)
        IsGT(local3 local4 local11)
        Copy(local4 local7 )
        BranchIfFalse(3 local11)
        Copy(local3 local7 )
        Perch(3)
        Copy(local4 local20 )    // Pre-Loop copy into LSR
        Copy(local3 local21 )                     // Pre-Loop copy into LSR
        Copy(c31 local8 )                         // initialize i
//--- begin while loop
        Perch(4)
        Copy(local20 local4 )    // LSR copy into inner wire
        Copy(local21 local3 )                     // LSR copy into inner wire
        Sub(local3 c20 local10)
        Sub(local4 c20 local12)
        videf5(local22 local4 local6)
        videf5(local4 local3 local2)
        IsEQ(local22 local4 local11)
        IsLT(local8 local7 local13)
        And(local11 local13 local13)
        Copy(local12 local20 )
        Copy(local10 local21 )
        BranchIfFalse(5 local13)                  // Loop condition terminal
        Add(local8 c32 local8)                    // increment i
        Branch(4)                                 // loop again
//--- end while loop
        Perch(5)
        IsGT(local22 local4 local13)
        Branch(7)
//--- case
        Perch(6)
        Copy(c18 local13 )       // case output tunnel
        Copy(c18 local11 )                        // case output tunnel
//--- end case structure
        Perch(7)
        Branch(9)
//--- case
        Perch(8)
        Copy(c16 local13 )       // case output tunnel
        Copy(c18 local11 )                        // case output tunnel
//--- end case structure
        Perch(9)
        Copy(local11 local23 )   // FP Term
        Copy(local13 local24 )                    // FP Term
//--- end of vi
    )
    clump(1
        Copy(local8 local15 )                     // Pre-Loop copy into LSR
//--- begin while loop
        Perch(0)
        Copy(local15 local14 )   // LSR copy into inner wire
        Sub(local14 c20 local16)
        IsGE(local14 local7 local17)
        videf5(local18 local14 local6)
        IsEQ(local18 c19 local19)
        And(local19 local17 local17)
        Copy(local16 local15 )
        BranchIfFalse(1 local17)                  // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Add(local14 c20 local14)
        Sub(local14 local7 local14)
        IsGT(local14 c19 local17)
        BranchIfTrue(2 local17)
        Copy(c19 local14 )
        Perch(2)
    )
)))
//---------------------------------------------------
//VI Definition: GreaterThan.vi
define(videf2 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local10)   // Larger
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local11)   // Smaller
        o(dv(.Boolean false) local9)   // A Greater
        o(dv(.Boolean false) local5)   // Equal
    )
    c(
        e(.Boolean local3)   // A Greater
        e(.Boolean local4)   // Equal
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // B
    )

    clump(1
        videf9(local2 local1 local3 local4)
        Copy(local4 local5 )                      // FP Term
//--- begin case structure
        Copy(local2 local6 )                      // case input tunnel
        Copy(local1 local7 )                      // case input tunnel
        BranchIfTrue(0 local3)                    // CaseStructure test
//--- default case
        Copy(local6 local8 )                      // case output tunnel
        Copy(local7 local6 )                      // case output tunnel
        Branch(1)
//--- case
        Perch(0)
        Copy(local7 local8 )     // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local3 local9 )     // FP Term
        Copy(local6 local10 )                     // FP Term
        Copy(local8 local11 )                     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Index ArrayClust.vi
define(videf22 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local8)   // A
        i(dv(.Int32 0) local3)   // Index
        i(dv(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) () ) local1)   // Array
    )
    c(
        e(.Int32 local2)
        e(.Boolean local4)
        e(.Boolean local5)
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local6)   // Array
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A
    )

    clump(1
        ArrayLength(local1 local2 )
        IsGE(local3 local2 local4)
        IsLT(local3 c19 local5)
        Or(local5 local4 local4)
//--- begin case structure
        Copy(local1 local6 )                      // case input tunnel
        Copy(local3 local2 )                      // case input tunnel
        BranchIfTrue(0 local4)                    // CaseStructure test
//--- default case
        ArrayIndexElt(local6 local2 local7)
        Branch(1)
//--- case
        Perch(0)
        Copy(c30 local7 )        // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local7 local8 )     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Index ArrayInt.vi
define(videf5 dv(.VirtualInstrument (
    c(
        o(dv(.Int32 0) local8)   // digit
        i(dv(.Int32 0) local3)   // Index
        i(dv(a(.Int8 *) () ) local1)   // Array
    )
    c(
        e(.Int32 local2)
        e(.Boolean local4)
        e(.Boolean local5)
        e(a(.Int8 *) local6)   // Array
        e(.Int8 local7)   // digit
    )

    clump(1
        ArrayLength(local1 local2 )
        IsGE(local3 local2 local4)
        IsLT(local3 c10 local5)
        Or(local5 local4 local4)
//--- begin case structure
        Copy(local1 local6 )                      // case input tunnel
        Copy(local3 local2 )                      // case input tunnel
        BranchIfTrue(0 local4)                    // CaseStructure test
//--- default case
        ArrayIndexElt(local6 local2 local7)
        Convert(local7 local2)
        Branch(1)
//--- case
        Perch(0)
        Copy(c10 local2 )        // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local2 local8 )     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: MakeDivArray.vi
define(videf21 dv(.VirtualInstrument (
    c(
        o(dv(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) () ) local9)   // Arrays of A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(.Int32 local2)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local3)   // A
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local4)
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local5)
        e(.Boolean local6)
        e(.Int32 local7)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A x Scalar
    )

    clump(1
        Copy(c33 local5 )                         // Pre-Loop copy into LSR
        Copy(local1 local3 )
        Copy(c31 local2 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local5 local4 )     // LSR copy into inner wire
        IsGT(c34 local2 local6)
        Add(local2 c35 local7)
        videf26(local3 local7 * local8)
        ArrayConcatenate( local4 local4 local8)
        Copy(local4 local5 )
        BranchIfFalse(1 local6)                   // Loop condition terminal
        Add(local2 c32 local2)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        ArrayConcatenate( local4 c30 local1 local5)
        Copy(local4 local9 )                      // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Mult Scalar.vi
define(videf26 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )  0 false )) local3)   // A
        i(dv(.Int32 0) local1)   // Scalar
        i(dv(.Int32 0) local6)   // Shift by
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )  0 false )) local20)   // A x Scalar
    )
    c(
        e(.Boolean local2)
        e(.Int32 local4)   // Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A
        e(.Int32 local7)
        e(a(.Int8 *) local8)   // Array Num
        e(.Int32 local9)   // Decimal Index
        e(.Int32 local10)
        e(.Int32 local11)
        e(.Int32 local12)
        e(a(.Int8 *) local13)   // Array Num
        e(.Int32 local14)
        e(.Int32 local15)   // digit
        e(.Int8 local16)   // digit
        e(a(.Int8 *) local17)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // Shifted A
    )

    clump(1
        IsEQ(local1 c19 local2)
//--- begin case structure
        Copy(local1 local4 )                      // case input tunnel
        Copy(local3 local5 )                      // case input tunnel
        BranchIfTrue(6 local2)                    // CaseStructure test
//--- default case
        IsGT(local4 c20 local2)
//--- begin case structure
        BranchIfTrue(0 local2)                    // CaseStructure test
//--- default case
        Copy(local5 local18 )                     // case output tunnel
        Branch(5)
//--- case
        Perch(0)
        Convert(c21 local7)
        Copy(local5.n0 local8 )                   // unbundle
        Copy(local5.n1 local9 )                   // unbundle
        ArrayLength(local8 local10 )
        Sub(local10 c20 local10)
        Copy(local7 local12 )                     // Pre-Loop copy into LSR
        Copy(local8 local13 )                     // Pre-Loop copy into LSR
        Copy(c31 local11 )                        // initialize i
//--- begin while loop
        Perch(1)
        Copy(local12 local7 )    // LSR copy into inner wire
        Copy(local13 local8 )                     // LSR copy into inner wire
        Convert(c22 local14)
        videf5(local15 local11 local8)
        Mul(local15 local4 local15)
        Add(local15 local7 local7)
        Quotient(local7 local14 local15)
        Remainder(local7 local14 local7)
        Convert(local7 local16)
        ArrayReplaceElt(local8 local8 local11 local16)
        IsGT(local10 local11 local2)
        Copy(local15 local12 )
        Copy(local8 local13 )
        BranchIfFalse(2 local2)                   // Loop condition terminal
        Add(local11 c32 local11)                  // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(2)
        IsEQ(local12 c19 local2)
//--- begin case structure
        BranchIfTrue(3 local2)                    // CaseStructure test
//--- default case
        videf27(local12 local8 *)
        ArrayConcatenate( local17 local13 local8)
        Copy(local17 local8 )                     // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(local13 local8 )    // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local5 local18 )
        Copy(local8 local18.n0 )                  // bundle
        Copy(local9 local18.n1 )                  // bundle
//--- end case structure
        Perch(5)
        videf23(local19 local6 local18)
        Copy(local19 local5 )                     // case output tunnel
        Branch(7)
//--- case
        Perch(6)
        Copy(c23 local5.n0 )     // bundle
        Copy(c19 local5.n1 )                      // bundle
        Copy(c18 local5.n2 )                      // bundle
//--- end case structure
        Perch(7)
        Copy(local5 local20 )    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Multiply.vi
define(videf13 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local46)   // Answer
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 5 4 5 1 5 2 8 8 3 3 7 8 2 3 2 6 1 6 8 0 0 6 8 7 8 3 9 6 7 6 7 2 5 2 1 3 4 0 3 4 4 2 8 4 2 5 4 9 6 3 4 3 1 3 2 4 0 1 6 0 3 7 8 5 3 2 4 4 0 2 9 5 0 0 5 5 7 7 1 8 2 1 8 4 7 9 0 6 0 6 3 7 9 1 0 5 3 5 5 3 4 0 7 3 9 3 7 4 7 6 9 2 5 7 9 6 0 2 1 9 2 8 3 0 1 2 7 7 5 0 2 7 0 7 5 3 9 8 3 0 2 2 2 7 9 4 9 8 4 2 4 7 8 9 1 0 3 8 9 9 8 9 2 5 2 7 7 0 0 1 9 0 5 0 8 0 5 4 5 7 3 2 9 2 3 9 4 3 9 9 8 2 9 7 7 4 0 0 1 2 7 7 7 6 3 9 0 6 3 4 8 3 2 2 2 8 3 4 0 9 4 7 9 5 4 6 7 2 2 8 4 8 5 4 4 6 0 8 0 6 8 5 4 0 3 1 1 3 4 6 1 5 1 5 6 0 9 1 7 3 8 5 9 6 0 9 1 1 7 2 7 9 6 9 2 2 1 8 3 5 0 6 8 6 7 2 5 6 3 3 5 1 1 8 2 4 3 1 2 6 3 0 8 9 6 9 0 5 9 9 4 6 3 6 0 2 7 8 8 5 9 2 8 7 3 )  0 false )) local4)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((6 1 2 9 6 5 2 6 7 9 9 2 7 8 5 9 0 2 8 5 9 4 4 3 7 3 5 6 8 1 1 4 3 0 2 6 3 3 3 7 6 8 3 7 6 0 4 7 5 9 4 4 7 5 0 5 6 7 0 8 4 6 4 4 7 8 2 4 2 4 3 0 4 1 8 2 2 7 2 1 3 6 9 9 8 9 4 1 3 2 9 4 5 4 1 8 2 4 0 4 2 9 9 1 6 8 8 2 3 3 7 2 6 8 6 4 3 8 8 7 6 6 7 6 9 6 5 0 6 3 2 8 6 3 1 3 4 8 2 0 8 4 8 8 4 4 7 1 4 0 3 5 2 9 0 2 6 2 2 8 8 0 0 6 0 0 2 3 4 3 4 9 1 9 3 8 7 3 5 1 5 4 0 7 2 1 4 0 6 8 8 8 0 3 8 0 9 8 8 4 7 6 7 5 6 5 9 2 6 9 2 4 4 8 4 4 2 3 6 4 9 9 8 0 7 5 3 9 2 2 3 0 9 3 3 4 3 9 9 4 1 0 3 0 2 9 5 5 0 0 8 0 4 7 0 9 0 6 4 9 9 1 2 4 6 9 4 0 1 2 4 3 0 8 1 9 8 9 7 8 8 8 5 3 5 3 7 2 3 6 8 4 6 9 0 1 3 5 6 6 8 1 7 1 7 4 0 0 9 5 9 9 3 2 1 5 9 6 1 9 2 4 9 2 0 3 0 4 8 5 6 8 8 9 0 4 2 5 3 9 3 3 2 9 2 1 4 0 4 4 5 3 6 4 1 0 2 0 7 5 0 0 9 7 4 0 3 3 9 0 5 2 1 0 8 6 3 9 0 0 9 3 0 3 9 2 3 4 5 6 7 1 2 2 1 8 5 9 8 7 7 1 5 9 0 6 9 8 7 3 4 8 9 9 7 9 1 1 0 7 8 1 8 5 9 9 6 7 6 5 8 3 1 5 6 7 1 4 5 7 8 8 4 8 7 9 3 7 7 4 8 9 6 4 3 7 2 8 3 5 7 2 6 5 6 6 4 4 6 6 9 7 5 4 1 8 3 1 9 3 6 8 9 4 1 8 3 2 9 1 3 3 5 9 7 2 0 7 3 3 1 9 3 5 7 1 4 4 0 9 8 1 3 9 7 9 2 0 5 9 8 2 4 6 9 1 7 3 6 0 7 6 9 8 7 1 6 4 7 1 2 9 8 1 4 4 8 3 4 7 3 7 4 6 5 2 3 0 7 8 9 1 8 0 5 9 4 7 5 0 0 9 2 2 3 8 6 9 1 3 8 9 4 7 7 8 1 0 8 4 4 1 4 9 1 5 6 6 6 9 5 4 0 2 5 4 5 1 5 5 8 5 3 7 2 7 9 1 0 0 7 5 9 9 7 1 6 9 6 5 2 1 2 9 1 6 4 7 2 5 4 4 3 6 2 0 6 7 1 7 2 6 1 3 9 0 3 6 6 7 6 8 7 2 2 3 1 7 6 8 5 5 7 7 5 4 2 2 9 5 4 8 4 7 6 6 3 0 0 5 2 7 3 4 4 8 4 8 6 1 6 8 8 1 4 7 3 )  0 false )) local1)   // A
    )
    c(
        e(a(.Int8 *) local2)   // Array Num
        e(.Boolean local3)   // stop
        e(a(.Int8 *) local5)   // Array Num
        e(.Boolean local6)   // stop
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local7)   // Starting Condition
        e(.Int32 local8)   // Working Digits
        e(.Int32 local9)   // Trailing Zeroes
        e(.Int32 local10)   // New Decimal Index
        e(.Int32 local11)
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local12)   // Starting Condition
        e(.Int32 local13)   // Working Digits
        e(.Int32 local14)   // Trailing Zeroes
        e(.Int32 local15)   // New Decimal Index
        e(.Int32 local16)
        e(.Int32 local17)
        e(a(.Int8 *) local18)
        e(a(.Int8 *) local19)
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local20)   // Starting Condition
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local21)   // Starting Condition
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local22)   // Starting Condition
        e(.Int32 local23)   // digit 2
        e(.Int32 local24)   // digit 2
        e(.Int32 local25)
        e(.Int32 local26)
        e(.Int32 local27)   // digit
        e(.Int32 local28)
        e(.Int32 local29)
        e(.Int32 local30)
        e(.Int32 local31)   // digit
        e(.Int32 local32)
        e(.Int32 local33)
        e(.Int32 local34)
        e(.Int32 local35)
        e(.Boolean local36)
        e(.Int32 local37)
        e(.Int32 local38)   // digit 2
        e(.Int32 local39)
        e(.Int32 local40)
        e(.Int8 local41)   // digit
        e(.Int32 local42)   // digit 2
        e(a(.Int8 *) local43)
        e(.Int32 local44)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local45)   // A
    )

    clump(1
        Copy(local1.n0 local2 )                   // unbundle
        Copy(local1.n2 local3 )                   // unbundle
        Copy(local4.n0 local5 )                   // unbundle
        Copy(local4.n2 local6 )                   // unbundle
        Xor(local3 local6 local3)
        Trigger(1)                                // fork
        videf28(local1 local7 local8 local9 local10)
        Sub(local8 c20 local11)
        Wait(1)                                   // join
        Add(local8 local13 local16)
        Sub(local16 c20 local17)
        Sub(local17 c20 local17)
        Add(local9 local14 local9)
        Add(local9 local16 local16)
        ArrayFill(local18 local16 c21)
        Copy(local18 local19 )                    // Pre-Loop copy into LSR
        Copy(local7 local20 )                     // Pre-Loop copy into LSR
        Copy(local12 local22 )                    // Pre-Loop copy into LSR
        Copy(c19 local24 )                        // Pre-Loop copy into LSR
        Copy(local9 local25 )                     // Pre-Loop copy into LSR
        Copy(c31 local16 )                        // initialize i
//--- begin while loop
        Perch(0)
        Copy(local19 local18 )   // LSR copy into inner wire
        Copy(local20 local7 )                     // LSR copy into inner wire
        Copy(local22 local21 )                    // LSR copy into inner wire
        Copy(local24 local23 )                    // LSR copy into inner wire
        Copy(local25 local9 )                     // LSR copy into inner wire
        Add(local9 c20 local26)
        Copy(local21.n0 local27 )                 // unbundle
        Copy(local21.n1 local28 )                 // unbundle
        Copy(local21.n2 local29 )                 // unbundle
        Add(local27 local29 local27)
        Copy(local21.n1 local30 )                 // unbundle
        Copy(local7.n0 local31 )                  // unbundle
        Copy(local7.n1 local32 )                  // unbundle
        Copy(local7.n2 local33 )                  // unbundle
        IsEQ(local33 local11 local6)
//--- begin case structure
        BranchIfTrue(1 local6)                    // CaseStructure test
//--- default case
        Branch(2)
//--- case
        Perch(1)
        Add(local29 c20 local34)
        Add(local28 c20 local35)
        Copy(local35 local28 )                    // case output tunnel
        Copy(local34 local29 )                    // case output tunnel
//--- end case structure
//--- begin case structure
        Perch(2)
        BranchIfTrue(3 local6)   // CaseStructure test
//--- default case
        Add(local33 c20 local34)
        Add(local32 c20 local35)
        Copy(local35 local32 )                    // case output tunnel
        Copy(local34 local33 )                    // case output tunnel
        Branch(3)
//--- case
//--- end case structure
        Perch(3)
        Copy(local7.n0 local34 ) // unbundle
        Copy(local7.n1 local35 )                  // unbundle
        IsEQ(local13 local27 local36)
        And(local36 local6 local6)
//--- begin case structure
        BranchIfTrue(6 local6)                    // CaseStructure test
//--- default case
        IsLT(local8 local13 local6)
        Copy(local13 local27 )
        BranchIfFalse(4 local6)
        Copy(local8 local27 )
        Perch(4)
        Add(local31 c20 local37)
        IsLT(local37 local27 local6)
        BranchIfFalse(5 local6)
        Copy(local37 local27 )
        Perch(5)
        Branch(7)
//--- case
        Perch(6)
        Sub(local31 c20 local31)
        Copy(local31 local27 )                    // case output tunnel
//--- end case structure
        Perch(7)
        Copy(local27 local7.n0 ) // bundle
        Copy(local32 local7.n1 )                  // bundle
        Copy(local33 local7.n2 )                  // bundle
        Copy(local27 local21.n0 )                 // bundle
        Copy(local28 local21.n1 )                 // bundle
        Copy(local29 local21.n2 )                 // bundle
        Copy(local23 local38 )                    // Pre-Loop copy into LSR
        Copy(local35 local39 )                    // Pre-Loop copy into LSR
        Copy(local30 local40 )                    // Pre-Loop copy into LSR
        Copy(c31 local27 )                        // initialize i
//--- begin while loop
        Perch(8)
        Copy(local38 local23 )   // LSR copy into inner wire
        Copy(local39 local28 )                    // LSR copy into inner wire
        Copy(local40 local29 )                    // LSR copy into inner wire
        Add(local29 c20 local30)
        Sub(local28 c20 local31)
        videf5(local32 local29 local5)
        videf5(local29 local28 local2)
        Mul(local29 local32 local28)
        Add(local23 local28 local23)
        IsLT(local27 local34 local6)
        Copy(local23 local38 )
        Copy(local31 local39 )
        Copy(local30 local40 )
        BranchIfFalse(9 local6)                   // Loop condition terminal
        Add(local27 c32 local27)                  // increment i
        Branch(8)                                 // loop again
//--- end while loop
        Perch(9)
        Quotient(local38 c14 local23)
        Remainder(local38 c14 local27)
        Convert(local27 local41)
        ArrayReplaceElt(local18 local18 local9 local41)
        IsGT(local17 local16 local6)
        Copy(local18 local19 )
        Copy(local7 local20 )
        Copy(local21 local22 )
        Copy(local23 local24 )
        Copy(local26 local25 )
        BranchIfFalse(10 local6)                  // Loop condition terminal
        Add(local16 c32 local16)                  // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(10)
        IsEQ(local24 c19 local6)
//--- begin case structure
        BranchIfTrue(13 local6)                   // CaseStructure test
//--- default case
        Copy(local24 local42 )                    // Pre-Loop copy into LSR
        Copy(local19 local43 )                    // Pre-Loop copy into LSR
        Copy(local25 local44 )                    // Pre-Loop copy into LSR
//--- begin while loop
        Perch(11)
        Copy(local42 local8 )   // LSR copy into inner wire
        Copy(local43 local2 )                     // LSR copy into inner wire
        Copy(local44 local9 )                     // LSR copy into inner wire
        Add(local9 c20 local11)
        Quotient(local8 c14 local16)
        Remainder(local8 c14 local8)
        Convert(local8 local41)
        ArrayReplaceElt(local2 local2 local9 local41)
        IsGT(local16 c19 local6)
        Copy(local16 local42 )
        Copy(local2 local43 )
        Copy(local11 local44 )
        BranchIfFalse(12 local6)                  // Loop condition terminal
        Branch(11)                                // loop again
//--- end while loop
        Perch(12)
        Copy(local43 local2 )   // case output tunnel
        Branch(14)
//--- case
        Perch(13)
        Copy(local19 local2 )   // case output tunnel
//--- end case structure
        Perch(14)
        Add(local10 local15 local8)
        Copy(local1 local45 )
        Copy(local2 local45.n0 )                  // bundle
        Copy(local8 local45.n1 )                  // bundle
        Copy(local3 local45.n2 )                  // bundle
        Copy(local45 local46 )                    // FP Term
//--- end of vi
    )
    clump(1
        videf28(local4 local12 local13 local14 local15)
    )
)))
//---------------------------------------------------
//VI Definition: Nearest Even.vi
define(videf29 dv(.VirtualInstrument (
    c(
        o(dv(.Int8 0) local5)   // Rounded to even
        i(dv(.Int8 0) local1)   // digit
    )
    c(
        e(.Int8 local2)
        e(.Int8 local3)
        e(.Boolean local4)
    )

    clump(1
        Add(local1 c29 local2)
        Remainder(local1 c48 local3)
        IsNE(local3 c21 local4)
        BranchIfTrue(0 local4)
        Copy(local1 local2 )
        Perch(0)
        Copy(local2 local5 )     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Normalize.vi
define(videf19 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local15)   // Normalized A
        i(dv(.Int32 0) local1)   // Shift to
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(a(.Int8 *) local3)   // Array Num
        e(.Int32 local4)   // Decimal Index
        e(.Boolean local5)
        e(.Int32 local6)
        e(.Int32 local7)
        e(.Int32 local8)
        e(.Int32 local9)   // digit
        e(.Boolean local10)
        e(.Boolean local11)
        e(a(.Int8 *) local12)
        e(a(.Int8 *) local13)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // A
    )

    clump(1
        Copy(local2.n0 local3 )                   // unbundle
        Copy(local2.n1 local4 )                   // unbundle
        IsLT(local4 c10 local5)
        ArrayLength(local3 local6 )
        Sub(local6 c12 local6)
        Copy(c31 local7 )                         // initialize i
//--- begin while loop
        Perch(0)
        Sub(local6 local7 local8)
        videf5(local9 local8 local3)
        IsEQ(local9 c10 local10)
        IsGT(local8 c10 local11)
        And(local10 local11 local10)
        BranchIfFalse(1 local10)                  // Loop condition terminal
        Add(local7 c32 local7)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Add(local8 c12 local6)
        ArraySubset(local3 local3 c10 local6)
//--- begin case structure
        BranchIfTrue(2 local5)                    // CaseStructure test
//--- default case
        Convert(local3 local12)
        Copy(local12 local3 )                     // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Convert(c15 local6)
        Sub(c10 local4 local7)
        ArrayFill(local13 local7 c15)
        ArrayConcatenate( local13 local13 local3)
        Convert(local13 local3)
        Copy(local6 local4 )                      // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local2 local14 )
        Copy(local3 local14.n0 )                  // bundle
        Copy(local4 local14.n1 )                  // bundle
        Copy(local14 local15 )                    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Number To Digits.vi
define(videf27 dv(.VirtualInstrument (
    c(
        i(dv(.Int32 0) local1)   // Value
        o(dv(a(.Int8 *) () ) local10)   // Digits
        o(dv(.Int32 0) local9)   // Num Digits
    )
    c(
        e(.Int32 local2)   // Value
        e(.Int32 local3)   // Value
        e(a(.Int8 *) local4)
        e(a(.Int8 *) local5)
        e(.Int32 local6)
        e(.Int8 local7)
        e(.Boolean local8)
    )

    clump(1
        Copy(local1 local3 )                      // Pre-Loop copy into LSR
        Copy(c13 local5 )                         // Pre-Loop copy into LSR
//--- begin while loop
        Perch(0)
        Copy(local3 local2 )     // LSR copy into inner wire
        Copy(local5 local4 )                      // LSR copy into inner wire
        Quotient(local2 c14 local6)
        Remainder(local2 c14 local2)
        Convert(local2 local7)
        ArrayConcatenate( local4 local4 local7)
        IsGT(local6 c19 local8)
        Copy(local6 local3 )
        Copy(local4 local5 )
        BranchIfFalse(1 local8)                   // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        ArrayLength(local5 local2 )
        Copy(local2 local9 )                      // FP Term
        Copy(local5 local10 )                     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Number To String.vi
define(videf15 dv(.VirtualInstrument (
    c(
        o(dv(.String '') local23)   // String
        i(dv(.Int32 0) local2)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // Number
    )
    c(
        e(.UInt8 local1)
        e(a(.Int8 *) local4)   // Array Num
        e(.Int32 local5)   // Decimal Index
        e(.Boolean local6)   // stop
        e(.Int32 local7)
        e(a(.Int8 *) local8)   // Array Dup
        e(.Int32 local9)   // NonZero Count
        e(.Int32 local10)
        e(.Int32 local11)
        e(.Boolean local12)
        e(.Boolean local13)
        e(.Int32 local14)   // Digits
        e(.Int32 local15)
        e(.Int32 local16)   // NonZero Count
        e(.Int32 local17)
        e(a(.UInt8 *) local18)
        e(a(.UInt8 *) local19)
        e(.Int8 local20)   // digit
        e(a(.UInt8 *) local21)
        e(.String local22)   // string
    )

    clump(1
        Convert(c40 local1)
        Copy(local3.n0 local4 )                   // unbundle
        Copy(local3.n1 local5 )                   // unbundle
        Copy(local3.n2 local6 )                   // unbundle
        Copy(c31 local7 )
        BranchIfFalse(0 local6)
        Copy(c32 local7 )
        Perch(0)
        videf11(local4 local8 local9)
        Add(local7 local9 local10)
        Sub(local9 local5 local11)
        IsGT(local11 c31 local12)
        IsEQ(local11 c31 local13)
//--- begin case structure
        Copy(local2 local14 )                     // case input tunnel
        BranchIfTrue(5 local13)                   // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfFalse(3 local12)                  // CaseStructure test
//--- default case
        IsLT(local5 c31 local12)
//--- begin case structure
        BranchIfTrue(1 local12)                   // CaseStructure test
//--- default case
        Copy(c31 local15 )                        // case output tunnel
        Copy(local11 local16 )                    // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Sub(c31 local5 local15)
        Copy(local9 local16 )                     // case output tunnel
//--- end case structure
        Perch(2)
        Add(local16 local14 local16)
        Add(local16 local15 local15)
        Copy(c31 local11 )                        // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Sub(c31 local11 local11)
        Add(local11 c32 local16)
        Add(local11 local9 local11)
        Add(local14 c32 local17)
        Copy(local17 local15 )                    // case output tunnel
        Copy(local11 local5 )                     // case output tunnel
        Copy(local16 local11 )                    // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local15 local14 )   // case output tunnel
        Branch(6)
//--- case
        Perch(5)
        Add(local14 c32 local14)
        Copy(local9 local5 )                      // case output tunnel
        Copy(c32 local11 )                        // case output tunnel
//--- end case structure
        Perch(6)
        Add(local10 local11 local10)
        Sub(local10 c32 local11)
        Sub(local10 local5 local5)
        Add(local7 local14 local7)
        ArrayFill(local18 local7 c41)
        ArraySubset(local8 local8 * local9)
        Convert(local8 local4)
        ArrayLength(local4 local7 )
        Sub(local7 c32 local7)
        Copy(local18 local19 )                    // Pre-Loop copy into LSR
        Copy(c31 local9 )                         // initialize i
//--- begin while loop
        Perch(7)
        Copy(local19 local18 )   // LSR copy into inner wire
        Convert(local8 local4)
        ArrayIndexElt(local4 local9 local20)
        Add(local20 c42 local20)
        IsGT(local7 local9 local12)
        Sub(local11 local9 local10)
        ArrayReplaceElt(local18 local18 local10 local20)
        Copy(local18 local19 )
        BranchIfFalse(8 local12)                  // Loop condition terminal
        Add(local9 c32 local9)                    // increment i
        Branch(7)                                 // loop again
//--- end while loop
        Perch(8)
        ArraySubset(local18 local19 local5 *)
        ArraySubset(local21 local19 * local5)
        ArrayConcatenate( local21 local21 local1 local18)
//--- begin case structure
        BranchIfTrue(9 local6)                    // CaseStructure test
//--- default case
        Copy(local21 local18 )                    // case output tunnel
        Branch(10)
//--- case
        Perch(9)
        Convert(c43 local5)
        ArrayReplaceElt(local18 local21 local5 c44)
//--- end case structure
        Perch(10)
        Copy(local18 local22 )
        Copy(local22 local23 )                    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: PrepForMultiply.vi
define(videf28 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local1)   // A
        o(dv(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) (0 0 0 )) local11)   // Starting Condition
        o(dv(.Int32 0) local12)   // Working Digits
        o(dv(.Int32 0) local13)   // Trailing Zeroes
        o(dv(.Int32 0) local9)   // New Decimal Index
    )
    c(
        e(a(.Int8 *) local2)   // Array Num
        e(.Int32 local3)   // Decimal Index
        e(.Int32 local4)
        e(.Int32 local5)
        e(.Int32 local6)   // digit
        e(.Boolean local7)
        e(.Boolean local8)
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)   // digit
        ) local10)
    )

    clump(1
        Copy(local1.n0 local2 )                   // unbundle
        Copy(local1.n1 local3 )                   // unbundle
        ArrayLength(local2 local4 )
        Copy(c31 local5 )                         // initialize i
//--- begin while loop
        Perch(0)
        videf5(local6 local5 local2)
        IsEQ(local6 c19 local7)
        IsLT(local5 local4 local8)
        And(local8 local7 local7)
        BranchIfFalse(1 local7)                   // Loop condition terminal
        Add(local5 c32 local5)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Sub(local5 local3 local3)
        Sub(c19 local3 local6)
        IsGT(local6 c19 local7)
        BranchIfTrue(2 local7)
        Copy(c19 local6 )
        Perch(2)
        Copy(local6 local9 )     // FP Term
        Sub(local4 local5 local5)
        Sub(local4 local5 local4)
        Copy(c20 local10.n0 )                     // bundle
        Copy(local4 local10.n1 )                  // bundle
        Copy(c19 local10.n2 )                     // bundle
        Copy(local10 local11 )                    // FP Term
        Copy(local5 local12 )                     // FP Term
        IsGT(local3 c19 local7)
        BranchIfTrue(3 local7)
        Copy(c19 local3 )
        Perch(3)
        Copy(local3 local13 )    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: PrepareNumerator.vi
define(videf20 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local18)   // Normalized A
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local16)   // B copy
        o(dv(.Int32 0) local17)   // Shifted
    )
    c(
        e(.Boolean local3)   // A Greater
        e(.Boolean local4)   // Equal
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // B
        e(.Int32 local7)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // Shifted A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // Smaller
        e(.Int32 local12)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // Smaller
        e(.Int32 local15)   // Decimal Index
    )

    clump(1
        videf9(local2 local1 local3 local4)
//--- begin case structure
        Copy(local2 local5 )                      // case input tunnel
        Copy(local1 local6 )                      // case input tunnel
        BranchIfTrue(4 local3)                    // CaseStructure test
//--- default case
        Not(local4 local3 )
//--- begin case structure
        BranchIfTrue(0 local3)                    // CaseStructure test
//--- default case
        Copy(local6 local10 )                     // case output tunnel
        Copy(local5 local8 )                      // case output tunnel
        Copy(c31 local7 )                         // case output tunnel
        Branch(3)
//--- case
        Perch(0)
        Copy(local5 local9 )     // Pre-Loop copy into LSR
        Copy(c31 local7 )                         // initialize i
//--- begin while loop
        Perch(1)
        Copy(local9 local8 )     // LSR copy into inner wire
        videf23(local10 c27 local8)
        videf2(local10 local6 local8 local11 local3 *)
        Copy(local11 local9 )
        BranchIfTrue(2 local3)                    // Loop condition terminal
        Add(local7 c32 local7)                    // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(2)
        Mul(c27 local7 local7)
        Sub(local7 c32 local7)
        Copy(local9 local10 )                     // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local8 local5 )     // case output tunnel
        Copy(local10 local6 )                     // case output tunnel
        Branch(7)
//--- case
        Perch(4)
        Copy(local5 local13 )    // Pre-Loop copy into LSR
        Copy(c31 local12 )                        // initialize i
//--- begin while loop
        Perch(5)
        Copy(local13 local5 )    // LSR copy into inner wire
        videf23(local11 c32 local5)
        videf2(local11 local6 local5 local14 local3 *)
        Copy(local5 local13 )
        BranchIfFalse(6 local3)                   // Loop condition terminal
        Add(local12 c32 local12)                  // increment i
        Branch(5)                                 // loop again
//--- end while loop
        Perch(6)
        Copy(local14.n1 local15 )// unbundle
        Sub(local15 c32 local15)
        Copy(local14 local5 )
        Copy(local15 local5.n1 )                  // bundle
        Copy(local12 local7 )                     // case output tunnel
        Copy(local13 local6 )                     // case output tunnel
//--- end case structure
        Perch(7)
        Copy(local6 local16 )    // FP Term
        Copy(local7 local17 )                     // FP Term
        Copy(local5 local18 )                     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Reverse Array.vi
define(videf18 dv(.VirtualInstrument (
    c(
        i(dv(a(.Int8 *) () ) local1)   // Array
        o(dv(a(.Int8 *) () ) local11)   // Reversed Array
        o(dv(.Int32 0) local3)   // Array Size
    )
    c(
        e(.Int32 local2)
        e(.Int32 local4)
        e(a(.Int8 *) local5)   // Array
        e(a(.Int8 *) local6)   // Array
        e(a(.Int8 *) local7)   // Array
        e(.Boolean local8)
        e(.Int32 local9)
        e(.Int8 local10)
    )

    clump(1
        ArrayLength(local1 local2 )
        Copy(local2 local3 )                      // FP Term
        Sub(local2 c12 local2)
        Copy(local1 local7 )                      // Pre-Loop copy into LSR
        Copy(local1 local5 )
        Copy(c31 local4 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local7 local6 )     // LSR copy into inner wire
        IsGT(local2 local4 local8)
        Sub(local2 local4 local9)
        ArrayIndexElt(local5 local4 local10)
        ArrayReplaceElt(local6 local6 local9 local10)
        Copy(local6 local7 )
        BranchIfFalse(1 local8)                   // Loop condition terminal
        Add(local4 c32 local4)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Copy(local7 local11 )    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Round.vi
define(videf8 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local16)   // A rounded to Digits
        i(dv(.Int32 2) local1)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local3)   // Normalized A
        e(a(.Int8 *) local4)   // Array Num
        e(.Int32 local5)   // Decimal Index
        e(.Boolean local6)
        e(.Int32 local7)   // Digits
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Int32 local10)   // digit
        e(.Boolean local11)
        e(.Int8 local12)   // digit
        e(.Int8 local13)   // Rounded to even
        e(a(.Int8 *) local14)   // Array Num
        e(a(.Int8 *) local15)   // Array Num
    )

    clump(1
        videf19(local3 * local2)
        Copy(local3.n0 local4 )                   // unbundle
        Copy(local3.n1 local5 )                   // unbundle
        IsGT(local5 local1 local6)
//--- begin case structure
        Copy(local1 local7 )                      // case input tunnel
        BranchIfTrue(0 local6)                    // CaseStructure test
//--- default case
        Branch(5)
//--- case
        Perch(0)
        Sub(local5 local7 local8)
        Sub(local8 c32 local9)
        videf5(local10 local8 local4)
        IsEQ(local10 c47 local6)
        IsGT(c47 local10 local11)
        videf5(local10 local9 local4)
//--- begin case structure
        BranchIfTrue(3 local11)                   // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfFalse(1 local6)                   // CaseStructure test
//--- default case
        Convert(local10 local12)
        videf29(local13 local12)
        Sub(local8 c32 local9)
        ArrayReplaceElt(local14 local4 local9 local13)
        Copy(local8 local9 )                      // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Add(local10 c32 local9)
        Convert(local9 local12)
        Sub(local8 c32 local9)
        ArrayReplaceElt(local15 local4 local9 local12)
        Copy(local15 local14 )                    // case output tunnel
        Copy(local8 local9 )                      // case output tunnel
//--- end case structure
        Perch(2)
        Copy(local9 local8 )     // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(local4 local14 )    // case output tunnel
//--- end case structure
        Perch(4)
        ArrayLength(local14 local9 )
        Sub(local9 local8 local9)
        ArraySubset(local15 local14 local8 local9)
        Copy(local15 local4 )                     // case output tunnel
        Copy(local7 local5 )                      // case output tunnel
//--- end case structure
        Perch(5)
        Copy(local4 local3.n0 )  // bundle
        Copy(local5 local3.n1 )                   // bundle
        Copy(local3 local16 )                     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Shift.vi
define(videf23 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local8)   // Shifted A
        i(dv(.Int32 1) local1)   // Shift by
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local3)   // A
        e(dv(.Boolean false) local4)   // Normalize?
        e(.Int32 local5)   // Decimal Index
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // Normalized A
    )

    clump(1
//--- begin case structure
        Copy(local2 local3 )                      // case input tunnel
        BranchIfEQ(2 local1 c19)             // CaseStructure test
//--- default case
        Copy(local3.n1 local5 )                   // unbundle
        Add(local5 local1 local5)
        Copy(local3 local6 )
        Copy(local5 local6.n1 )                   // bundle
//--- begin case structure
        BranchIfTrue(0 local4)                    // CaseStructure test
//--- default case
        Branch(1)
//--- case
        Perch(0)
        videf19(local7 * local6)
        Copy(local7 local6 )                      // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local6 local3 )     // case output tunnel
        Branch(2)
//--- case
//--- end case structure
        Perch(2)
        Copy(local3 local8 )     // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: SimpleCalcPi.vi
define(videf30 dv(.VirtualInstrument (
    c(
        e(.UInt32 local1)   // millisecond timer value
        e(.Int32 local2)
        e(.Int32 local3)
        e(.Int32 local4)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A
        e(.Boolean local7)
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Int32 local10)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // Result
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // (N!)^4
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // N!
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local16)   // Square Root A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // A / Scalar
        e(.String local18)   // Results
        e(.UInt32 local19)   // millisecond timer value
        e(dv(.UInt32 134) local20)   // x-y
        e(dv(.String '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196') local21)   // Results
    )
    clump(1
        GetMillisecondTickCount(local1)
        Add(c4 c0 local2)
        Quotient(local2 c3 local3)
        Trigger(3)                                // fork
        Copy(c2 local6 )                          // Pre-Loop copy into LSR
        Copy(c31 local4 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local6 local5 )     // LSR copy into inner wire
        IsGT(local3 local4 local7)
        Mul(local4 c7 local8)
        Mul(local4 c7 local9)
        Mul(c9 local4 local10)
        Add(c8 local10 local10)
        Trigger(2)                                // fork
        Trigger(1)                                // fork
        videf31(local11 c6 local9)
        Wait(1)                                   // join
        videf13(local13 local12 local11)
        Wait(2)                                   // join
        videf14(local15 local13 local2 local11)
        videf1(local13 local11 local5)
        Copy(local13 local6 )
        BranchIfFalse(1 local7)                   // Loop condition terminal
        Add(local4 c32 local4)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Wait(3)                  // join
        videf12(local17 local6 local2 * local18)
        GetMillisecondTickCount(local19)
        Sub(local19 local1 local1)
        Copy(local1 local20 )                     // FP Term
        Copy(local18 local21 )                    // FP Term
        Printf("Pi calculated to %d digits is %z\n" c0 local18)
   //     Printf("It took %s milliseconds\n" local1)

//--- end of vi
    )
    clump(1
        videf24(local12 local4)
    )
    clump(1
        videf25(local14 local8)
        videf26(local14 local10 * local15)
    )
    clump(1
        videf32(local16 local2 c1)
        videf17(local17 local2 c5 local16)
    )
)))
//---------------------------------------------------
//VI Definition: Sqrt.vi
define(videf32 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local14)   // Square Root A
        i(dv(.Int32 50) local2)   // digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((0 0 4 )  0 false )) local1)   // A
    )
    c(
        e(.Int32 local3)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local4)   // A/B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A / Scalar
        e(.Int32 local6)
        e(.Int32 local7)   // digits
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A/B
        e(.Boolean local11)   // Equal
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // Answer
        e(dv(.Int32 0) local13)
    )

    clump(1
        Add(local2 c32 local3)
        Trigger(1)                                // fork
        videf14(c46 local1 local2 local4)
        Wait(1)                                   // join
        Copy(c46 local9 )                         // Pre-Loop copy into LSR
        Copy(local4 local10 )                     // Pre-Loop copy into LSR
        Copy(local2 local7 )
        Copy(c31 local6 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local9 local8 )     // LSR copy into inner wire
        Copy(local10 local4 )                     // LSR copy into inner wire
        videf7(local11 local7 local8 local4)
//--- begin case structure
        BranchIfTrue(1 local11)                   // CaseStructure test
//--- default case
        videf13(local8 local4 local4)
        videf13(local12 local8 local5)
        videf33(local8 local12 c45)
        videf13(local12 local4 local8)
        Copy(c16 local11 )                        // case output tunnel
        Copy(local12 local8 )                     // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Copy(c18 local11 )       // case output tunnel
        Copy(local4 local8 )                      // case output tunnel
//--- end case structure
        Perch(2)
        videf8(local12 local3 local8)
        Copy(local6 local13 )                     // FP Term
        Copy(local4 local9 )
        Copy(local12 local10 )
        BranchIfFalse(3 local11)                  // Loop condition terminal
        Add(local6 c32 local6)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(3)
        videf13(local4 local10 local1)
        videf19(local8 * local4)
        Copy(local8 local14 )                     // FP Term
//--- end of vi
    )
    clump(1
        videf17(local5 local3 c35 local1)
    )
)))
//---------------------------------------------------
//VI Definition: Subtract.vi
define(videf33 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local8)   // A-B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(a(.Int8 *) local3)   // Array Num
        e(.Int32 local4)   // Decimal Index
        e(.Boolean local5)   // stop
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A+B
    )

    clump(1
        Copy(local2.n0 local3 )                   // unbundle
        Copy(local2.n1 local4 )                   // unbundle
        Copy(local2.n2 local5 )                   // unbundle
        Not(local5 local5 )
        Copy(local2 local6 )
        Copy(local3 local6.n0 )                   // bundle
        Copy(local4 local6.n1 )                   // bundle
        Copy(local5 local6.n2 )                   // bundle
        videf1(local7 local6 local1)
        Copy(local7 local8 )                      // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Unsigned Unsafe Subtract.vi
define(videf3 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local22)   // A-B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local5)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(a(.Int32 *) local1)
        e(a(.Int8 *) local3)   // Array Num
        e(.Int32 local4)   // Decimal Index
        e(a(.Int8 *) local6)   // Array Num
        e(.Int32 local7)   // Decimal Index
        e(.Boolean local8)
        e(.Int32 local9)   // Decimal Index
        e(.Int32 local10)   // B Index
        e(.Int32 local11)   // A Index
        e(.Int32 local12)   // Loop Count
        e(.Int8 local13)
        e(.Int8 local14)
        e(.Int32 local15)   // A Index
        e(.Int32 local16)   // B Index
        e(a(.Int32 *) local17)
        e(.Int32 local18)
        e(.Int32 local19)
        e(.Int32 local20)   // digit
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local21)   // A
    )

    clump(1
        Convert(c13 local1)
        Copy(local2.n0 local3 )                   // unbundle
        Copy(local2.n1 local4 )                   // unbundle
        Copy(local5.n0 local6 )                   // unbundle
        Copy(local5.n1 local7 )                   // unbundle
        IsGT(local4 local7 local8)
        Copy(local7 local9 )
        BranchIfFalse(0 local8)
        Copy(local4 local9 )
        Perch(0)
        videf10(local10 local11 local12 local7 local6 local4 local3)
        Sub(local12 c20 local4)
        Copy(c21 local14 )                        // Pre-Loop copy into LSR
        Copy(local11 local15 )                    // Pre-Loop copy into LSR
        Copy(local10 local16 )                    // Pre-Loop copy into LSR
        Copy(local1 local17 )                     // Pre-Loop copy into LSR
        Copy(c31 local7 )                         // initialize i
//--- begin while loop
        Perch(1)
        Copy(local14 local13 )   // LSR copy into inner wire
        Copy(local15 local11 )                    // LSR copy into inner wire
        Copy(local16 local10 )                    // LSR copy into inner wire
        Copy(local17 local1 )                     // LSR copy into inner wire
        Add(local10 c20 local12)
        Add(local11 c20 local18)
        Convert(local13 local19)
        videf5(local20 local11 local3)
        Sub(local20 local19 local11)
        videf5(local19 local10 local6)
        Sub(local11 local19 local10)
        IsLT(local10 c19 local8)
//--- begin case structure
        BranchIfFalse(2 local8)                   // CaseStructure test
//--- default case
        Convert(c22 local11)
        Add(local10 local11 local11)
        Copy(c29 local13 )                        // case output tunnel
        Copy(local11 local10 )                    // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Copy(c21 local13 )       // case output tunnel
//--- end case structure
        Perch(3)
        ArrayConcatenate( local1 local1 local10)
        IsGT(local4 local7 local8)
        Copy(local13 local14 )
        Copy(local18 local15 )
        Copy(local12 local16 )
        Copy(local1 local17 )
        BranchIfFalse(4 local8)                   // Loop condition terminal
        Add(local7 c32 local7)                    // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(4)
        Convert(local17 local3)
        Copy(local2 local21 )
        Copy(local3 local21.n0 )                  // bundle
        Copy(local9 local21.n1 )                  // bundle
        Copy(c18 local21.n2 )                     // bundle
        Copy(local21 local22 )                    // FP Term
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: XtoY.vi
define(videf31 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local19)   // Result
        i(dv(.Int32 0) local3)   // X
        i(dv(.Int32 0) local1)   // Y
    )
    c(
        e(.Boolean local2)
        e(.Int32 local4)   // X
        e(.Int32 local5)   // Y
        e(.Int32 local6)   // X
        e(.Int32 local7)   // X
        e(.Int32 local8)   // Y
        e(.Int32 local9)   // Y
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // A x Scalar
        e(.Boolean local12)
        e(.Boolean local13)
        e(.Int32 local14)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local16)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A x Scalar
    )

    clump(1
        IsNE(local1 c19 local2)
        Copy(local3 local4 )
        Copy(local1 local5 )
//--- begin while loop
        Perch(0)
        Copy(local7 local6 )     // LSR copy into inner wire
        Copy(local9 local8 )                      // LSR copy into inner wire
        Copy(local11 local10 )                    // LSR copy into inner wire
        Sub(local5 local8 local8)
        IsGE(local8 c19 local12)
        And(local2 local12 local12)
        IsEQ(local4 local6 local13)
        And(local12 local13 local12)
//--- begin case structure
        BranchIfTrue(5 local12)                   // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfEQ(3 local5 c19)             // CaseStructure test
//--- default case
        Sub(local5 c20 local6)
        Copy(c25 local16 )                        // Pre-Loop copy into LSR
        Copy(c31 local14 )                        // initialize i
//--- begin while loop
        Perch(1)
        Copy(local16 local15 )   // LSR copy into inner wire
        videf26(local15 local4 * local17)
        IsGT(local6 local14 local12)
        Copy(local17 local16 )
        BranchIfFalse(2 local12)                  // Loop condition terminal
        Add(local14 c32 local14)                  // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(2)
        Copy(local16 local15 )   // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(c25 local15 )       // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local15 local10 )   // case output tunnel
        Branch(8)
//--- case
        Perch(5)
        Sub(local8 c20 local6)
        Copy(local10 local18 )                    // Pre-Loop copy into LSR
        Copy(c31 local8 )                         // initialize i
//--- begin while loop
        Perch(6)
        Copy(local18 local10 )   // LSR copy into inner wire
        videf26(local10 local4 * local17)
        IsGT(local6 local8 local12)
        Copy(local17 local18 )
        BranchIfFalse(7 local12)                  // Loop condition terminal
        Add(local8 c32 local8)                    // increment i
        Branch(6)                                 // loop again
//--- end while loop
        Perch(7)
        Copy(local18 local10 )   // case output tunnel
//--- end case structure
        Perch(8)
        Copy(local4 local7 )
        Copy(local5 local9 )
        Copy(local10 local11 )
        BranchIfFalse(9 c18)                      // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(9)
        Copy(local11 local19 )   // FP Term
//--- end of vi
    )
)))
enqueue(videf30)

// Test out inline constants
define(Ten dv(.Int32  10))
define(ConstantArray dv(a(.Int32 *) (10 20 30)))


define(SubVI1 dv(.VirtualInstrument (
    c(
        i(.Int32    ix)
        i(.Double   dx)
        i(a(.Int32 *)  ax)
        o(.Int32    ixo)
        o(.Double   dxo)
        o(a(.Int32 *)  axo)
    )
    c()
    clump (1
        Printf("-v1----\n" ix)
        Printf("Int32 <%s>\n" ix)
        Printf("Double <%s>\n" dx)
        Printf("Array <%s>\n" ax)
    )
) ) )

define(SubVI2 dv(.VirtualInstrument (
    c(
        i(.Int32    ix)
  //      o(.Double   dx)
        o(a(.Int32 *)  ax)
    )
    c()
    clump (1
        Printf("-v2---\n" ix)
        Printf("Int32 <%s>\n" ix)
 //       Printf("Double <%s>\n" dx)
       Printf("Array <%s>\n" ax)
    )
) ) )

define(SubVI3 dv(.VirtualInstrument (
    c(
        o(a(.Int32 *)  ax)
    )
    c()
    clump (1
        // its an output, but since the caller passes the storage
        // this will print the value that are currently there.
        Printf("Array <%s>\n" ax)
    )
) ) )

define(SubVI4 dv(.VirtualInstrument (
    c(
        o(.Int32    ix)
        o(.Double   dx)
        o(a(.Int32 *)  ax)
    )
    c()
    clump (1
        Printf("-v2---\n" ix)
        Printf("Int32 <%s>\n" ix)
 //       Printf("Double <%s>\n" dx)
       Printf("Array <%s>\n" ax)
    )
) ) )


define(HelloWorld dv(.VirtualInstrument (
    c(
        e(.Int32 _ix)
        e(.Double _dx)
        e(.String _str)
        e(dv(a(.Int32 *) (4 5 6 7)) arr)
    )
    clump (1
       SubVI2(* *)
       SubVI2(* arr)
       SubVI2(* ConstantArray)
       SubVI2(* (10 11 12))

       SubVI2(7 *)
       SubVI2(7 arr)
       SubVI2(7 ConstantArray)
       SubVI2(7 (10 11 12))

       SubVI3(*)
       SubVI3(arr)
       SubVI3(ConstantArray)
       SubVI3((10 11 12))
 
        // These cause errors
        // generates an error, since the int is not formatted correctly.
          SubVI1(* * ((1 2)(3 4)))   
          SubVI1(* * "hello")   
          SubVI1(* * true)   

      //  These should not compile. Type is right but they are outputs
        SubVI4(_ix * *)
        SubVI4(* _dx *)
        SubVI4(Ten * *)
        SubVI4(* * *)
        SubVI4(4 4 *)
        SubVI4(* * (1 2 3))
    )
) ) )

enqueue(HelloWorld)
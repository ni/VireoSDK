// Autogenerated Vireo assembly file
// Generated on Thu Jan 16 18:15:22 2014
// This program tests that default outputs are preserved over the course of multiple calls to a subvi. 
// videf1 conditionally writes to its output params based on the value of its boolean input.
// The calling vi alternates calling videf1 with true or false.

define(c0 dv(.Int32 4) )
define(c1 dv(.String '---') )
define(c2 dv(.Int32 2) )
define(c3 dv(.Int32 0) )
define(GlobalError c(
    e(.Boolean n0)   // status
    e(.Int32 n1)   // code
    e(.String n2)   // source
) )
define(c4 dv(.Boolean true) )
define(c5 dv(c(
    e(.UInt8 n0)
    e(.UInt8 n1)
    e(.UInt8 n2)
    e(.UInt8 n3)
) (5 6 7 8 )) )
define(c6 dv(.UInt8 4) )
define(c7 dv(a(.Int32 *) (6 5 7 ) ) )
define(c8 dv(.Int32 1) )
//---------------------------------------------------
//VI Definition: Untitled 1.vi
define(videf1 dv(.VirtualInstrument (
    c(
        i(dv(.Boolean false) local1)   // Boolean
        o(dv(c(
            e(.UInt8 n0)
            e(.UInt8 n1)
            e(.UInt8 n2)
            e(.UInt8 n3)
        ) (1 3 2 4 )) local2)   // Cluster
        o(dv(.UInt8 2) local3)   // Numeric
        o(dv(a(.Int32 *) (1 2 3 ) ) local4)   // Array
    )
    c(
    )
    clump(1
//--- begin case structure
        BranchIfTrue(0 local1)                    // CaseStructure test
//--- default case
        Branch(1)
//--- case
        Perch(0)
        Copy(c5 local2 )         // FP Term
        Copy(c6 local3 )                          // FP Term
        Copy(c7 local4 )                          // FP Term
//--- end case structure
//--- end of vi
        Perch(1)
    )
)))
//---------------------------------------------------
//VI Definition: Untitled 2.vi
define(videf2 dv(.VirtualInstrument (
    c(
        e(.Int32 local1)
        e(.Int32 local2)
        e(.Int32 local3)
        e(.Int32 local4)
        e(.Boolean local5)
        e(c(
            e(.UInt8 n0)
            e(.UInt8 n1)
            e(.UInt8 n2)
            e(.UInt8 n3)
        ) local6)   // Cluster
        e(.UInt8 local7)   // Numeric
        e(a(.Int32 *) local8)   // Array
    )
    clump(1
//--- begin for loop
        Copy(c0 local2 )                          // set loop count
        Sub(local2 c8 local3)
        Copy(c3 local1 )                          // initialize i
        Perch(0)
        Remainder(local1 c2 local4)
        IsNE(local4 c3 local5)
        videf1(local5 local6 local7 local8)
        Println(local8)
        Println(local7)
        Println(local6)
        Println(c1)
        BranchIfGE(1 local1 local3)
        Add(local1 c8 local1)                     // increment i
        Branch(0)                                 // loop again
//--- end of vi
        Perch(1)
    )
)))
enqueue(videf2)

// Array dimensions
// Simple base cases for parameterized dimensions
define(t1_star a(.Int32 *))
define(t1_0 a(.Int32 $0))
define(t1_1 a(.Int32 $1))

// Hard to imagine a template with 255 parameters, but...
define(t1_254 a(.Int32 $254))
define(t1_255 a(.Int32 $255))

// (Line nnn HardError "Invalid array dimension '$256'.")
//define(t1_256 a(.Int32 $256))

// BitBlock size - generic size will inflate to a zero bit structure

define(bb_star  c(e(bb(*    UInt))))
define(bb_i0     c(e(bb(0   UInt))))
define(bb_i1     c(e(bb(1   UInt))))
define(bb_0     c(e(bb($0   UInt))))
define(bb_1     c(e(bb($1   UInt))))
define(bb_255   c(e(bb($255 UInt))))

// TODO BitBlock encodings, very meta, need enums

define(t1 a(.Int32 $1))
//define(t2 a($1 $1))
//define(t3 a($1 $2))

/*
define(t1_Int .t1<.Int32>)
define(t1_Double .t1<.Double>)

define(t2_Int .t1<.Int32>)
define(t2_Double .t1<.Double>)
*/

define(Test dv(.VirtualInstrument (
 c(
    e(.Type                 vType)
    e(.Int32                size)
  ) 
  clump(1 
    // Array dimensions
    //----
    TypeBaseType(.t1_star vType)
    Printf("Name '%z' value '%z' structure '%z' \n" .t1_star t1_star vType)    

    TypeBaseType(.t1_0 vType)
    Printf("Name '%z' value '%z' structure '%z' \n" .t1_0 t1_0 vType)    
    
    TypeBaseType(.t1_1 vType)
    Printf("Name '%z' value '%z' structure '%z' \n" .t1_1 t1_1 vType)    

    TypeBaseType(.t1_254 vType)
    Printf("Name '%z' value '%z' structure '%z' \n" .t1_254 t1_254 vType)    

    TypeBaseType(.t1_255 vType)
    Printf("Name '%z' value '%z' structure '%z' \n" .t1_255 t1_255 vType)    

    // Bit Blocks
    TypeBaseType(.bb_i0 vType)
    TypeTopAQSize(.bb_i0 size)
    Printf("Name '%z' value '%z' AQSize %z structure '%z' \n" .bb_i0 bb_i0 size vType)    

    TypeBaseType(.bb_i1 vType)
    TypeTopAQSize(.bb_i1 size)
    Printf("Name '%z' value '%z' AQSize %z structure '%z' \n" .bb_i1 bb_i1 size vType)    

    TypeBaseType(.bb_0 vType)
    TypeTopAQSize(.bb_0 size)
    Printf("Name '%z' value '%z' AQSize %z structure '%z' \n" .bb_0 bb_0 size vType)    

    TypeBaseType(.bb_1 vType)
    TypeTopAQSize(.bb_1 size)
    Printf("Name '%z' value '%z' AQSize %z structure '%z' \n" .bb_1 bb_1 size vType)    

    TypeBaseType(.bb_255 vType)
    TypeTopAQSize(.bb_255 size)
    Printf("Name '%z' value '%z' AQSize %z structure '%z' \n" .bb_255 bb_255 size vType)    

    // Bit Blocks
    TypeOf(bb_0 vType) 
    Println(vType)
    TypeBaseType(vType vType)
    Println(vType)    

    TypeOf(bb_255 vType) 
    Println(vType)
    TypeBaseType(vType vType)
    Println(vType)    

   )
 ) ) )
enqueue(Test)

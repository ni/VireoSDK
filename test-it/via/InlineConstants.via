// Test out inline constants

define(HelloWorld dv(.VirtualInstrument (
    c(
        e(.Int32  i)
        e(.Int16  i16)

        e(.Double x)
        e(.String str)
        e(.Boolean b)
    )
    clump (
/*
        typical literas could be
            1. number           10 or 10.5 or 10.5e2
            2. boolean          t
            3. string           "abc" @"12"
            4. collection       (e1 e2 e3)

        Symbols can be any token. If the token has special characters
        it need to be escaped. How.
*/

        StringToUpper(* str)
        Printf("passing default value <%s>\n" str)
        StringToUpper("Hello, World" str)
        Printf("passing inline double quoted constant value <%s>\n" str)
        StringToUpper('Hello, World' str)
        Printf("passing inline single quoted constant value <%s>\n" str)
        StringToUpper(@"Hello, World" str)
        Printf("passing inline @double quoted constant value <%s>\n" str)
        StringToUpper(@'Hello, World' str)
        Printf("passing inline @single quoted constant value <%s>\n" str)

        StringToLower("Hello, World" str)
        Printf("passing inline constant value <%s>\n" str)
        Mul(6 7 i)
        Printf("passing inline constant value <%d>\n" i)
        Add(3.2 1.85 x)
        Printf("passing inline constant value <%.2f>\n" x)

        BooleanConvertInt16(true i16)
        Printf("passing inline constant value <%d>\n" i16)
        BooleanConvertInt16(false i16)
        Printf("passing inline constant value <%d>\n" i16)


        // MulInt32(6 7 9) not allowed.

        // This does not work (yet)
        // Mul(8 9 x)
        // Printf("passing inline constant value to polymorphic function <%s>\n" x)
    )
) ) )

enqueue(HelloWorld)

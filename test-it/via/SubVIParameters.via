
// SubVI parameter list needs
// 1. The paameter list  should be self contained so it can defined as a type and reused in its intirety as a predefined type
// 2. It can be defined on the fly in a VI wiht out any prototype
// 3. It needs to identify data direction,
// 4. [q] doe it need to capture editor elements like thrall the thrall bit, pehaps no
// since there is no smanic decisions to be made at the assembly level.
/*


So where functions are currently listed like this

    DEFINE_VIREO_FUNCTION(AddDouble, "p(e(.Double)e(.Double)e(.Double))")
    DEFINE_VIREO_FUNCTION(SubDouble, "p(e(.Double)e(.Double)e(.Double))")
    DEFINE_VIREO_FUNCTION(MulDouble, "p(e(.Double)e(.Double)e(.Double))")
    DEFINE_VIREO_FUNCTION(DivDouble, "p(e(.Double)e(.Double)e(.Double))")

Instead the prototye can be defined, and then reused.

    DEFINE_VIREO_TYPE(BinOpDouble, "p(e(.Double)e(.Double)e(.Double))");

    DEFINE_VIREO_FUNCTION(AddDouble, ".BinOpDouble")
    DEFINE_VIREO_FUNCTION(SubDouble, ".BinOpDouble")
    DEFINE_VIREO_FUNCTION(MulDouble, ".BinOpDouble")
    DEFINE_VIREO_FUNCTION(DivDouble, ".BinOpDouble")
    
    
This is a bit like a function pointer declarations, though it is a step short of that
its jsut the type for the parameter block, or if we are using the stact, it is the definition of the stack frame upon entry
to the called code.


So applying this to a SubVI there will be an additional type; making a well formed VI look like the following

define(SubVI dv(.VirtualInstrument (param-block-type internal-dataspace-type clump-count  clumps)))

Thus an actual example might look like this

define(AddAndSquare dv(.VirtualInstrument (
    p(e(.Double x)e(.Double y)e(.Double value))       // param list with names
    c()                                                 // no locals
    1 
    clump(1 
        AddDouble(x y value)
        MulDouble(value value value)
    )
 )))

So where internal types have not yet had the optional parameter type names in the Vireo type, that is more important now.

DEFINE_VIREO_TYPE(BinOpDouble, "p(e(.Double x)e(.Double y)e(.Double value))");


define(AddAndSquare, dv(.VirtualInstrument (
    p(i(.Double x)i(.Double y)o(.Double value))       // param list with names


*/
define(SubVINoParams dv(.VirtualInstrument (
 c(
 e(dv(.String 'Inside call: SubVINoParams') sInside)
  )
    clump(1
    Println(sInside)
   )
 )))
 
define(SubVIWithOneInputParam dv(.VirtualInstrument (
 c(i(.Int32 x))
 c(
  e(dv(.Int32 1) c1)
  e(dv(.String 'Inside call: SubVIWithOneInputParam')  sInside)
  )
  clump(1 
  //  AddInt32(c1 x x)
 //   Println(x)
    Println(sInside)
   )
 )))

define(SubVIWithOneOutputParam dv(.VirtualInstrument (
 c(o(.Int32 result))
 c( 
 e(dv(.String 'Inside call: SubVIWithOneOutputParam') sInside)
  ) 
  clump(1 
    Println(sInside)
   )
 )))

define(SubVIWithOneOneInAndOneOutputParam dv(.VirtualInstrument (
 c(i(.Int32 x) o(.Int32 result))
 c( 
 e(dv(.String 'Inside call: SubVIWithOneOneInAndOneOutputParam') sInside)
  )
  clump(1
  Printf(" Inside SubVIWithOneOneInputOutputParam input value is <%z> result is <%z>\n" x result)
    Println(sInside)
   )
 )))

define(SubVIWithOneOneInputOutputParam dv(.VirtualInstrument (
 c(io(.Int32 x))
 c( 
 e(dv(.String 'Inside call: SubVIWithOneOneInputOutputParam') sInside)
  )
  clump(1
  Printf(" Inside SubVIWithOneOneInputOutputParam input value is %z\n" x)
    Println(sInside)
   )
 )))
 
 define(SubVIWithOneInputStringParamWithDefaultOneOutputString dv(.VirtualInstrument (
 c(
    i(dv(.String 'Hello world.') stringParam)
    o(.String result))
 c( 
  )
  clump(1
    Printf(" Inside SubVIWithOneOneInputOutputParam input value is <%s> result is <%s>\n" stringParam result)
    Copy(stringParam result)
    Printf(" After assignment <%s> result is <%s>\n" stringParam result)
   )
 )))

define(TopVI dv(.VirtualInstrument (
 c(
  e(dv(.Int32 47) c47)
  e(dv(.Int32 47) c47)
    e(dv(.String 'Before call') sBefore)
    e(dv(.String 'After call') sAfter)
  )
  clump(1
    Println(sBefore)
    SubVINoParams()
    SubVIWithOneInputParam()
    SubVIWithOneOutputParam()
    SubVIWithOneOneInAndOneOutputParam()
    SubVIWithOneOneInputOutputParam() 
    SubVIWithOneInputStringParamWithDefaultOneOutputString(* *)
    Println(sAfter)
   )
 )))

enqueue(TopVI)

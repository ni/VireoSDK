
define(TestQueueTemplates dv(.VirtualInstrument (
    Locals: c(
          // Define several type of Queues.
          e(.Queue qOpen)
          e(.Queue<.Double> qDouble)
          e(.Queue<.Double 4> qDoubleFixed4)
          e(.Queue<.Double -4> qDoubleBounded4)
          e(.Queue<.Double .*> qDoubleVariable) // that seems a bit odd '.*'
          e(.Queue<.Double 10.2> qDoubleFloatDim)
          e(.Queue<.Double true> qDoubleBoolDim)
          e(.Queue<.Double "Hello"> qDoubleStrDim)
    //    e(.Queue<.Double !> qDouble3)
        e(dv(.Double 6.28) x)

        e(dv(.Int32 505)  i)
        e(.Int32  j)
        e(.Boolean timedOut)
    )
    clump (

        Printf(" qOpen              : %z \n" qOpen)
        Printf(" qDouble            : %z \n" qDouble)
        Printf(" qDoubleFixed4      : %z \n" qDoubleFixed4)
        Printf(" qDoubleBounded4    : %z \n" qDoubleBounded4)
        Printf(" qDoubleVariable    : %z \n" qDoubleVariable)
        Printf(" qDoubleFloatDim    : %z \n" qDoubleFloatDim)
        Printf(" qDoubleBoolDim     : %z \n" qDoubleBoolDim)
        Printf(" qDoubleStrDim      : %z \n" qDoubleStrDim)
/*
        // Put an elements in each queue
        EnqueueElement(qDouble x 10 timedOut)
        Printf("Enqueued Value %z, timed out %z\n" x timedOut)
        EnqueueElement(qInt32  i 10 timedOut)
        Printf("Enqueued Value %z, timed out %z\n" i timedOut)

        // Pull them out
        DequeueElement(qDouble y 10 timedOut)
        Printf("Dequeued Value %z, timed out %z\n" y timedOut)

        DequeueElement(qInt32 j 10 timedOut)
        Printf("Dequeued Value %z, timed out %z\n" j timedOut)

        // Try again, these call will time out
        DequeueElement(qDouble y 10 timedOut)
        Printf("Dequeued Value %z, timed out %z\n" y timedOut)

        DequeueElement(qInt32 j 10 timedOut)
        Printf("Dequeued Value %z, timed out %z\n" j timedOut)
*/
    )
) ) )

/*
c(
    e(.DataPointer firstState)      // Scheduler state
    e(a(.$1 *)elements)             // Array of elements
    e(.Int32 insert)                // Insertion point
    e(.Int32 count)                 // Current size
)
*/
enqueue(TestQueueTemplates)

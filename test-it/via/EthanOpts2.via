// Autogenerated Vireo assembly file
// Generated on Fri Jun 13 14:25:53 2014

define(c0 dv(.Int32 1) )
define(c1 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((8 )  0 false )) )
define(c2 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((0 )  0 false )) )
define(c3 dv(.Int32 8) )
define(c4 dv(.Int32 6) )
define(c5 dv(.Int32 9801) )
define(c6 dv(.Int32 396) )
define(c7 dv(.Int32 4) )
define(c8 dv(.Int32 1103) )
define(c9 dv(.Int32 26390) )
define(c10 dv(c(
    e(.Boolean n0)   // status
    e(.Int32 n1)   // code
    e(.String n2)   // source
) (false 0 '' )) )
define(c11 dv(.Int32 0) )
define(c12 dv(a(.Int8 *) () ) )
define(c13 dv(.Boolean false) )
define(c14 dv(.Int8 0) )
define(c15 dv(.Int8 9) )
define(c16 dv(.Int8 10) )
define(c17 dv(a(.Int8 *) () ) )
define(c18 dv(.Int8 1) )
define(c19 dv(.Int32 0) )
define(c20 dv(.Boolean true) )
define(c21 dv(c(
    e(.Int32 n0)
    e(.Int32 n1)
) (5 -1 )) )
define(c22 dv(.Int32 -1) )
define(c23 dv(.Int32 9) )
define(c24 dv(.Int32 1) )
define(c25 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) (()  0 false )) )
define(c26 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) () ) )
define(c27 dv(.Int32 7) )
define(c28 dv(.Int32 2) )
define(c29 dv(a(.Int8 *) (0 ) ) )
define(c30 dv(a(.Int8 *) () ) )
define(c31 dv(.Int32 10) )
define(c32 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((1 )  0 false )) )
define(c33 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) (((1 0 0 0 )  0 false ) ((1 0 0 0 )  0 false ) ((6 1 0 0 )  0 false ) ((6 9 2 1 )  0 false ) ((6 7 7 1 3 3 0 0 )  0 false ) ((0 0 0 0 6 3 7 0 2 0 0 0 )  0 false ) ((0 0 0 0 6 5 8 3 7 8 6 2 )  0 false ) ((0 0 0 0 6 5 2 8 2 1 4 2 5 4 6 0 )  0 false ) ((0 0 0 0 6 7 5 6 3 3 9 2 8 0 9 2 4 6 2 0 )  0 false ) ((0 0 0 0 6 3 1 5 7 2 7 7 2 1 3 1 2 1 0 4 3 7 1 0 )  0 false ) ((0 0 0 0 0 0 0 0 6 3 1 5 7 2 7 7 2 1 3 1 2 1 0 4 3 7 1 0 )  0 false ) ) ) )
define(c34 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) (((1 )  0 false ) ((1 )  0 false ) ((2 )  0 false ) ((6 )  0 false ) ((4 2 )  0 false ) ((0 2 1 )  0 false ) ((0 2 7 )  0 false ) ((0 4 0 5 )  0 false ) ((0 2 3 0 4 )  0 false ) ((0 8 8 2 6 3 )  0 false ) ((0 0 8 8 2 6 3 )  0 false ) ) ) )
define(c35 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((1 )  0 false )) )
define(c36 dv(.UInt8 35) )
define(c37 dv(.Int8 46) )
define(c38 dv(.Int32 0) )
define(c39 dv(.Int32 1) )
define(c40 dv(.UInt8 48) )
define(c41 dv(.Int8 48) )
define(c42 dv(.UInt8 0) )
define(c43 dv(.Int8 45) )
define(c44 dv(a(.Int8 *) () ) )
define(c45 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((5 1 )  1 false )) )
define(c46 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((2 4 8 2 8 2 )  5 false )) )
define(c47 dv(.Int32 2) )
define(c48 dv(.Boolean true) )
define(c49 dv(.Boolean false) )
define(c50 dv(.Int32 5) )
define(c51 dv(.Int8 2) )
//---------------------------------------------------
//VI Definition: Add.vi
define(videf1 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A+B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(.Boolean local4)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // Larger
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // Smaller
        e(.Boolean local7)   // Equal
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A-B
        e(a(.Int8 *) local9)   // Array Num
        e(.Int32 local10)   // Decimal Index
        e(.Int32 local11)
        e(.Int32 local12)
        e(.Int32 local13)
        e(.Int32 local14)
        e(.Int32 local15)   // Digits
        e(.Int8 local16)
        e(.Int8 local17)
        e(a(.Int8 *) local18)
        e(a(.Int8 *) local19)
        e(.Int8 local20)   // digit
        e(.Int8 local21)   // digit
        e(.Int8 local22)
        e(a(.Int8 *) local23)
        e(a(.Int8 *) local24)
        e(a(.Int8 *) local25)
        e(a(.Int8 *) local26)   // Array Num
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local27)   // A
    )
        clump(1
        IsEQ(local1.n2 local2.n2 local4)
//--- begin case structure
        BranchIfTrue(3 local4)                    // CaseStructure test
//--- default case
        videf2(local1 local2 local5 local6 local4 local7)
        Copy(local2.n2 local4 )
        BranchIfFalse(0 local4)
        Copy(local1.n2 local4 )
//--- begin case structure
        Perch(0)
        BranchIfTrue(1 local7)   // CaseStructure test
//--- default case
        videf3(local8 local6 local5)
        Copy(local8.n0 local9 )                   // case output tunnel
        Copy(local8.n1 local10 )                  // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Copy(c12 local9 )        // case output tunnel
        Copy(c11 local10 )                        // case output tunnel
        Copy(c13 local4 )                         // case output tunnel
//--- end case structure
        Perch(2)
        Copy(local9 local26 )    // case output tunnel
        Copy(local1 local27 )                     // case output tunnel
        Branch(15)
//--- case
        Perch(3)
        IsGT(local1.n1 local2.n1 local4)
        Copy(local2.n1 local10 )
        BranchIfFalse(4 local4)
        Copy(local1.n1 local10 )
        Perch(4)
        Sub(local1.n1 local10 local11)
        Sub(local2.n1 local10 local12)
        ArrayLength(local1.n0 local13 )
        ArrayLength(local2.n0 local14 )
        videf4(local15 local2.n1 local14 local1.n1 local13)
        Sub(local15 c39 local13)
        Copy(c38 local14 )                        // initialize i
        Copy(c14 local16 )                        // Pre-Loop copy into LSR
        Copy(c12 local18 )                        // Pre-Loop copy into LSR
//--- begin loop
        Perch(5)
        Copy(local16 local17 )   // LSR copy into inner wire
        Copy(local18 local19 )                    // LSR copy into inner wire
        IsGT(local13 local14 local4)
        Add(local11 local14 local15)
        ArrayIndexElt(local1.n0 local15 local20)
        Add(local14 local12 local15)
        ArrayIndexElt(local2.n0 local15 local21)
        Add(local20 local21 local20)
        Add(local20 local17 local17)
        IsGT(local17 c15 local7)
//--- begin case structure
        BranchIfTrue(6 local7)                    // CaseStructure test
//--- default case
        Copy(local17 local20 )                    // case output tunnel
        Copy(c14 local22 )                        // case output tunnel
        Branch(9)
//--- case
        Perch(6)
        Copy(c14 local21 )       // Pre-Loop copy into LSR
//--- begin loop
        Perch(7)
        Copy(local17 local20 )   // LSR copy into inner wire
        Copy(local21 local22 )                    // LSR copy into inner wire
        Add(local22 c18 local21)
        Sub(local20 c16 local20)
        Copy(local20 local17 )
        IsGE(local20 c16 local7)
        BranchIfFalse(8 local7)                   // Loop condition terminal
//--- end loop
        Branch(7)                                 // loop again
        Perch(8)
        Copy(local17 local20 )   // case output tunnel
        Copy(local21 local22 )                    // case output tunnel
//--- end case structure
        Perch(9)
        Copy(local22 local16 )
        ArrayConcatenate( local18 local19 local20)
        BranchIfFalse(10 local4)                  // Loop condition terminal
        Add(local14 c39 local14)                  // increment i
//--- end loop
        Branch(5)                                 // loop again
        Perch(10)
        IsEQ(local16 c14 local4)
//--- begin case structure
        BranchIfTrue(13 local4)                   // CaseStructure test
//--- default case
        Quotient(local16 c16 local20)
        Remainder(local16 c16 local22)
        IsNE(local20 c14 local4)
        Copy(local18 local23 )                    // Pre-Loop copy into LSR
//--- begin loop
        Perch(11)
        Copy(local23 local24 )  // LSR copy into inner wire
        ArrayConcatenate( local23 local24 local22)
        BranchIfFalse(12 local4)                  // Loop condition terminal
//--- end loop
        Branch(11)                                // loop again
        Perch(12)
        Copy(local23 local25 )  // case output tunnel
        Branch(14)
//--- case
        Perch(13)
        Copy(local18 local25 )  // case output tunnel
//--- end case structure
        Perch(14)
        Copy(local25 local26 )  // case output tunnel
        Copy(local2.n2 local4 )                   // case output tunnel
        Copy(local1 local27 )                     // case output tunnel
//--- end case structure
        Perch(15)
        Copy(local27 local3 )
        Copy(local26 local3.n0 )                  // bundle
        Copy(local10 local3.n1 )                  // bundle
        Copy(local4 local3.n2 )                   // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: CalcDivideDigits.vi
define(videf5 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int32 0) local4)   // decimal Ofst 2
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 0) local2)   // decimal Ofst
        i(dv(.Int32 0) local3)   // Array Size
    )
    c(
        e(.Boolean local5)
        e(.Int32 local6)
    )
        clump(1
        IsGT(local2 local3 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        Sub(local3 local2 local6)
        Add(local6 local1 local6)
        Branch(1)
//--- case
        Perch(0)
        Copy(local1 local6 )     // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local6 local4 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: CompareToDigits.vi
define(videf6 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Boolean false) local4)   // Equal
        i(dv(.Int32 0) local1)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local3)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local2)   // A 2
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A rounded to Digits
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A rounded to Digits
    )
        clump(1
        Trigger(1)                                // fork
        videf7(local6 local1 local3)
        Wait(1)                                   // join
        videf8(local5 local6 * local4)
//--- end of vi
    )
    clump(1
        videf7(local5 local1 local2)
    )
)))
//---------------------------------------------------
//VI Definition: ComputeAddSize.vi
define(videf4 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int32 0) local5)   // Digits
        i(dv(.Int32 0) local3)   // B Position
        i(dv(.Int32 0) local1)   // B Array Size
        i(dv(.Int32 0) local4)   // A Position
        i(dv(.Int32 0) local2)   // A Array Size
    )
    c(
        e(.Int32 local6)
        e(.Boolean local7)
        e(.Int32 local8)   // B Position
        e(.Int32 local9)
    )
        clump(1
        Sub(local1 local3 local6)
        IsGT(local3 c38 local7)
        Copy(c11 local8 )
        BranchIfFalse(0 local7)
        Copy(local3 local8 )
        Perch(0)
        Sub(local2 local4 local9)
        IsGT(local9 local6 local7)
        BranchIfFalse(1 local7)
        Copy(local9 local6 )
        Perch(1)
        IsGT(local4 c38 local7)
        Copy(c11 local9 )
        BranchIfFalse(2 local7)
        Copy(local4 local9 )
        Perch(2)
        IsGT(local9 local8 local7)
        BranchIfFalse(3 local7)
        Copy(local9 local8 )
        Perch(3)
        Add(local6 local8 local5)
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: ComputeUUSSize.vi
define(videf9 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int32 0) local3)   // B Index
        o(dv(.Int32 0) local4)   // A Index
        o(dv(.Int32 0) local7)   // Loop Count
        i(dv(.Int32 0) local1)   // B Array Position
        i(dv(a(.Int8 *) () ) local5)   // BArray
        i(dv(.Int32 0) local2)   // A Array Position
        i(dv(a(.Int8 *) () ) local6)   // A Array Num
    )
    c(
        e(.Boolean local8)
        e(.Int32 local9)   // B Array Position
        e(.Int32 local10)
        e(.Int32 local11)
        e(.Int32 local12)
        e(.Int32 local13)
        e(.Int8 local14)   // digit
        e(.Boolean local15)
    )
        clump(1
        IsGT(local1 c38 local8)
        Copy(c19 local9 )
        BranchIfFalse(0 local8)
        Copy(local1 local9 )
        Perch(0)
        Sub(local1 local2 local10)
        IsLT(local10 c38 local8)
//--- begin case structure
        BranchIfTrue(1 local8)                    // CaseStructure test
//--- default case
        Sub(c38 local10 local10)
        Copy(local10 local11 )                    // case output tunnel
        Copy(c19 local10 )                        // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Copy(c19 local11 )       // case output tunnel
//--- end case structure
        Perch(2)
        Copy(local10 local3 )
        Copy(local11 local4 )
        IsGT(local2 c38 local8)
        Copy(c19 local10 )
        BranchIfFalse(3 local8)
        Copy(local2 local10 )
        Perch(3)
        IsGT(local10 local9 local8)
        BranchIfFalse(4 local8)
        Copy(local10 local9 )
        Perch(4)
        ArrayLength(local5 local10 )
        Sub(local10 local1 local10)
        ArrayLength(local6 local11 )
        Sub(local11 c39 local11)
        Copy(c38 local12 )                        // initialize i
//--- begin loop
        Perch(5)
        IsLE(local12 local11 local8)
        Sub(local11 local12 local13)
        ArrayIndexElt(local6 local13 local14)
        IsEQ(local14 c14 local15)
        And(local15 local8 local8)
        BranchIfFalse(6 local8)                   // Loop condition terminal
        Add(local12 c39 local12)                  // increment i
//--- end loop
        Branch(5)                                 // loop again
        Perch(6)
        Add(local13 c39 local11)
        Sub(local11 local2 local11)
        IsGT(local11 local10 local8)
        BranchIfFalse(7 local8)
        Copy(local11 local10 )
        Perch(7)
        Add(local10 local9 local7)
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Count Leading Zeros.vi
define(videf10 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(a(.Int8 *) () ) local1)   // Array Num
        o(dv(a(.Int8 *) () ) local2)   // Array Dup
        o(dv(.Int32 0) local3)   // NonZero Count
    )
    c(
        e(.Int32 local4)
        e(.Int32 local5)
        e(.Int32 local6)
        e(.Boolean local7)
        e(.Int8 local8)   // digit
        e(.Boolean local9)
    )
        clump(1
        ArrayLength(local1 local4 )
        Sub(local4 c39 local4)
        Copy(c38 local5 )                         // initialize i
//--- begin loop
        Perch(0)
        Sub(local4 local5 local6)
        IsGT(local6 c38 local7)
        ArrayIndexElt(local1 local6 local8)
        IsEQ(local8 c14 local9)
        And(local9 local7 local7)
        BranchIfFalse(1 local7)                   // Loop condition terminal
        Add(local5 c39 local5)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local1 local2 )     // tunnel out
        Add(local6 c39 local4)
        Copy(local4 local3 )
        BranchIfFalse(2 local9)
        Copy(c38 local3 )
//--- end of vi
        Perch(2)
    )
)))
//---------------------------------------------------
//VI Definition: Display Intermed Text.vi
define(videf11 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 -1) local4)   // Block Out
        o(dv(.String '') local5)   // Results
    )
    c(
        e(.Boolean local6)
        e(.Int32 local7)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A/B
        e(.String local10)   // String
        e(.String local11)   // String Out
        e(.String local12)   // String Out
    )
        clump(1
        IsGE(local4 c38 local6)
        Sub(local1 c4 local7)
        videf12(local8 local2 local3)
        videf13(c35 local8 local1 local9)
        videf14(local10 local7 local9)
//--- begin case structure
        BranchIfTrue(0 local6)                    // CaseStructure test
//--- default case
        Copy(local10 local12 )                    // case output tunnel
        Branch(1)
//--- case
        Perch(0)
        videf15(local11 local4 local10)
        Copy(local11 local12 )                    // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local12 local5 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Div Scalar.vi
define(videf16 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // A / Scalar
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 0) local2)   // Scalar
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A
    )
    c(
        e(.Boolean local5)
        e(.Int32 local6)
        e(.Int32 local7)   // decimal Ofst 2
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Int32 local10)
        e(.Int32 local11)
        e(a(.Int8 *) local12)
        e(a(.Int8 *) local13)
        e(.Int32 local14)
        e(.Int32 local15)   // digit
        e(.Int8 local16)
        e(a(.Int8 *) local17)   // Reversed Array
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // Normalized A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local20)   // Normalized A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local21)   // A
    )
        clump(1
        IsEQ(local2 c38 local5)
//--- begin case structure
        BranchIfTrue(4 local5)                    // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfEQ(2 local2 c39)             // CaseStructure test
//--- default case
        ArrayLength(local3.n0 local6 )
        videf5(local7 local1 local3.n1 local6)
        Sub(local7 c39 local8)
        Sub(local7 local6 local7)
        Add(local7 local3.n1 local7)
        Copy(c38 local9 )                         // initialize i
        Copy(c38 local10 )                        // Pre-Loop copy into LSR
        Copy(c44 local12 )                        // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local10 local11 )   // LSR copy into inner wire
        Copy(local12 local13 )                    // LSR copy into inner wire
        IsGT(local8 local9 local5)
        Sub(local6 local9 local14)
        Sub(local14 c39 local14)
        videf17(local15 local14 local3.n0)
        Add(local15 local11 local11)
        Quotient(local11 local2 local14)
        Remainder(local11 local2 local11)
        Mul(c31 local11 local10)
        Convert(local14 local16)
        ArrayConcatenate( local12 local13 local16)
        BranchIfFalse(1 local5)                   // Loop condition terminal
        Add(local9 c39 local9)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        videf18(local12 local17 *)
        Copy(local3 local18 )
        Copy(local17 local18.n0 )                 // bundle
        Copy(local7 local18.n1 )                  // bundle
        videf19(local19 * local18)
        Copy(local19 local20 )                    // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Copy(local3 local20 )    // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local20 local21 )   // case output tunnel
        Branch(5)
//--- case
        Perch(4)
        Copy(local3 local21 )    // case output tunnel
//--- end case structure
        Perch(5)
        Copy(local21 local4 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Divide.vi
define(videf13 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // B
        i(dv(.Int32 10) local1)   // digits
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // A/B
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // Normalized A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // B copy
        e(.Int32 local7)   // Shifted
        e(.Int32 local8)
        e(.Boolean local9)
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local10)   // Arrays of A
        e(.Int32 local11)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // Normalized A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // Normalized A
        e(.Boolean local14)
        e(.Boolean local15)
        e(a(.Int8 *) local16)
        e(a(.Int8 *) local17)
        e(.Int32 local18)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local19)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local20)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local21)   // A
        e(.Boolean local22)   // Equal
        e(.Boolean local23)
        e(.Int32 local24)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local25)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local26)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local27)
        e(.Int32 local28)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local29)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local30)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local31)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local32)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local33)   // A-B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local34)   // A-B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local35)   // Shifted A
        e(.Int8 local36)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local37)   // Normalized A
        e(a(.Int8 *) local38)   // Reversed Array
    )
        clump(1
        videf20(local2 local3 local5 local6 local7)
        Add(local7 c39 local7)
        Add(local1 local7 local8)
        Sub(local8 c39 local8)
        IsNE(local5.n2 local6.n2 local9)
        videf21(local10 local6)
        Copy(c38 local11 )                        // initialize i
        Copy(local5 local12 )                     // Pre-Loop copy into LSR
        Copy(c13 local14 )                        // Pre-Loop copy into LSR
        Copy(c17 local16 )                        // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local12 local13 )   // LSR copy into inner wire
        Copy(local14 local15 )                    // LSR copy into inner wire
        Copy(local16 local17 )                    // LSR copy into inner wire
//--- begin case structure
        BranchIfTrue(15 local15)                  // CaseStructure test
//--- default case
        Copy(c38 local18 )                        // initialize i
        Copy(c21 local19 )                        // Pre-Loop copy into LSR
//--- begin loop
        Perch(1)
        Copy(local19 local20 )   // LSR copy into inner wire
        ArrayIndexElt(local10 local20.n0 local21)
        videf8(local13 local21 local15 local22)
        IsEQ(local18 c38 local23)
//--- begin case structure
        BranchIfTrue(10 local22)                  // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfTrue(7 local23)                   // CaseStructure test
//--- default case
        IsGT(local20.n1 c38 local22)
        IsEQ(local22 local15 local15)
//--- begin case structure
        BranchIfTrue(3 local15)                   // CaseStructure test
//--- default case
        Sub(local20.n0 c39 local24)
        BranchIfTrue(2 local22)
        Copy(local20.n0 local24 )
        Perch(2)
        Copy(local20 local25 )
        Copy(local24 local25.n0 )                 // bundle
        Copy(c13 local15 )                        // case output tunnel
        Copy(local25 local27 )                    // case output tunnel
        Branch(6)
//--- case
        Perch(3)
        IsNE(local20.n0 c23 local15)
//--- begin case structure
        BranchIfTrue(4 local15)                   // CaseStructure test
//--- default case
        Copy(local20.n0 local24 )                 // case output tunnel
        Branch(5)
//--- case
        Perch(4)
        Add(local20.n0 local20.n1 local24)
        IsNE(local24 c38 local15)
//--- end case structure
        Perch(5)
        Copy(local20 local26 )
        Copy(local24 local26.n0 )                 // bundle
        Copy(local26 local27 )                    // case output tunnel
//--- end case structure
        Perch(6)
        Copy(local27 local30 )   // case output tunnel
        Branch(9)
//--- case
        Perch(7)
        Copy(c22 local24 )
        BranchIfFalse(8 local15)
        Copy(c24 local24 )
        Perch(8)
        Add(local20.n0 local24 local28)
        Copy(local20 local29 )
        Copy(local28 local29.n0 )                 // bundle
        Copy(local24 local29.n1 )                 // bundle
        Copy(local29 local30 )                    // case output tunnel
        Copy(c20 local15 )                        // case output tunnel
//--- end case structure
        Perch(9)
        Copy(local30 local31 )   // case output tunnel
        Copy(c13 local22 )                        // case output tunnel
        Branch(11)
//--- case
        Perch(10)
        Copy(local20 local31 )  // case output tunnel
        Copy(c13 local15 )                        // case output tunnel
        Copy(c20 local22 )                        // case output tunnel
//--- end case structure
        Perch(11)
        Copy(local31 local19 )
        BranchIfFalse(12 local15)                 // Loop condition terminal
        Add(local18 c39 local18)                  // increment i
//--- end loop
        Branch(1)                                 // loop again
        Perch(12)
        IsNE(local19.n0 c38 local15)
//--- begin case structure
        BranchIfTrue(13 local15)                  // CaseStructure test
//--- default case
        Copy(local13 local34 )                    // case output tunnel
        Branch(14)
//--- case
        Perch(13)
        videf22(local32 local19.n0 local10)
        videf3(local33 local32 local13)
        Copy(local33 local34 )                    // case output tunnel
//--- end case structure
        Perch(14)
        videf23(local35 c22 local34)
        Convert(local19.n0 local36)
        Copy(local35 local37 )                    // case output tunnel
        Copy(local22 local15 )                    // case output tunnel
        Branch(16)
//--- case
        Perch(15)
        Copy(local13 local37 )  // case output tunnel
        Copy(c14 local36 )                        // case output tunnel
//--- end case structure
        Perch(16)
        Copy(local15 local14 )
        ArrayConcatenate( local16 local17 local36)
        Copy(local37 local12 )
        IsGT(local8 local11 local15)
        BranchIfFalse(17 local15)                 // Loop condition terminal
        Add(local11 c39 local11)                  // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(17)
        videf18(local16 local38 local8)
        Sub(local8 local7 local7)
        Copy(local12 local4 )
        Copy(local38 local4.n0 )                  // bundle
        Copy(local7 local4.n1 )                   // bundle
        Copy(local9 local4.n2 )                   // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Factorial To the Fourth.vi
define(videf24 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // (N!)^4
        i(dv(.Int32 0) local1)   // N
    )
    c(
        e(.Int32 local3)   // N
        e(.Int32 local4)   // N
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A x Scalar
        e(.Boolean local7)
        e(.Boolean local8)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // N!
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // Answer
        e(.Int32 local12)
        e(.Int32 local13)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // A x Scalar
        e(.Int32 local16)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A x Scalar
    )
        clump(1
//--- begin loop
        Perch(0)
        Copy(local3 local4 )     // LSR copy into inner wire
        Copy(local5 local6 )                      // LSR copy into inner wire
        IsNE(local4 c38 local7)
        Copy(local1 local3 )
        IsGE(local1 local4 local8)
        And(local8 local7 local7)
//--- begin case structure
        BranchIfTrue(1 local7)                    // CaseStructure test
//--- default case
        videf25(local9 local1)
        videf12(local10 local9 local9)
        videf12(local11 local10 local10)
        Copy(local11 local18 )                    // case output tunnel
        Branch(4)
//--- case
        Perch(1)
        Add(local4 c39 local12)
        Sub(local1 local4 local4)
        Sub(local4 c39 local4)
        Copy(c38 local13 )                        // initialize i
        Copy(local6 local14 )                     // Pre-Loop copy into LSR
//--- begin loop
        Perch(2)
        Copy(local14 local15 )   // LSR copy into inner wire
        IsGT(local4 local13 local7)
        Add(local12 local13 local16)
        Mul(local16 local16 local16)
        videf26(local15 local16 * local17)
        videf26(local17 local16 * local14)
        BranchIfFalse(3 local7)                   // Loop condition terminal
        Add(local13 c39 local13)                  // increment i
//--- end loop
        Branch(2)                                 // loop again
        Perch(3)
        Copy(local14 local18 )   // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local18 local5 )
        BranchIfFalse(5 c13)                      // Loop condition terminal
//--- end loop
        Branch(0)                                 // loop again
        Perch(5)
        Copy(local18 local2 )    // tunnel out
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Factorial.vi
define(videf25 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // N!
        i(dv(.Int32 0) local1)   // N
    )
    c(
        e(.Boolean local3)
        e(.Int32 local4)   // N
        e(.Int32 local5)   // N
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A x Scalar
        e(.Boolean local8)
        e(.Boolean local9)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // N!
        e(.Int32 local11)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // N!
        e(.Int32 local13)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // N!
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // N!
        e(.Int32 local16)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // N!
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local20)   // A x Scalar
    )
        clump(1
        IsGT(local1 c31 local3)
//--- begin loop
        Perch(0)
        Copy(local4 local5 )     // LSR copy into inner wire
        Copy(local6 local7 )                      // LSR copy into inner wire
        IsNE(local5 c38 local8)
        Copy(local1 local4 )
        IsGE(local1 local5 local9)
        And(local9 local8 local8)
//--- begin case structure
        BranchIfTrue(5 local8)                    // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfTrue(1 local3)                    // CaseStructure test
//--- default case
        ArrayIndexElt(c34 local1 local10)
        Copy(local10 local17 )                    // case output tunnel
        Branch(4)
//--- case
        Perch(1)
        Add(c31 c39 local5)
        Sub(local1 c31 local11)
        Sub(local11 c39 local11)
        ArrayIndexElt(c34 c31 local12)
        Copy(c38 local13 )                        // initialize i
        Copy(local12 local14 )                    // Pre-Loop copy into LSR
//--- begin loop
        Perch(2)
        Copy(local14 local15 )   // LSR copy into inner wire
        Add(local5 local13 local16)
        videf26(local15 local16 * local14)
        IsGT(local11 local13 local8)
        BranchIfFalse(3 local8)                   // Loop condition terminal
        Add(local13 c39 local13)                  // increment i
//--- end loop
        Branch(2)                                 // loop again
        Perch(3)
        Copy(local14 local17 )   // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local17 local20 )   // case output tunnel
        Branch(8)
//--- case
        Perch(5)
        Add(local5 c39 local11)
        Sub(local1 local5 local5)
        Sub(local5 c39 local5)
        Copy(c38 local13 )                        // initialize i
        Copy(local7 local18 )                     // Pre-Loop copy into LSR
//--- begin loop
        Perch(6)
        Copy(local18 local19 )   // LSR copy into inner wire
        IsGT(local5 local13 local8)
        Add(local11 local13 local16)
        videf26(local19 local16 * local18)
        BranchIfFalse(7 local8)                   // Loop condition terminal
        Add(local13 c39 local13)                  // increment i
//--- end loop
        Branch(6)                                 // loop again
        Perch(7)
        Copy(local18 local20 )   // case output tunnel
//--- end case structure
        Perch(8)
        Copy(local20 local6 )
        BranchIfFalse(9 c13)                      // Loop condition terminal
//--- end loop
        Branch(0)                                 // loop again
        Perch(9)
        Copy(local20 local2 )    // tunnel out
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Filter String.vi
define(videf15 dv(.VirtualInstrument (
    c(
        o(dv(.String '') local3)   // String Out
        i(dv(.Int32 0) local1)   // Index
        i(dv(.String '') local2)   // String In
    )
    c(
        e(.Int32 local4)
        e(a(.UInt8 *) local5)   // unsigned byte array
        e(.Int32 local6)
        e(.Int32 local7)
        e(a(.UInt8 *) local8)   // unsigned byte array
        e(a(.UInt8 *) local9)   // unsigned byte array
        e(.Boolean local10)
        e(.Int32 local11)
    )
        clump(1
        Mul(local1 c3 local4)
        Add(local4 c3 local4)
        Copy(local2 local5 )
        ArrayLength(local2 local6 )
        Sub(local6 local4 local6)
        Sub(local6 c39 local6)
        Copy(c38 local7 )                         // initialize i
        Copy(local5 local8 )                      // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local8 local9 )     // LSR copy into inner wire
        IsGT(local6 local7 local10)
        Add(local4 local7 local11)
        ArrayReplaceElt(local8 local9 local11 c36)
        BranchIfFalse(1 local10)                  // Loop condition terminal
        Add(local7 c39 local7)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local8 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: GreaterNoOutput.vi
define(videf8 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(.Boolean false) local4)   // A Greater
        o(dv(.Boolean false) local3)   // Equal
    )
    c(
        e(.Int32 local5)
        e(.Int32 local6)
        e(.Int32 local7)
        e(.Int32 local8)
        e(.Boolean local9)
        e(.Int8 local10)   // digit
        e(.Boolean local11)
        e(a(.Int8 *) local12)   // Array Num
        e(.Int32 local13)
        e(.Int32 local14)
        e(.Boolean local15)
        e(.Int8 local16)   // digit
        e(.Boolean local17)
        e(a(.Int8 *) local18)   // Array Num
        e(.Boolean local19)
        e(.Int32 local20)
        e(.Int32 local21)
        e(.Int32 local22)
        e(.Int32 local23)
        e(.Int8 local24)   // digit
        e(.Int8 local25)   // digit
        e(.Boolean local26)
    )
        clump(1
        ArrayLength(local1.n0 local5 )
        Sub(local5 c39 local5)
        ArrayLength(local2.n0 local6 )
        Sub(local6 c39 local6)
        Trigger(1)                                // fork
        Copy(local6 local13 )                     // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local13 local14 )   // LSR copy into inner wire
        Sub(local14 c39 local13)
        IsGE(local14 local2.n1 local15)
        ArrayIndexElt(local2.n0 local14 local16)
        IsEQ(local16 c14 local17)
        And(local17 local15 local15)
        BranchIfFalse(1 local15)                  // Loop condition terminal
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local2.n0 local18 ) // tunnel out
        Add(local14 c39 local14)
        Sub(local14 local2.n1 local14)
        IsGT(local14 c38 local15)
        BranchIfTrue(2 local15)
        Copy(c19 local14 )
        Perch(2)
        Wait(1)                  // join
        IsGT(local14 local8 local19)
//--- begin case structure
        BranchIfTrue(8 local19)                   // CaseStructure test
//--- default case
        IsLT(local14 local8 local19)
//--- begin case structure
        BranchIfTrue(6 local19)                   // CaseStructure test
//--- default case
        Add(local8 local1.n1 local5)
        Add(local8 local2.n1 local6)
        IsGT(local5 local6 local19)
        Copy(local6 local20 )
        BranchIfFalse(3 local19)
        Copy(local5 local20 )
        Perch(3)
        Copy(c38 local21 )       // initialize i
//--- begin loop
        Perch(4)
        Copy(local6 local22 )    // LSR copy into inner wire
        Copy(local5 local23 )                     // LSR copy into inner wire
        Sub(local23 c39 local5)
        Sub(local22 c39 local6)
        ArrayIndexElt(local18 local22 local24)
        ArrayIndexElt(local12 local23 local25)
        IsEQ(local24 local25 local19)
        IsLT(local21 local20 local26)
        And(local19 local26 local26)
        BranchIfFalse(5 local26)                  // Loop condition terminal
        Add(local21 c39 local21)                  // increment i
//--- end loop
        Branch(4)                                 // loop again
        Perch(5)
        IsGT(local24 local25 local26)
        Branch(7)
//--- case
        Perch(6)
        Copy(c13 local26 )       // case output tunnel
        Copy(c13 local19 )                        // case output tunnel
//--- end case structure
        Perch(7)
        Branch(9)
//--- case
        Perch(8)
        Copy(c20 local26 )       // case output tunnel
        Copy(c13 local19 )                        // case output tunnel
//--- end case structure
        Perch(9)
        Copy(local19 local3 )
        Copy(local26 local4 )
//--- end of vi
    )
    clump(1
        Copy(local5 local7 )                      // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local7 local8 )     // LSR copy into inner wire
        Sub(local8 c39 local7)
        IsGE(local8 local1.n1 local9)
        ArrayIndexElt(local1.n0 local8 local10)
        IsEQ(local10 c14 local11)
        And(local11 local9 local9)
        BranchIfFalse(1 local9)                   // Loop condition terminal
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local1.n0 local12 ) // tunnel out
        Add(local8 c39 local8)
        Sub(local8 local1.n1 local8)
        IsGT(local8 c38 local9)
        BranchIfTrue(2 local9)
        Copy(c19 local8 )
        Perch(2)
    )
)))
//---------------------------------------------------
//VI Definition: GreaterThan.vi
define(videf2 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local5)   // Larger
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local6)   // Smaller
        o(dv(.Boolean false) local4)   // A Greater
        o(dv(.Boolean false) local3)   // Equal
    )
    c(
        e(.Boolean local7)   // A Greater
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
    )
        clump(1
        videf8(local2 local1 local7 local3)
//--- begin case structure
        BranchIfTrue(0 local7)                    // CaseStructure test
//--- default case
        Copy(local2 local8 )                      // case output tunnel
        Copy(local1 local9 )                      // case output tunnel
        Branch(1)
//--- case
        Perch(0)
        Copy(local1 local8 )     // case output tunnel
        Copy(local2 local9 )                      // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local7 local4 )
        Copy(local9 local5 )
        Copy(local8 local6 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Index ArrayClust.vi
define(videf22 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A
        i(dv(.Int32 0) local2)   // Index
        i(dv(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) () ) local1)   // Array
    )
    c(
        e(.Int32 local4)
        e(.Boolean local5)
        e(.Boolean local6)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A
    )
        clump(1
        ArrayLength(local1 local4 )
        IsGE(local2 local4 local5)
        IsLT(local2 c38 local6)
        Or(local6 local5 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        ArrayIndexElt(local1 local2 local7)
        Copy(local7 local8 )                      // case output tunnel
        Branch(1)
//--- case
        Perch(0)
        Copy(c25 local8 )        // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local8 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Index ArrayInt.vi
define(videf17 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int32 0) local3)   // digit
        i(dv(.Int32 0) local2)   // Index
        i(dv(a(.Int8 *) () ) local1)   // Array
    )
    c(
        e(.Int32 local4)
        e(.Boolean local5)
        e(.Boolean local6)
        e(.Int8 local7)   // digit
    )
        clump(1
        ArrayLength(local1 local4 )
        IsGE(local2 local4 local5)
        IsLT(local2 c38 local6)
        Or(local6 local5 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        ArrayIndexElt(local1 local2 local7)
        Convert(local7 local4)
        Branch(1)
//--- case
        Perch(0)
        Copy(c19 local4 )        // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local4 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: MakeDivArray.vi
define(videf21 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) () ) local2)   // Arrays of A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(.Int32 local3)
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local4)
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local5)
        e(.Boolean local6)
        e(.Int32 local7)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A x Scalar
    )
        clump(1
        Copy(c38 local3 )                         // initialize i
        Copy(c26 local4 )                         // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local4 local5 )     // LSR copy into inner wire
        IsGT(c27 local3 local6)
        Add(local3 c28 local7)
        videf26(local1 local7 * local8)
        ArrayConcatenate( local4 local5 local8)
        BranchIfFalse(1 local6)                   // Loop condition terminal
        Add(local3 c39 local3)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        ArrayConcatenate( local2 c25 local1 local4)
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Mult Scalar.vi
define(videf26 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )  0 false )) local2)   // A
        i(dv(.Int32 0) local1)   // Scalar
        i(dv(.Int32 0) local3)   // Shift by
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )  0 false )) local4)   // A x Scalar
    )
    c(
        e(.Boolean local5)
        e(.Int32 local6)
        e(.Int32 local7)
        e(.Int32 local8)
        e(.Int32 local9)
        e(a(.Int8 *) local10)   // Array Num
        e(a(.Int8 *) local11)   // Array Num
        e(.Int32 local12)
        e(.Int32 local13)   // digit
        e(.Int8 local14)   // digit
        e(a(.Int8 *) local15)   // Digits
        e(a(.Int8 *) local16)
        e(a(.Int8 *) local17)   // Array Num
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local20)   // Shifted A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local21)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local22)   // A
    )
        clump(1
        IsEQ(local1 c38 local5)
//--- begin case structure
        BranchIfTrue(6 local5)                    // CaseStructure test
//--- default case
        IsGT(local1 c24 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        Copy(local2 local19 )                     // case output tunnel
        Branch(5)
//--- case
        Perch(0)
        Convert(c14 local6)
        ArrayLength(local2.n0 local7 )
        Sub(local7 c39 local7)
        Copy(c38 local8 )                         // initialize i
        Copy(local2.n0 local10 )                  // Pre-Loop copy into LSR
//--- begin loop
        Perch(1)
        Copy(local6 local9 )     // LSR copy into inner wire
        Copy(local10 local11 )                    // LSR copy into inner wire
        Convert(c16 local12)
        videf17(local13 local8 local11)
        Mul(local13 local1 local13)
        Add(local13 local9 local9)
        Quotient(local9 local12 local6)
        Remainder(local9 local12 local9)
        Convert(local9 local14)
        ArrayReplaceElt(local10 local11 local8 local14)
        IsGT(local7 local8 local5)
        BranchIfFalse(2 local5)                   // Loop condition terminal
        Add(local8 c39 local8)                    // increment i
//--- end loop
        Branch(1)                                 // loop again
        Perch(2)
        IsEQ(local6 c38 local5)
//--- begin case structure
        BranchIfTrue(3 local5)                    // CaseStructure test
//--- default case
        videf27(local6 local15 *)
        ArrayConcatenate( local16 local10 local15)
        Copy(local16 local17 )                    // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(local10 local17 )   // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local2 local18 )
        Copy(local17 local18.n0 )                 // bundle
        Copy(local2.n1 local18.n1 )               // bundle
        Copy(local18 local19 )                    // case output tunnel
//--- end case structure
        Perch(5)
        videf23(local20 local3 local19)
        Copy(local20 local22 )                    // case output tunnel
        Branch(7)
//--- case
        Perch(6)
        Copy(local2 local21 )
        Copy(c29 local21.n0 )                     // bundle
        Copy(c19 local21.n1 )                     // bundle
        Copy(c13 local21.n2 )                     // bundle
        Copy(local21 local22 )                    // case output tunnel
//--- end case structure
        Perch(7)
        Copy(local22 local4 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Multiply.vi
define(videf12 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // Answer
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 5 4 5 1 5 2 8 8 3 3 7 8 2 3 2 6 1 6 8 0 0 6 8 7 8 3 9 6 7 6 7 2 5 2 1 3 4 0 3 4 4 2 8 4 2 5 4 9 6 3 4 3 1 3 2 4 0 1 6 0 3 7 8 5 3 2 4 4 0 2 9 5 0 0 5 5 7 7 1 8 2 1 8 4 7 9 0 6 0 6 3 7 9 1 0 5 3 5 5 3 4 0 7 3 9 3 7 4 7 6 9 2 5 7 9 6 0 2 1 9 2 8 3 0 1 2 7 7 5 0 2 7 0 7 5 3 9 8 3 0 2 2 2 7 9 4 9 8 4 2 4 7 8 9 1 0 3 8 9 9 8 9 2 5 2 7 7 0 0 1 9 0 5 0 8 0 5 4 5 7 3 2 9 2 3 9 4 3 9 9 8 2 9 7 7 4 0 0 1 2 7 7 7 6 3 9 0 6 3 4 8 3 2 2 2 8 3 4 0 9 4 7 9 5 4 6 7 2 2 8 4 8 5 4 4 6 0 8 0 6 8 5 4 0 3 1 1 3 4 6 1 5 1 5 6 0 9 1 7 3 8 5 9 6 0 9 1 1 7 2 7 9 6 9 2 2 1 8 3 5 0 6 8 6 7 2 5 6 3 3 5 1 1 8 2 4 3 1 2 6 3 0 8 9 6 9 0 5 9 9 4 6 3 6 0 2 7 8 8 5 9 2 8 7 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((6 1 2 9 6 5 2 6 7 9 9 2 7 8 5 9 0 2 8 5 9 4 4 3 7 3 5 6 8 1 1 4 3 0 2 6 3 3 3 7 6 8 3 7 6 0 4 7 5 9 4 4 7 5 0 5 6 7 0 8 4 6 4 4 7 8 2 4 2 4 3 0 4 1 8 2 2 7 2 1 3 6 9 9 8 9 4 1 3 2 9 4 5 4 1 8 2 4 0 4 2 9 9 1 6 8 8 2 3 3 7 2 6 8 6 4 3 8 8 7 6 6 7 6 9 6 5 0 6 3 2 8 6 3 1 3 4 8 2 0 8 4 8 8 4 4 7 1 4 0 3 5 2 9 0 2 6 2 2 8 8 0 0 6 0 0 2 3 4 3 4 9 1 9 3 8 7 3 5 1 5 4 0 7 2 1 4 0 6 8 8 8 0 3 8 0 9 8 8 4 7 6 7 5 6 5 9 2 6 9 2 4 4 8 4 4 2 3 6 4 9 9 8 0 7 5 3 9 2 2 3 0 9 3 3 4 3 9 9 4 1 0 3 0 2 9 5 5 0 0 8 0 4 7 0 9 0 6 4 9 9 1 2 4 6 9 4 0 1 2 4 3 0 8 1 9 8 9 7 8 8 8 5 3 5 3 7 2 3 6 8 4 6 9 0 1 3 5 6 6 8 1 7 1 7 4 0 0 9 5 9 9 3 2 1 5 9 6 1 9 2 4 9 2 0 3 0 4 8 5 6 8 8 9 0 4 2 5 3 9 3 3 2 9 2 1 4 0 4 4 5 3 6 4 1 0 2 0 7 5 0 0 9 7 4 0 3 3 9 0 5 2 1 0 8 6 3 9 0 0 9 3 0 3 9 2 3 4 5 6 7 1 2 2 1 8 5 9 8 7 7 1 5 9 0 6 9 8 7 3 4 8 9 9 7 9 1 1 0 7 8 1 8 5 9 9 6 7 6 5 8 3 1 5 6 7 1 4 5 7 8 8 4 8 7 9 3 7 7 4 8 9 6 4 3 7 2 8 3 5 7 2 6 5 6 6 4 4 6 6 9 7 5 4 1 8 3 1 9 3 6 8 9 4 1 8 3 2 9 1 3 3 5 9 7 2 0 7 3 3 1 9 3 5 7 1 4 4 0 9 8 1 3 9 7 9 2 0 5 9 8 2 4 6 9 1 7 3 6 0 7 6 9 8 7 1 6 4 7 1 2 9 8 1 4 4 8 3 4 7 3 7 4 6 5 2 3 0 7 8 9 1 8 0 5 9 4 7 5 0 0 9 2 2 3 8 6 9 1 3 8 9 4 7 7 8 1 0 8 4 4 1 4 9 1 5 6 6 6 9 5 4 0 2 5 4 5 1 5 5 8 5 3 7 2 7 9 1 0 0 7 5 9 9 7 1 6 9 6 5 2 1 2 9 1 6 4 7 2 5 4 4 3 6 2 0 6 7 1 7 2 6 1 3 9 0 3 6 6 7 6 8 7 2 2 3 1 7 6 8 5 5 7 7 5 4 2 2 9 5 4 8 4 7 6 6 3 0 0 5 2 7 3 4 4 8 4 8 6 1 6 8 8 1 4 7 3 )  0 false )) local1)   // A
    )
    c(
        e(.Boolean local4)
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local5)   // Starting Condition
        e(.Int32 local6)   // Working Digits
        e(.Int32 local7)   // Trailing Zeroes
        e(.Int32 local8)   // New Decimal Index
        e(.Int32 local9)
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local10)   // Starting Condition
        e(.Int32 local11)   // Working Digits
        e(.Int32 local12)   // Trailing Zeroes
        e(.Int32 local13)   // New Decimal Index
        e(.Int32 local14)
        e(.Int32 local15)
        e(.Int32 local16)
        e(a(.Int8 *) local17)
        e(a(.Int8 *) local18)
        e(a(.Int8 *) local19)
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local20)   // Starting Condition
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local21)   // Starting Condition
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local22)   // Starting Condition
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local23)   // Starting Condition
        e(.Int32 local24)   // digit 2
        e(.Int32 local25)   // digit 2
        e(.Int32 local26)
        e(.Int32 local27)
        e(.Boolean local28)
        e(.Int32 local29)
        e(.Int32 local30)
        e(.Int32 local31)
        e(.Int32 local32)
        e(.Boolean local33)
        e(.Int32 local34)
        e(.Int8 local35)   // digit
        e(.Int8 local36)   // digit
        e(a(.Int8 *) local37)
        e(a(.Int8 *) local38)
        e(a(.Int8 *) local39)
    )
        clump(1
        Xor(local1.n2 local2.n2 local4)
        Trigger(1)                                // fork
        videf28(local2 local10 local11 local12 local13)
        Wait(1)                                   // join
        Add(local6 local11 local14)
        Sub(local14 c39 local15)
        Sub(local15 c39 local15)
        Add(local7 local12 local16)
        Add(local16 local14 local14)
        ArrayFill(local17 local14 c14)
        Copy(c38 local14 )                        // initialize i
        Copy(local17 local18 )                    // Pre-Loop copy into LSR
        Copy(local5 local20 )                     // Pre-Loop copy into LSR
        Copy(local10 local22 )                    // Pre-Loop copy into LSR
        Copy(c19 local24 )                        // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local18 local19 )   // LSR copy into inner wire
        Copy(local20 local21 )                    // LSR copy into inner wire
        Copy(local22 local23 )                    // LSR copy into inner wire
        Copy(local24 local25 )                    // LSR copy into inner wire
        Copy(local16 local26 )                    // LSR copy into inner wire
        Add(local26 c39 local16)
        Add(local23.n0 local23.n2 local27)
        IsEQ(local21.n2 local9 local28)
//--- begin case structure
        BranchIfTrue(1 local28)                   // CaseStructure test
//--- default case
        Copy(local23.n1 local30 )                 // case output tunnel
        Copy(local23.n2 local29 )                 // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Add(local23.n2 c39 local29)
        Add(local23.n1 c39 local30)
//--- end case structure
//--- begin case structure
        Perch(2)
        BranchIfTrue(3 local28)  // CaseStructure test
//--- default case
        Add(local21.n2 c39 local31)
        Add(local21.n1 c39 local32)
        Branch(4)
//--- case
        Perch(3)
        Copy(local21.n1 local32 )// case output tunnel
        Copy(local21.n2 local31 )                 // case output tunnel
//--- end case structure
        Perch(4)
        IsEQ(local11 local27 local33)
        And(local33 local28 local28)
//--- begin case structure
        BranchIfTrue(7 local28)                   // CaseStructure test
//--- default case
        IsLT(local6 local11 local28)
        Copy(local11 local27 )
        BranchIfFalse(5 local28)
        Copy(local6 local27 )
        Perch(5)
        Add(local21.n0 c39 local34)
        IsLT(local34 local27 local28)
        BranchIfFalse(6 local28)
        Copy(local34 local27 )
        Perch(6)
        Branch(8)
//--- case
        Perch(7)
        Sub(local21.n0 c39 local27)
//--- end case structure
        Perch(8)
        Copy(local21 local20 )
        Copy(local27 local20.n0 )                 // bundle
        Copy(local32 local20.n1 )                 // bundle
        Copy(local31 local20.n2 )                 // bundle
        Copy(local23 local22 )
        Copy(local27 local22.n0 )                 // bundle
        Copy(local30 local22.n1 )                 // bundle
        Copy(local29 local22.n2 )                 // bundle
        Copy(c38 local27 )                        // initialize i
        Copy(local21.n1 local30 )                 // Pre-Loop copy into LSR
        Copy(local23.n1 local32 )                 // Pre-Loop copy into LSR
//--- begin loop
        Perch(9)
        Copy(local25 local29 )   // LSR copy into inner wire
        Copy(local30 local31 )                    // LSR copy into inner wire
        Copy(local32 local34 )                    // LSR copy into inner wire
        Add(local34 c39 local32)
        Sub(local31 c39 local30)
        ArrayIndexElt(local2.n0 local34 local35)
        ArrayIndexElt(local1.n0 local31 local36)
        Mul(local36 local35 local35)
        Convert(local35 local31)
        Add(local29 local31 local25)
        IsLT(local27 local21.n0 local28)
        BranchIfFalse(10 local28)                 // Loop condition terminal
        Add(local27 c39 local27)                  // increment i
//--- end loop
        Branch(9)                                 // loop again
        Perch(10)
        Quotient(local25 c31 local24)
        Remainder(local25 c31 local27)
        Convert(local27 local35)
        ArrayReplaceElt(local18 local19 local26 local35)
        IsGT(local15 local14 local28)
        BranchIfFalse(11 local28)                 // Loop condition terminal
        Add(local14 c39 local14)                  // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(11)
        IsEQ(local24 c38 local28)
//--- begin case structure
        BranchIfTrue(14 local28)                  // CaseStructure test
//--- default case
        Copy(local24 local14 )                    // Pre-Loop copy into LSR
        Copy(local18 local37 )                    // Pre-Loop copy into LSR
        Copy(local16 local26 )                    // Pre-Loop copy into LSR
//--- begin loop
        Perch(12)
        Copy(local14 local15 )  // LSR copy into inner wire
        Copy(local37 local38 )                    // LSR copy into inner wire
        Copy(local26 local27 )                    // LSR copy into inner wire
        Add(local27 c39 local26)
        Quotient(local15 c31 local29)
        Remainder(local15 c31 local15)
        Convert(local15 local35)
        ArrayReplaceElt(local37 local38 local27 local35)
        Copy(local29 local14 )
        IsGT(local29 c38 local28)
        BranchIfFalse(13 local28)                 // Loop condition terminal
//--- end loop
        Branch(12)                                // loop again
        Perch(13)
        Copy(local37 local39 )  // case output tunnel
        Branch(15)
//--- case
        Perch(14)
        Copy(local18 local39 )  // case output tunnel
//--- end case structure
        Perch(15)
        Add(local8 local13 local15)
        Copy(local1 local3 )
        Copy(local39 local3.n0 )                  // bundle
        Copy(local15 local3.n1 )                  // bundle
        Copy(local4 local3.n2 )                   // bundle
//--- end of vi
    )
    clump(1
        videf28(local1 local5 local6 local7 local8)
        Sub(local6 c39 local9)
    )
)))
//---------------------------------------------------
//VI Definition: Nearest Even.vi
define(videf29 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int8 0) local2)   // Rounded to even
        i(dv(.Int8 0) local1)   // digit
    )
    c(
        e(.Int8 local3)
        e(.Int8 local4)
        e(.Boolean local5)
    )
        clump(1
        Add(local1 c18 local3)
        Remainder(local1 c51 local4)
        IsNE(local4 c14 local5)
        Copy(local1 local2 )
        BranchIfFalse(0 local5)
        Copy(local3 local2 )
//--- end of vi
        Perch(0)
    )
)))
//---------------------------------------------------
//VI Definition: Normalize.vi
define(videf19 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // Normalized A
        i(dv(.Int32 0) local1)   // Shift to
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(.Boolean local4)
        e(.Int32 local5)
        e(.Int32 local6)
        e(.Int32 local7)
        e(.Int32 local8)   // digit
        e(.Boolean local9)
        e(.Boolean local10)
        e(a(.Int8 *) local11)   // Array Num
        e(a(.Int8 *) local12)
        e(a(.Int8 *) local13)
        e(a(.Int8 *) local14)
        e(a(.Int8 *) local15)
    )
        clump(1
        IsLT(local2.n1 c38 local4)
        ArrayLength(local2.n0 local5 )
        Sub(local5 c39 local5)
        Copy(c38 local6 )                         // initialize i
//--- begin loop
        Perch(0)
        Sub(local5 local6 local7)
        videf17(local8 local7 local2.n0)
        IsEQ(local8 c38 local9)
        IsGT(local7 c19 local10)
        And(local9 local10 local9)
        BranchIfFalse(1 local9)                   // Loop condition terminal
        Add(local6 c39 local6)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local2.n0 local11 ) // tunnel out
        Add(local7 c39 local5)
        ArraySubset(local12 local11 c19 local5)
//--- begin case structure
        BranchIfTrue(2 local4)                    // CaseStructure test
//--- default case
        Copy(local12 local15 )                    // case output tunnel
        Copy(local2.n1 local5 )                   // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Convert(c14 local5)
        Sub(c38 local2.n1 local6)
        ArrayFill(local13 local6 c14)
        ArrayConcatenate( local14 local13 local12)
        Copy(local14 local15 )                    // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local2 local3 )
        Copy(local15 local3.n0 )                  // bundle
        Copy(local5 local3.n1 )                   // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Number To Digits.vi
define(videf27 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(.Int32 0) local1)   // Value
        o(dv(a(.Int8 *) () ) local3)   // Digits
        o(dv(.Int32 0) local2)   // Num Digits
    )
    c(
        e(.Int32 local4)   // Value
        e(.Int32 local5)   // Value
        e(a(.Int8 *) local6)
        e(a(.Int8 *) local7)
        e(.Int32 local8)
        e(.Int8 local9)
        e(.Boolean local10)
    )
        clump(1
        Copy(local1 local4 )                      // Pre-Loop copy into LSR
        Copy(c30 local6 )                         // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local4 local5 )     // LSR copy into inner wire
        Copy(local6 local7 )                      // LSR copy into inner wire
        Quotient(local5 c31 local8)
        Remainder(local5 c31 local5)
        Convert(local5 local9)
        ArrayConcatenate( local6 local7 local9)
        Copy(local8 local4 )
        IsGT(local8 c38 local10)
        BranchIfFalse(1 local10)                  // Loop condition terminal
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local6 local3 )
        ArrayLength(local6 local2 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Number To String.vi
define(videf14 dv(.VirtualInstrument (
    c(
        o(dv(.String '') local3)   // String
        i(dv(.Int32 0) local1)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // Number
    )
    c(
        e(.UInt8 local4)
        e(.Int32 local5)
        e(a(.Int8 *) local6)   // Array Dup
        e(.Int32 local7)   // NonZero Count
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Boolean local10)
        e(.Boolean local11)
        e(.Int32 local12)
        e(.Int32 local13)
        e(a(.UInt8 *) local14)
        e(a(.Int8 *) local15)
        e(a(.UInt8 *) local16)
        e(a(.UInt8 *) local17)
        e(.Int8 local18)   // digit
        e(a(.UInt8 *) local19)
        e(a(.UInt8 *) local20)
        e(a(.UInt8 *) local21)
        e(a(.UInt8 *) local22)
        e(a(.UInt8 *) local23)
    )
        clump(1
        Convert(c37 local4)
        Copy(c38 local5 )
        BranchIfFalse(0 local2.n2)
        Copy(c39 local5 )
        Perch(0)
        videf10(local2.n0 local6 local7)
        Add(local5 local7 local8)
        Sub(local7 local2.n1 local9)
        IsGT(local9 c38 local10)
        IsEQ(local9 c38 local11)
//--- begin case structure
        BranchIfTrue(5 local11)                   // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfFalse(3 local10)                  // CaseStructure test
//--- default case
        IsLT(local2.n1 c38 local10)
//--- begin case structure
        BranchIfTrue(1 local10)                   // CaseStructure test
//--- default case
        Copy(c38 local12 )                        // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Sub(c38 local2.n1 local9)
        Copy(local9 local12 )                     // case output tunnel
        Copy(local7 local9 )                      // case output tunnel
//--- end case structure
        Perch(2)
        Add(local9 local1 local9)
        Add(local9 local12 local9)
        Copy(local9 local13 )                     // case output tunnel
        Copy(local2.n1 local9 )                   // case output tunnel
        Copy(c38 local12 )                        // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Sub(c38 local9 local9)
        Add(local9 c39 local12)
        Add(local9 local7 local9)
        Add(local1 c39 local13)
//--- end case structure
        Perch(4)
        Branch(6)
//--- case
        Perch(5)
        Add(local1 c39 local9)
        Copy(local9 local13 )                     // case output tunnel
        Copy(local7 local9 )                      // case output tunnel
        Copy(c39 local12 )                        // case output tunnel
//--- end case structure
        Perch(6)
        Add(local8 local12 local8)
        Sub(local8 c39 local12)
        Sub(local8 local9 local8)
        Add(local5 local13 local5)
        ArrayFill(local14 local5 c40)
        ArraySubset(local15 local6 * local7)
        ArrayLength(local15 local5 )
        Sub(local5 c39 local5)
        Copy(c38 local7 )                         // initialize i
        Copy(local14 local16 )                    // Pre-Loop copy into LSR
//--- begin loop
        Perch(7)
        Copy(local16 local17 )   // LSR copy into inner wire
        ArrayIndexElt(local15 local7 local18)
        Add(local18 c41 local18)
        IsGT(local5 local7 local10)
        Sub(local12 local7 local9)
        ArrayReplaceElt(local16 local17 local9 local18)
        BranchIfFalse(8 local10)                  // Loop condition terminal
        Add(local7 c39 local7)                    // increment i
//--- end loop
        Branch(7)                                 // loop again
        Perch(8)
        ArraySubset(local19 local16 local8 *)
        ArraySubset(local20 local16 * local8)
        ArrayConcatenate( local21 local20 local4 local19)
//--- begin case structure
        BranchIfTrue(9 local2.n2)                 // CaseStructure test
//--- default case
        Copy(local21 local23 )                    // case output tunnel
        Branch(10)
//--- case
        Perch(9)
        Convert(c42 local5)
        ArrayReplaceElt(local22 local21 local5 c43)
        Copy(local22 local23 )                    // case output tunnel
//--- end case structure
        Perch(10)
        Copy(local23 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: PrepForMultiply.vi
define(videf28 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local1)   // A
        o(dv(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) (0 0 0 )) local3)   // Starting Condition
        o(dv(.Int32 0) local4)   // Working Digits
        o(dv(.Int32 0) local5)   // Trailing Zeroes
        o(dv(.Int32 0) local2)   // New Decimal Index
    )
    c(
        e(.Int32 local6)
        e(.Int32 local7)
        e(.Int32 local8)   // digit
        e(.Boolean local9)
        e(.Boolean local10)
        e(.Int32 local11)
    )
        clump(1
        ArrayLength(local1.n0 local6 )
        Copy(c38 local7 )                         // initialize i
//--- begin loop
        Perch(0)
        videf17(local8 local7 local1.n0)
        IsEQ(local8 c38 local9)
        IsLT(local7 local6 local10)
        And(local10 local9 local9)
        BranchIfFalse(1 local9)                   // Loop condition terminal
        Add(local7 c39 local7)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Sub(local7 local1.n1 local8)
        Sub(c38 local8 local11)
        IsGT(local11 c19 local9)
        Copy(c19 local2 )
        BranchIfFalse(2 local9)
        Copy(local11 local2 )
        Perch(2)
        Sub(local6 local7 local7)
        Copy(local7 local4 )
        Sub(local6 local7 local6)
        Copy(c24 local3.n0 )                      // bundle
        Copy(local6 local3.n1 )                   // bundle
        Copy(c19 local3.n2 )                      // bundle
        IsGT(local8 c19 local9)
        Copy(c19 local5 )
        BranchIfFalse(3 local9)
        Copy(local8 local5 )
//--- end of vi
        Perch(3)
    )
)))
//---------------------------------------------------
//VI Definition: PrepareNumerator.vi
define(videf20 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local5)   // Normalized A
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // B copy
        o(dv(.Int32 0) local4)   // Shifted
    )
    c(
        e(.Boolean local6)   // A Greater
        e(.Boolean local7)   // Equal
        e(.Int32 local8)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // Shifted A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // Larger
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // Larger
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // Larger
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local16)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // Shifted A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // Smaller
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local20)   // Smaller
        e(.Int32 local21)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local22)   // Smaller
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local23)   // Smaller
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local24)   // A
    )
        clump(1
        videf8(local2 local1 local6 local7)
//--- begin case structure
        BranchIfTrue(4 local6)                    // CaseStructure test
//--- default case
        Not(local7 local6 )
//--- begin case structure
        BranchIfTrue(0 local6)                    // CaseStructure test
//--- default case
        Copy(local1 local14 )                     // case output tunnel
        Copy(local2 local15 )                     // case output tunnel
        Copy(c19 local8 )                         // case output tunnel
        Branch(3)
//--- case
        Perch(0)
        Copy(c38 local8 )        // initialize i
        Copy(local2 local9 )                      // Pre-Loop copy into LSR
//--- begin loop
        Perch(1)
        Copy(local9 local10 )    // LSR copy into inner wire
        videf23(local11 c22 local10)
        videf2(local11 local1 local12 local9 local6 *)
        BranchIfTrue(2 local6)                    // Loop condition terminal
        Add(local8 c39 local8)                    // increment i
//--- end loop
        Branch(1)                                 // loop again
        Perch(2)
        Copy(local12 local13 )   // tunnel out
        Mul(c22 local8 local8)
        Sub(local8 c39 local8)
        Copy(local9 local14 )                     // case output tunnel
        Copy(local13 local15 )                    // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local15 local23 )   // case output tunnel
        Copy(local14 local24 )                    // case output tunnel
        Branch(7)
//--- case
        Perch(4)
        Copy(c38 local8 )        // initialize i
        Copy(local2 local16 )                     // Pre-Loop copy into LSR
//--- begin loop
        Perch(5)
        Copy(local16 local17 )   // LSR copy into inner wire
        videf23(local18 c24 local17)
        videf2(local18 local1 local16 local19 local6 *)
        BranchIfFalse(6 local6)                   // Loop condition terminal
        Add(local8 c39 local8)                    // increment i
//--- end loop
        Branch(5)                                 // loop again
        Perch(6)
        Copy(local19 local20 )   // tunnel out
        Sub(local20.n1 c39 local21)
        Copy(local20 local22 )
        Copy(local21 local22.n1 )                 // bundle
        Copy(local22 local23 )                    // case output tunnel
        Copy(local16 local24 )                    // case output tunnel
//--- end case structure
        Perch(7)
        Copy(local24 local3 )
        Copy(local8 local4 )
        Copy(local23 local5 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Reverse Array.vi
define(videf18 dv(.VirtualInstrument (
    c(
        i(dv(a(.Int8 *) () ) local1)   // Array
        o(dv(a(.Int8 *) () ) local3)   // Reversed Array
        o(dv(.Int32 0) local2)   // Array Size
    )
    c(
        e(.Int32 local4)
        e(.Int32 local5)
        e(a(.Int8 *) local6)   // Array
        e(a(.Int8 *) local7)   // Array
        e(.Boolean local8)
        e(.Int32 local9)
        e(.Int8 local10)
    )
        clump(1
        ArrayLength(local1 local4 )
        Copy(local4 local2 )
        Sub(local4 c39 local4)
        Copy(c38 local5 )                         // initialize i
        Copy(local1 local6 )                      // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local6 local7 )     // LSR copy into inner wire
        IsGT(local4 local5 local8)
        Sub(local4 local5 local9)
        ArrayIndexElt(local1 local5 local10)
        ArrayReplaceElt(local6 local7 local9 local10)
        BranchIfFalse(1 local8)                   // Loop condition terminal
        Add(local5 c39 local5)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local6 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Round.vi
define(videf7 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A rounded to Digits
        i(dv(.Int32 2) local1)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local4)   // Normalized A
        e(.Boolean local5)
        e(.Int32 local6)
        e(.Int32 local7)
        e(.Int32 local8)   // digit
        e(.Boolean local9)
        e(.Int8 local10)   // digit
        e(.Int8 local11)   // Rounded to even
        e(a(.Int8 *) local12)   // Array Num
        e(a(.Int8 *) local13)   // Array Num
        e(a(.Int8 *) local14)   // Array Num
        e(a(.Int8 *) local15)   // Array Num
        e(a(.Int8 *) local16)
        e(a(.Int8 *) local17)   // Array Num
    )
        clump(1
        videf19(local4 * local2)
        IsGT(local4.n1 local1 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        Copy(local4.n0 local17 )                  // case output tunnel
        Copy(local4.n1 local6 )                   // case output tunnel
        Branch(5)
//--- case
        Perch(0)
        Sub(local4.n1 local1 local6)
        Sub(local6 c39 local7)
        videf17(local8 local6 local4.n0)
        IsEQ(local8 c50 local5)
        IsGT(c50 local8 local9)
        videf17(local8 local7 local4.n0)
//--- begin case structure
        BranchIfTrue(3 local9)                    // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfFalse(1 local5)                   // CaseStructure test
//--- default case
        Convert(local8 local10)
        videf29(local11 local10)
        Sub(local6 c39 local7)
        ArrayReplaceElt(local12 local4.n0 local7 local11)
        Copy(local12 local14 )                    // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Add(local8 c39 local7)
        Convert(local7 local10)
        Sub(local6 c39 local7)
        ArrayReplaceElt(local13 local4.n0 local7 local10)
        Copy(local13 local14 )                    // case output tunnel
//--- end case structure
        Perch(2)
        Copy(local14 local15 )   // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(local4.n0 local15 ) // case output tunnel
//--- end case structure
        Perch(4)
        ArrayLength(local15 local7 )
        Sub(local7 local6 local7)
        ArraySubset(local16 local15 local6 local7)
        Copy(local16 local17 )                    // case output tunnel
        Copy(local1 local6 )                      // case output tunnel
//--- end case structure
        Perch(5)
        Copy(local4 local3 )
        Copy(local17 local3.n0 )                  // bundle
        Copy(local6 local3.n1 )                   // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Shift.vi
define(videf23 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // Shifted A
        i(dv(.Int32 1) local1)   // Shift by
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(dv(.Boolean false) local3)   // Normalize?
        e(.Int32 local5)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // Normalized A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // Normalized A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // Normalized A
    )
        clump(1
//--- begin case structure
        BranchIfEQ(2 local1 c38)             // CaseStructure test
//--- default case
        Add(local2.n1 local1 local5)
        Copy(local2 local6 )
        Copy(local5 local6.n1 )                   // bundle
//--- begin case structure
        BranchIfTrue(0 local3)                    // CaseStructure test
//--- default case
        Copy(local6 local8 )                      // case output tunnel
        Branch(1)
//--- case
        Perch(0)
        videf19(local7 * local6)
        Copy(local7 local8 )                      // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local8 local9 )     // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Copy(local2 local9 )     // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local9 local4 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: SimpleCalcPi.vi
define(videf30 dv(.VirtualInstrument (
    c(
        e(dv(.Int32 50) local1)   // Digits
        e(dv(.String '') local2)   // Results
        e(dv(a(.UInt32 *) () ) local3)   // Array
        e(dv(.Double 0.000000) local4)   // x/y
        e(.Double local5)
        e(.Int32 local6)
        e(.Int32 local7)
        e(.UInt32 local8)   // millisecond timer value
        e(.Int32 local9)
        e(.Int32 local10)
        e(.Int32 local11)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // A
        e(.Boolean local14)
        e(.Int32 local15)
        e(.Int32 local16)
        e(.Int32 local17)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // Result
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // (N!)^4
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local20)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local21)   // N!
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local22)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local23)   // A/B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local24)   // Square Root A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local25)   // A / Scalar
        e(.String local26)   // Results
        e(.String local27)   // Results
        e(.UInt32 local28)   // millisecond timer value
        e(a(.UInt32 *) local29)
        e(a(.UInt32 *) local30)
        e(.Double local31)
    )
        clump(1
        Convert(c0 local5)
        Copy(c38 local6 )                         // initialize i
        Sub(c0 c39 local7)
        ArrayResize(local29 c0)
//--- begin loop
        Perch(0)
        GetMillisecondTickCount(local8)
        Add(c4 local1 local9)
        Quotient(local9 c3 local10)
        Trigger(1)                                // fork
        videf31(local24 local9 c1)
        videf16(local25 local9 c5 local24)
        Wait(1)                                   // join
        videf11(local25 local12 local11 * local26)
        Copy(local26 local27 )                    // tunnel out
        GetMillisecondTickCount(local28)
        Sub(local28 local8 local8)
        Copy(local27 local2 )
        Println(local27)
        Printf("// It took %s\n" local8)
        ArrayReplaceElt(local29 local29 local6 local8)
        BranchIfGE(1 local6 local7)
        Add(local6 c39 local6)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local29 local30 )   // tunnel out
        Copy(local30 local3 )
        AddElements(local30 local8)
        Convert(local8 local31)
        Div(local31 local5 local4)
//--- end of vi
    )
    clump(1
        Copy(c38 local11 )                        // initialize i
        Copy(c2 local12 )                         // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local12 local13 )   // LSR copy into inner wire
        IsGT(local10 local11 local14)
        Mul(local11 c7 local15)
        Mul(local11 c7 local16)
        Mul(c9 local11 local17)
        Add(c8 local17 local17)
        Trigger(2)                                // fork
        Trigger(3)                                // fork
        videf25(local21 local15)
        videf26(local21 local17 * local22)
        Wait(2)                                   // join
        videf13(local22 local20 local9 local23)
        videf1(local12 local23 local13)
        BranchIfFalse(1 local14)                  // Loop condition terminal
        Add(local11 c39 local11)                  // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(1)
        Copy(local9 local11 )    // tunnel out
    )
    clump(1
        videf24(local19 local11)
        Wait(3)                                   // join
        videf12(local20 local19 local18)
    )
    clump(1
        videf32(local18 c6 local16)
    )
)))
//---------------------------------------------------
//VI Definition: Sqrt.vi
define(videf31 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // Square Root A
        i(dv(.Int32 100) local2)   // digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((0 0 4 )  0 false )) local1)   // A
    )
    c(
        e(dv(.Int32 0) local3)
        e(.Int32 local5)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A/B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A / Scalar
        e(.Int32 local8)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // A/B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // A/B
        e(.Boolean local13)   // Equal
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local16)   // A-B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A/B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // Answer
    )
        clump(1
        Add(local2 c39 local5)
        Trigger(1)                                // fork
        videf16(local7 local5 c47 local1)
        Wait(1)                                   // join
        Copy(c38 local8 )                         // initialize i
        Copy(c46 local9 )                         // Pre-Loop copy into LSR
        Copy(local6 local11 )                     // Pre-Loop copy into LSR
//--- begin loop
        Perch(0)
        Copy(local9 local10 )    // LSR copy into inner wire
        Copy(local11 local12 )                    // LSR copy into inner wire
        Copy(local12 local9 )
        videf6(local13 local2 local10 local12)
//--- begin case structure
        BranchIfTrue(1 local13)                   // CaseStructure test
//--- default case
        videf12(local14 local12 local12)
        videf12(local15 local14 local7)
        videf33(local16 local15 c45)
        videf12(local17 local12 local16)
        Copy(c48 local13 )                        // case output tunnel
        Copy(local17 local18 )                    // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Copy(c49 local13 )       // case output tunnel
        Copy(local12 local18 )                    // case output tunnel
//--- end case structure
        Perch(2)
        videf7(local11 local5 local18)
        Copy(local8 local3 )
        BranchIfFalse(3 local13)                  // Loop condition terminal
        Add(local8 c39 local8)                    // increment i
//--- end loop
        Branch(0)                                 // loop again
        Perch(3)
        videf12(local19 local11 local1)
        videf19(local4 * local19)
//--- end of vi
    )
    clump(1
        videf13(c46 local1 local2 local6)
    )
)))
//---------------------------------------------------
//VI Definition: Subtract.vi
define(videf33 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A-B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(.Boolean local4)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // B
    )
        clump(1
        Not(local2.n2 local4 )
        Copy(local2 local5 )
        Copy(local2.n0 local5.n0 )                // bundle
        Copy(local2.n1 local5.n1 )                // bundle
        Copy(local4 local5.n2 )                   // bundle
        videf1(local3 local5 local1)
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Unsigned Unsafe Subtract.vi
define(videf3 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A-B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(.Boolean local4)
        e(.Int32 local5)   // Decimal Index
        e(.Int32 local6)   // B Index
        e(.Int32 local7)   // A Index
        e(.Int32 local8)   // Loop Count
        e(.Int32 local9)
        e(.Int8 local10)
        e(.Int8 local11)
        e(.Int32 local12)   // A Index
        e(.Int32 local13)   // B Index
        e(a(.Int8 *) local14)
        e(a(.Int8 *) local15)
        e(.Int8 local16)   // digit
    )
        clump(1
        IsGT(local1.n1 local2.n1 local4)
        Copy(local2.n1 local5 )
        BranchIfFalse(0 local4)
        Copy(local1.n1 local5 )
        Perch(0)
        videf9(local6 local7 local8 local2.n1 local2.n0 local1.n1 local1.n0)
        Sub(local8 c39 local8)
        Copy(c38 local9 )                         // initialize i
        Copy(c14 local10 )                        // Pre-Loop copy into LSR
        Copy(c17 local14 )                        // Pre-Loop copy into LSR
//--- begin loop
        Perch(1)
        Copy(local10 local11 )   // LSR copy into inner wire
        Copy(local7 local12 )                     // LSR copy into inner wire
        Copy(local6 local13 )                     // LSR copy into inner wire
        Copy(local14 local15 )                    // LSR copy into inner wire
        Add(local13 c39 local6)
        Add(local12 c39 local7)
        ArrayIndexElt(local1.n0 local12 local16)
        Sub(local16 local11 local11)
        ArrayIndexElt(local2.n0 local13 local16)
        Sub(local11 local16 local11)
        IsLT(local11 c14 local4)
//--- begin case structure
        BranchIfFalse(2 local4)                   // CaseStructure test
//--- default case
        Add(local11 c16 local11)
        Copy(c18 local16 )                        // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Copy(c14 local16 )       // case output tunnel
//--- end case structure
        Perch(3)
        ArrayConcatenate( local14 local15 local11)
        Copy(local16 local10 )
        IsGT(local8 local9 local4)
        BranchIfFalse(4 local4)                   // Loop condition terminal
        Add(local9 c39 local9)                    // increment i
//--- end loop
        Branch(1)                                 // loop again
        Perch(4)
        Copy(local1 local3 )
        Copy(local14 local3.n0 )                  // bundle
        Copy(local5 local3.n1 )                   // bundle
        Copy(c13 local3.n2 )                      // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: XtoY.vi
define(videf32 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local3)   // Result
        i(dv(.Int32 0) local2)   // X
        i(dv(.Int32 0) local1)   // Y
    )
    c(
        e(.Boolean local4)
        e(.Int32 local5)   // X
        e(.Int32 local6)   // X
        e(.Int32 local7)   // Y
        e(.Int32 local8)   // Y
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A x Scalar
        e(.Boolean local11)
        e(.Boolean local12)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local16)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A x Scalar
    )
        clump(1
        IsNE(local1 c38 local4)
//--- begin loop
        Perch(0)
        Copy(local5 local6 )     // LSR copy into inner wire
        Copy(local7 local8 )                      // LSR copy into inner wire
        Copy(local9 local10 )                     // LSR copy into inner wire
        Copy(local1 local7 )
        Sub(local1 local8 local8)
        IsGE(local8 c38 local11)
        And(local4 local11 local11)
        Copy(local2 local5 )
        IsEQ(local2 local6 local12)
        And(local11 local12 local11)
//--- begin case structure
        BranchIfTrue(5 local11)                   // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfEQ(3 local1 c38)             // CaseStructure test
//--- default case
        Sub(local1 c39 local6)
        Copy(c38 local8 )                         // initialize i
        Copy(c32 local13 )                        // Pre-Loop copy into LSR
//--- begin loop
        Perch(1)
        Copy(local13 local14 )   // LSR copy into inner wire
        videf26(local14 local2 * local13)
        IsGT(local6 local8 local11)
        BranchIfFalse(2 local11)                  // Loop condition terminal
        Add(local8 c39 local8)                    // increment i
//--- end loop
        Branch(1)                                 // loop again
        Perch(2)
        Copy(local13 local15 )   // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(c32 local15 )       // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local15 local18 )   // case output tunnel
        Branch(8)
//--- case
        Perch(5)
        Sub(local8 c39 local6)
        Copy(c38 local8 )                         // initialize i
        Copy(local10 local16 )                    // Pre-Loop copy into LSR
//--- begin loop
        Perch(6)
        Copy(local16 local17 )   // LSR copy into inner wire
        videf26(local17 local2 * local16)
        IsGT(local6 local8 local11)
        BranchIfFalse(7 local11)                  // Loop condition terminal
        Add(local8 c39 local8)                    // increment i
//--- end loop
        Branch(6)                                 // loop again
        Perch(7)
        Copy(local16 local18 )   // case output tunnel
//--- end case structure
        Perch(8)
        Copy(local18 local9 )
        BranchIfFalse(9 c13)                      // Loop condition terminal
//--- end loop
        Branch(0)                                 // loop again
        Perch(9)
        Copy(local9 local3 )
//--- end of vi
    )
)))
enqueue(videf30)

// Copyright (c) 2020 National Instruments
// SPDX-License-Identifier: MIT

// Type defaults are constant it should not be possible to set
// the default value of a dv type once it has been created. 

// Are these defining values or types. Well 
 
// (1) A global Queue that can be shared across VIs
define(MyGlobalVar var(.Queue))

/*
Dynamic Types are allocated in the same TypeManager used by the executions context 
Dynamic types are always allocated after static types ( e.g. those defined as part of the load 
process.  This means fairly obviously that no static can be dependent on a dynamic type.

This allows dynamic types used within a context to be freed up in the background.
To make this safe dynamic types are always accessed through a cookie. When the type is forcefully deleted 
then the  cookie is removed from the dictionary. 
 
*/



/* 


Functional types these are a bit like tmplates though perhaps a bit more flexible.
though that is not always good thing  


Consider 

1.  A simple variable definition  the type is a simple type already defined
    define(Var1 .Int32)
     
     
2.  A built in functional type such as the array aggrigatore 
    define(Var2 a(.Int32 10))
    
    Note that "a" looks a bit like a function call a vararg function call that 
    takes a type and a varialble list of parameters.
    
3.  VIA defined functional types
    define(Var2 Queue(.Int32 10))
    
    Some notes.
    1. Queue must be a "type" there is no "." prefix since the context indicates
    the usage type. ("." are not used on function calls either.
    
    The loader will see "Queue" and it will not match an built in type constructipon tool
    so it will treat it as a type function call. 
    
    thus it will look for the parameters build a call frame and call it. The resulting type
    will be the type used. Does the type need to be in a parent scope? Well it helps a lot.
     since the function needs to be fully formed and usable when this type is used. 
     This is not unreasonable for library typess like queues Stacks etc. 
     
     So what does the Queue type look like? Declarative functional no data flow
     
    Queue is a VI perhaps there is a naming convention. Queue-Type.
    
*/ 
define(TestAllocateValues dv(.VirtualInstrument (
    c(
        e(dv(.String "") varNameEmpty)
        e(dv(.String "GlobalVar1") varName1)
        e(dv(.String "GlobalVar2") varName2)
        e(.Queue  Queue1)

        e(dv(.Type  .Int32) sourceType)
        e(.Type  dynamicType1)
        
        e(.Type  dynamicType2)
        e(.Int32  n)
        e(dv(.Int32 5) n2)
        
        e(.String  s)
        e(dv(.String "Hello") s2)

        e(.Type  vType)
    )
    clump (1
        Printf("--------------\n")

        // Basic tests for static variables
        Printf("Static definitions before copy  <%s> <%s> \n" Int32_4 Int32_5)
        Copy(Int32_5 Int32_4)
        Printf("Static definitions after copy  <%s> <%s> \n" Int32_4 Int32_5)
    
        // Allocate a named value 
        TypeManagerObtainValueType(* varName1 .Int32 True dynamicType1)  
                      
        // Printing the type should print the type's name.
        Printf(" Name  for dynamically allocated type is <%s> \n" dynamicType1)
        TypeBaseType(dynamicType1 vType)
        Printf(" Base Type of dynamic type is <%s>\n" vType)

        TypeGetValue(dynamicType1 n)
        Printf("Value of dynamic var is %s\n" n)
        TypeSetValue(dynamicType1 n2)
        Printf("Try to change it to %s\n" n2)
        TypeGetValue(dynamicType1 n)
        Printf("Value of dynamic var is %s\n" n)

        // (TM Type forceDestroy name)    
        // TypeManagerReleaseValueType(* dynamicType1 * name)  

        TypeGetValue(.MyGlobalVar n)
        Printf("Value read is %s\n" n)

        Printf("--------------\n")
        // Get a new type over write the local variable
        TypeManagerObtainValueType(* varName2 .String True dynamicType1)        

        // Printing the type should print the type's name.
        Printf(" Name  for dynamically allocated type is <%s> \n" dynamicType1)
        TypeBaseType(dynamicType1 vType)
        Printf(" Base Type of dynamic type is <%s>\n" vType)

        TypeGetValue(dynamicType1 s)
        Printf("Value of dynamic var is %s\n" s)
        TypeSetValue(dynamicType1 s2)
        Printf("Try to change it to %s\n" s2)
        TypeGetValue(dynamicType1 s)
        Printf("Value of dynamic var is %s\n" s)

        // Check default name
        TypeManagerObtainValueType(* varName1 sourceType * dynamicType2)
        Printf("Look up dynamic variable by name <%s> =>  <%s>\n" varName1 dynamicType2)

        // Check default name
        TypeManagerObtainValueType(* varName2 sourceType * dynamicType2)
        Printf("Look up dynamic variable by name <%s> =>  <%s>\n" varName2 dynamicType2)
        
        // Another type of empty name
        TypeManagerObtainValueType(* varNameEmpty sourceType * dynamicType2)
        Printf("Look up dynamic variable by no name <%s>\n" dynamicType2)

    )
) ) )

enqueue(TestAllocateValues)

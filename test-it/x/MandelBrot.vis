// Copyright (c) 2020 National Instruments
// SPDX-License-Identifier: MIT

MandelBrot((.ComplexDouble a) (.ComplexDouble z))
{
    foreach(
        i = 0..49;
        ----
        z = (z^2) + a;
    )
}

//-------------------------------------
// using some pythonesque style

Int32 = BitBlock(SignedInt 32)

Mandel = (a z) -> (
    foreach(
        i = 0..49;
        ----
        z = (z^2) + a;
    )
)

Message = "Hello, World"

//Pattern function
Message = (a b) -> "Hello, $(a)World $(b)"

// Iterators
// Generators
// Interpolatoers ( embrace quatum, retina displays,etc)

/* 
 a[~x]  approximate?

 array: index by ordinal
 cluster: index by field name ( static dictionary) , or by ordinal??
    dictionary: idex by name, including late bindind. could have same grammar
    
    
    a.TopLeft  ; if a is dictionary then use name as string constant and add dynamic 
    resolver as prefix instruction.
    
    Add(a.TopLeft a.TopRight)
    
    instruction can have hard coded address. 

 
*/


 

// Pascal uses a name:type syntax
// JSON uses fieldname:value syntax ( same as IGL does) 

// Considering a type:name:value option 
// or type:name=value (though this clashes with JSON)
// value can be simple ( e.g. true, 0 , 4.5, "Hello")
// or compound (1,2,3,4).
// do distinction between cluster and array

// Default type could be double. (e.g. real number)

Square = (x) -> {x * x}


Mandel = (Int32:a ComplexDouble:z) -> (
    foreach(
        i = 0..49;
        ----
        z = (z^2) + a;
    )
)



define Mandel(maxIter, out image)
    for x in range(0, 50)
        for y in range(-1, 1)
            image[x,y] = mandel(Complex(x,y),maxIter)
        

define Mandel(maxIter, out image)
    parfor x in range(0, 50)
        parfor y in range(-1, 1)
            image[x,y] = mandel(Complex(x,y),maxIter)

define Mandel(maxIter, out image)
    // two generators that run in parallel
    for x in range(0, 50)
    for y in range(-1, 1)
            image[x,y] = mandel(Complex(x,y),maxIter)

// two common ways to create a generator
    parfor x in range(0, 50, increment:1)
    parfor x in range(0, 50, steps:50)


    parfor x in range(0, 50, steps:50)
    parfor y in range(-1, 1, steps:x.length)


    // two generators that run in matrix parallel
    parfor x in range(0, 50, steps:50)
    parfor y in range(-1, 1)   // Steps determined by first parallel generator
        image[x,y] = mandel(Complex(x,y),maxIter)

//vipyr

    ----    


// Images and vectors should have fractional indexing





//-------------------------------------
MandelBromMain()
{
    var time = GetMicrosecondTickCount(^);    
    loop {    
        x = Iterator(-2.0, 0.5, 50);
        ----
        loop {
            y = Iterator(1.0, -1.0, 50);
            ----
            if (Abs(Mandelbrot(ComplexDouble(x, y),^)) < 2.0) {
                StreamWrite(file char1 err)
            }
        }
    }
    time = GetMicrosecondTickCount(^) - time;
    Printf("Time to calculate %s", t0);
}   
//-------------------------------------
MandelBromMain()
{
    var time = GetMicrosecondTickCount(^);    
    loop {    
        x = Iterator(-2.0, 0.5, 50);
        y = Iterator(1.0, -1.0, 50);
        ----
        if (Abs(Mandelbrot(ComplexDouble(x, y),^)) < 2.0) {
            StreamWrite(file char1 err)
        }
        //  seems to explicit, there should be no 
        // order implied.
        if (y.Next()) {
            y.Reset();
            if(x.Next())
                break; 
        }
    }
    time = GetMicrosecondTickCount(^) - time;
    Printf("Time to calculate %s", t0);
}   


    


define(MandelbrotMain dv(.VirtualInstrument (
    // Dataspace
    c(
        e(.StdOut file)
        e(.Int32 err)
        e(dv(.String '.')    char1)
        e(dv(.String '#')    char2)
        e(dv(.String '\n')   lineFeed)

        e(dv(.Double 1.0)    y)
        e(dv(.Double 1.0)    yFirst)
        e(dv(.Double -1.0)   yLast)
        e(dv(.Double -0.05)  yDelta)

        e(.Double   x)
        e(dv(.Double -2.0)   xFirst)
        e(dv(.Double 0.5)    xLast)
        e(dv(.Double 0.0315) xDelta)

        e(dv(.Double 2)      two)
        e(.ComplexDouble    cmplxIn)
        e(.ComplexDouble    cmplxOut)
        e(.Double           abs)

        e(.Int64            tStart)
        e(.Int64            tDone)
        )
    clump (1
        GetMicrosecondTickCount(tStart)

        Perch(0)
            Copy(xFirst x)
            Perch(1)
                // Explicit constructor for simple cluster types is not needed
                // fields can be set directly
                Copy(x cmplxIn.real)
                Copy(y cmplxIn.imaginary)
                Mandelbrot(cmplxIn cmplxOut)
                Absolute(cmplxOut abs)
                BranchIfLT(2 abs two)
                    StreamWrite(file char1 err)
                    Branch(3)
                Perch(2)
                    StreamWrite(file char2 err)
                Perch(3)
            Add(x  xDelta  x)
            BranchIfLE(1 x xLast)
        StreamWrite(file lineFeed err)
        Add(y yDelta y)
        BranchIfGE(0 y yLast)

        GetMicrosecondTickCount(tDone)
        Sub(tDone tStart tDone)
        // coment out so unit tests will not reject output
        // Printf("Time to calculate Mandelbrot: %s microseconds" tDone)
    )
) ) )
enqueue(MandelbrotMain)

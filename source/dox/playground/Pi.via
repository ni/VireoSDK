// Copyright (c) 2020 National Instruments
// SPDX-License-Identifier: MIT

// Calculate Pi to 50 digits

// Autogenerated Vireo assembly file
// Generated on Fri Jun  6 13:34:53 2014

define (c0 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((8 )  0 false )) )
define (c1 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((0 )  0 false )) )
define (c2 dv(.Int32 8) )
define (c3 dv(.Int32 6) )
define (c4 dv(.Int32 9801) )
define (c5 dv(.Int32 396) )
define (c6 dv(.Int32 4) )
define (c7 dv(.Int32 1103) )
define (c8 dv(.Int32 26390) )
define (c9 dv(.Int32 0) )
define (c10 dv(a(.Int8 *) () ) )
define (c11 dv(.Boolean false) )
define (c12 dv(.Int8 0) )
define (c13 dv(.Int8 9) )
define (c14 dv(.Int8 10) )
define (c15 dv(.Int32 0) )
define (c16 dv(.Boolean false) )
define (c17 dv(.Int8 0) )
define (c18 dv(.Int8 1) )
define (c19 dv(.Boolean false) )
define (c20 dv(.Boolean true) )
define (c21 dv(a(.Int8 *) () ) )
define (c22 dv(c(
    e(.Int32 n0)
    e(.Int32 n1)
) (5 -1 )) )
define (c23 dv(.Int32 -1) )
define (c24 dv(.Boolean false) )
define (c25 dv(.Int32 9) )
define (c26 dv(.Int32 1) )
define (c27 dv(.Int8 0) )
define (c28 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) (()  0 false )) )
define (c29 dv(.Int32 0) )
define (c30 dv(.Int32 1) )
define (c31 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) () ) )
define (c32 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) (()  0 false )) )
define (c33 dv(.Int32 7) )
define (c34 dv(.Int32 2) )
define (c35 dv(.Int32 0) )
define (c36 dv(a(.Int8 *) (0 ) ) )
define (c37 dv(.Boolean false) )
define (c38 dv(.Int32 10) )
define (c39 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((1 )  0 false )) )
define (c40 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) (((1 0 0 0 )  0 false ) ((1 0 0 0 )  0 false ) ((6 1 0 0 )  0 false ) ((6 9 2 1 )  0 false ) ((6 7 7 1 3 3 0 0 )  0 false ) ((0 0 0 0 6 3 7 0 2 0 0 0 )  0 false ) ((0 0 0 0 6 5 8 3 7 8 6 2 )  0 false ) ((0 0 0 0 6 5 2 8 2 1 4 2 5 4 6 0 )  0 false ) ((0 0 0 0 6 7 5 6 3 3 9 2 8 0 9 2 4 6 2 0 )  0 false ) ((0 0 0 0 6 3 1 5 7 2 7 7 2 1 3 1 2 1 0 4 3 7 1 0 )  0 false ) ((0 0 0 0 0 0 0 0 6 3 1 5 7 2 7 7 2 1 3 1 2 1 0 4 3 7 1 0 )  0 false ) ) ) )
define (c41 dv(a(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) *) (((1 )  0 false ) ((1 )  0 false ) ((2 )  0 false ) ((6 )  0 false ) ((4 2 )  0 false ) ((0 2 1 )  0 false ) ((0 2 7 )  0 false ) ((0 4 0 5 )  0 false ) ((0 2 3 0 4 )  0 false ) ((0 8 8 2 6 3 )  0 false ) ((0 0 8 8 2 6 3 )  0 false ) ) ) )
define (c42 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((1 )  0 false )) )
define (c43 dv(.UInt8 35) )
define (c44 dv(.Int8 46) )
define (c45 dv(.Int32 1) )
define (c46 dv(.UInt8 48) )
define (c47 dv(.Int8 48) )
define (c48 dv(.UInt8 0) )
define (c49 dv(.Int8 45) )
define (c50 dv(.Int32 0) )
define (c51 dv(a(.Int8 *) () ) )
define (c52 dv(.Int32 10) )
define (c53 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((5 1 )  1 false )) )
define (c54 dv(c(
    e(a(.Int8 *) n0)   // Array Num
    e(.Int32 n1)   // Decimal Index
    e(.Boolean n2)   // stop
) ((2 4 8 2 8 2 )  5 false )) )
define (c55 dv(.Int32 2) )
define (c56 dv(.Boolean true) )
define (c57 dv(.Boolean false) )
define (c58 dv(.Int32 5) )
define (c59 dv(.Int8 2) )
define (c60 dv(.Int32 1) )
//---------------------------------------------------
//VI Definition: Add.vi
define (videf1 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A+B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(a(.Int8 *) local4)   // Array Num
        e(.Int32 local5)   // Decimal Index
        e(.Boolean local6)   // stop
        e(a(.Int8 *) local7)   // Array Num
        e(.Int32 local8)   // Decimal Index
        e(.Boolean local9)   // stop
        e(.Boolean local10)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // Larger
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // Smaller
        e(.Boolean local13)   // Equal
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // A-B
        e(a(.Int8 *) local15)   // Array Num
        e(.Int32 local16)   // Decimal Index
        e(.Int32 local17)   // Decimal Index
        e(.Int32 local18)
        e(.Int32 local19)
        e(.Int32 local20)
        e(.Int32 local21)
        e(.Int32 local22)   // Digits
        e(.Int8 local23)
        e(.Int8 local24)
        e(a(.Int8 *) local25)
        e(a(.Int8 *) local26)
        e(.Int8 local27)   // digit
        e(.Int8 local28)   // digit
        e(.Int8 local29)
        e(.Int8 local30)
        e(a(.Int8 *) local31)
    )
        clump(1
        Copy(local1.n0 local4 )                   // unbundle
        Copy(local1.n1 local5 )                   // unbundle
        Copy(local1.n2 local6 )                   // unbundle
        Copy(local2.n0 local7 )                   // unbundle
        Copy(local2.n1 local8 )                   // unbundle
        Copy(local2.n2 local9 )                   // unbundle
        IsEQ(local6 local9 local10)
//--- begin case structure
        BranchIfTrue(3 local10)                   // CaseStructure test
//--- default case
        videf2(local1 local2 local11 local12 local10 local13)
        BranchIfTrue(0 local10)
        Copy(local9 local6 )
//--- begin case structure
        Perch(0)
        BranchIfTrue(1 local13)  // CaseStructure test
//--- default case
        videf3(local14 local12 local11)
        Copy(local14.n0 local15 )                 // unbundle
        Copy(local14.n1 local16 )                 // unbundle
        Branch(2)
//--- case
        Perch(1)
        Copy(c10 local15 )       // case output tunnel
        Copy(c9 local16 )                         // case output tunnel
        Copy(c11 local6 )                         // case output tunnel
//--- end case structure
        Perch(2)
        Copy(local15 local4 )    // case output tunnel
        Copy(local16 local5 )                     // case output tunnel
        Copy(local1 local11 )                     // case output tunnel
        Branch(15)
//--- case
        Perch(3)
        IsGT(local5 local8 local10)
        Copy(local8 local17 )
        BranchIfFalse(4 local10)
        Copy(local5 local17 )
        Perch(4)
        Sub(local5 local17 local18)
        Sub(local8 local17 local19)
        ArrayLength(local4 local20 )
        ArrayLength(local7 local21 )
        videf4(local22 local8 local21 local5 local20)
        Sub(local22 c60 local5)
        Copy(c12 local24 )                        // Pre-Loop copy into LSR
        Copy(c10 local26 )                        // Pre-Loop copy into LSR
        Copy(c50 local8 )                         // initialize i
//--- begin while loop
        Perch(5)
        Copy(local24 local23 )   // LSR copy into inner wire
        Copy(local26 local25 )                    // LSR copy into inner wire
        IsGT(local5 local8 local10)
        Add(local18 local8 local20)
        ArrayIndexElt(local4 local20 local27)
        Add(local8 local19 local20)
        ArrayIndexElt(local7 local20 local28)
        Add(local27 local28 local27)
        Add(local27 local23 local23)
        IsGT(local23 c13 local13)
//--- begin case structure
        BranchIfTrue(6 local13)                   // CaseStructure test
//--- default case
        Copy(c12 local27 )                        // case output tunnel
        Branch(9)
//--- case
        Perch(6)
        Copy(local23 local29 )   // Pre-Loop copy into LSR
        Copy(c12 local30 )                        // Pre-Loop copy into LSR
//--- begin while loop
        Perch(7)
        Copy(local29 local27 )   // LSR copy into inner wire
        Copy(local30 local28 )                    // LSR copy into inner wire
        Add(local28 c18 local30)
        Sub(local27 c14 local27)
        Copy(local27 local29 )
        IsGE(local27 c14 local13)
        BranchIfFalse(8 local13)                  // Loop condition terminal
        Branch(7)                                 // loop again
//--- end while loop
        Perch(8)
        Copy(local29 local23 )   // case output tunnel
        Copy(local30 local27 )                    // case output tunnel
//--- end case structure
        Perch(9)
        Copy(local27 local24 )
        ArrayConcatenate( local26 local25 local23)
        BranchIfFalse(10 local10)                 // Loop condition terminal
        Add(local8 c60 local8)                    // increment i
        Branch(5)                                 // loop again
//--- end while loop
        Perch(10)
        IsEQ(local24 c27 local10)
//--- begin case structure
        BranchIfTrue(13 local10)                  // CaseStructure test
//--- default case
        Quotient(local24 c14 local23)
        Remainder(local24 c14 local27)
        IsNE(local23 c27 local10)
        Copy(local26 local31 )                    // Pre-Loop copy into LSR
//--- begin while loop
        Perch(11)
        Copy(local31 local4 )   // LSR copy into inner wire
        ArrayConcatenate( local31 local4 local27)
        BranchIfFalse(12 local10)                 // Loop condition terminal
        Branch(11)                                // loop again
//--- end while loop
        Perch(12)
        Copy(local31 local4 )   // case output tunnel
        Branch(14)
//--- case
        Perch(13)
        Copy(local26 local4 )   // case output tunnel
//--- end case structure
        Perch(14)
        Copy(local17 local5 )   // case output tunnel
        Copy(local9 local6 )                      // case output tunnel
        Copy(local1 local11 )                     // case output tunnel
//--- end case structure
        Perch(15)
        Copy(local11 local3 )
        Copy(local4 local3.n0 )                   // bundle
        Copy(local5 local3.n1 )                   // bundle
        Copy(local6 local3.n2 )                   // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: CalcDivideDigits.vi
define (videf5 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int32 0) local4)   // decimal Ofst 2
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 0) local2)   // decimal Ofst
        i(dv(.Int32 0) local3)   // Array Size
    )
    c(
        e(.Boolean local5)
        e(.Int32 local6)
    )
        clump(1
        IsGT(local2 local3 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        Sub(local3 local2 local6)
        Add(local6 local1 local6)
        Branch(1)
//--- case
        Perch(0)
        Copy(local1 local6 )     // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local6 local4 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: CompareToDigits.vi
define (videf6 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Boolean false) local4)   // Equal
        i(dv(.Int32 0) local1)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local3)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local2)   // A 2
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A rounded to Digits
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A rounded to Digits
    )
        clump(1
        Trigger(1)                                // fork
        videf7(local6 local1 local3)
        Wait(1)                                   // join
        videf8(local5 local6 * local4)
//--- end of vi
    )
    clump(1
        videf7(local5 local1 local2)
    )
)))
//---------------------------------------------------
//VI Definition: ComputeAddSize.vi
define (videf4 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int32 0) local5)   // Digits
        i(dv(.Int32 0) local3)   // B Position
        i(dv(.Int32 0) local1)   // B Array Size
        i(dv(.Int32 0) local4)   // A Position
        i(dv(.Int32 0) local2)   // A Array Size
    )
    c(
        e(.Int32 local6)
        e(.Boolean local7)
        e(.Int32 local8)   // B Position
        e(.Int32 local9)
    )
        clump(1
        Sub(local1 local3 local6)
        IsGT(local3 c50 local7)
        Copy(c15 local8 )
        BranchIfFalse(0 local7)
        Copy(local3 local8 )
        Perch(0)
        Sub(local2 local4 local9)
        IsGT(local9 local6 local7)
        BranchIfFalse(1 local7)
        Copy(local9 local6 )
        Perch(1)
        IsGT(local4 c50 local7)
        Copy(c15 local9 )
        BranchIfFalse(2 local7)
        Copy(local4 local9 )
        Perch(2)
        IsGT(local9 local8 local7)
        BranchIfFalse(3 local7)
        Copy(local9 local8 )
        Perch(3)
        Add(local6 local8 local5)
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: ComputeUUSSize.vi
define (videf9 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int32 0) local3)   // B Index
        o(dv(.Int32 0) local4)   // A Index
        o(dv(.Int32 0) local7)   // Loop Count
        i(dv(.Int32 0) local1)   // B Array Position
        i(dv(a(.Int8 *) () ) local5)   // BArray
        i(dv(.Int32 0) local2)   // A Array Position
        i(dv(a(.Int8 *) () ) local6)   // A Array Num
    )
    c(
        e(.Boolean local8)
        e(.Int32 local9)   // B Array Position
        e(.Int32 local10)
        e(.Int32 local11)
        e(.Int32 local12)
        e(.Int32 local13)
        e(.Int8 local14)   // digit
        e(.Boolean local15)
    )
        clump(1
        IsGT(local1 c50 local8)
        Copy(c15 local9 )
        BranchIfFalse(0 local8)
        Copy(local1 local9 )
        Perch(0)
        Sub(local1 local2 local10)
        IsLT(local10 c50 local8)
//--- begin case structure
        BranchIfTrue(1 local8)                    // CaseStructure test
//--- default case
        Sub(c50 local10 local11)
        Copy(c15 local10 )                        // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Copy(c15 local11 )       // case output tunnel
//--- end case structure
        Perch(2)
        Copy(local10 local3 )
        Copy(local11 local4 )
        IsGT(local2 c50 local8)
        Copy(c15 local10 )
        BranchIfFalse(3 local8)
        Copy(local2 local10 )
        Perch(3)
        IsGT(local10 local9 local8)
        BranchIfFalse(4 local8)
        Copy(local10 local9 )
        Perch(4)
        ArrayLength(local5 local10 )
        Sub(local10 local1 local10)
        ArrayLength(local6 local11 )
        Sub(local11 c60 local11)
        Copy(c50 local12 )                        // initialize i
//--- begin while loop
        Perch(5)
        IsLE(local12 local11 local8)
        Sub(local11 local12 local13)
        ArrayIndexElt(local6 local13 local14)
        IsEQ(local14 c27 local15)
        And(local15 local8 local8)
        BranchIfFalse(6 local8)                   // Loop condition terminal
        Add(local12 c60 local12)                  // increment i
        Branch(5)                                 // loop again
//--- end while loop
        Perch(6)
        Add(local13 c60 local11)
        Sub(local11 local2 local11)
        IsGT(local11 local10 local8)
        BranchIfFalse(7 local8)
        Copy(local11 local10 )
        Perch(7)
        Add(local10 local9 local7)
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Count Leading Zeros.vi
define (videf10 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(a(.Int8 *) () ) local1)   // Array Num
        o(dv(a(.Int8 *) () ) local2)   // Array Dup
        o(dv(.Int32 0) local3)   // NonZero Count
    )
    c(
        e(.Int32 local4)
        e(.Int32 local5)
        e(.Int32 local6)
        e(.Boolean local7)
        e(.Int8 local8)   // digit
        e(.Boolean local9)
    )
        clump(1
        ArrayLength(local1 local4 )
        Sub(local4 c60 local4)
        Copy(c50 local5 )                         // initialize i
//--- begin while loop
        Perch(0)
        Sub(local4 local5 local6)
        IsGT(local6 c50 local7)
        ArrayIndexElt(local1 local6 local8)
        IsEQ(local8 c27 local9)
        And(local9 local7 local7)
        Copy(local1 local2 )                      // tunnel out
        BranchIfFalse(1 local7)                   // Loop condition terminal
        Add(local5 c60 local5)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Add(local6 c60 local4)
        Copy(local4 local3 )
        BranchIfFalse(2 local9)
        Copy(c50 local3 )
//--- end of vi
        Perch(2)
    )
)))
//---------------------------------------------------
//VI Definition: Display Intermed Text.vi
define (videf11 dv(.VirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 -1) local4)   // Block Out
        o(dv(.String '') local5)   // Results
    )
    c(
        e(.Boolean local6)
        e(.Int32 local7)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A/B
        e(.String local10)   // String
        e(.String local11)   // String Out
    )
        clump(1
        IsGE(local4 c50 local6)
        Sub(local1 c3 local7)
        videf12(local8 local2 local3)
        videf13(c42 local8 local1 local9)
        videf14(local10 local7 local9)
//--- begin case structure
        BranchIfTrue(0 local6)                    // CaseStructure test
//--- default case
        Branch(1)
//--- case
        Perch(0)
        videf15(local11 local4 local10)
        Copy(local11 local10 )                    // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local10 local5 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Div Scalar.vi
define (videf16 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // A / Scalar
        i(dv(.Int32 0) local1)   // Digits
        i(dv(.Int32 0) local2)   // Scalar
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A
    )
    c(
        e(.Boolean local5)
        e(a(.Int8 *) local6)   // Array Num
        e(.Int32 local7)   // Decimal Index
        e(.Int32 local8)
        e(.Int32 local9)   // decimal Ofst 2
        e(.Int32 local10)
        e(.Int32 local11)
        e(.Int32 local12)
        e(a(.Int8 *) local13)
        e(a(.Int8 *) local14)
        e(.Int32 local15)
        e(.Int32 local16)   // digit
        e(.Int8 local17)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // Normalized A
    )
        clump(1
        IsEQ(local2 c50 local5)
//--- begin case structure
        BranchIfTrue(4 local5)                    // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfEQ(2 local2 c60)             // CaseStructure test
//--- default case
        Copy(local3.n0 local6 )                   // unbundle
        Copy(local3.n1 local7 )                   // unbundle
        ArrayLength(local6 local8 )
        videf5(local9 local1 local7 local8)
        Sub(local9 c60 local10)
        Sub(local9 local8 local9)
        Add(local9 local7 local7)
        Copy(c50 local12 )                        // Pre-Loop copy into LSR
        Copy(c51 local14 )                        // Pre-Loop copy into LSR
        Copy(c50 local9 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local12 local11 )   // LSR copy into inner wire
        Copy(local14 local13 )                    // LSR copy into inner wire
        IsGT(local10 local9 local5)
        Sub(local8 local9 local15)
        Sub(local15 c60 local15)
        videf17(local16 local15 local6)
        Add(local16 local11 local11)
        Quotient(local11 local2 local15)
        Remainder(local11 local2 local11)
        Mul(c52 local11 local12)
        Convert(local15 local17)
        ArrayConcatenate( local14 local13 local17)
        BranchIfFalse(1 local5)                   // Loop condition terminal
        Add(local9 c60 local9)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        videf18(local14 local6 *)
        Copy(local3 local18 )
        Copy(local6 local18.n0 )                  // bundle
        Copy(local7 local18.n1 )                  // bundle
        videf19(local19 * local18)
        Copy(local19 local18 )                    // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Copy(local3 local18 )    // case output tunnel
//--- end case structure
        Perch(3)
        Branch(5)
//--- case
        Perch(4)
        Copy(local3 local18 )    // case output tunnel
//--- end case structure
        Perch(5)
        Copy(local18 local4 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Divide.vi
define (videf13 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // B
        i(dv(.Int32 10) local1)   // digits
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // A/B
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // Normalized A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // B copy
        e(.Int32 local7)   // Shifted
        e(.Int32 local8)
        e(.Boolean local9)   // stop
        e(.Boolean local10)   // stop
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local11)   // Arrays of A
        e(.Int32 local12)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // Normalized A
        e(.Boolean local14)
        e(a(.Int8 *) local15)
        e(a(.Int8 *) local16)
        e(.Int32 local17)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local18)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local19)
        e(.Int32 local20)
        e(.Boolean local21)   // A Greater
        e(.Boolean local22)   // Equal
        e(.Boolean local23)
        e(.Int32 local24)
        e(.Int32 local25)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local26)
        e(c(
            e(.Int32 n0)
            e(.Int32 n1)
        ) local27)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local28)   // A-B
        e(.Int8 local29)
    )
        clump(1
        videf20(local2 local3 local5 local6 local7)
        Add(local7 c60 local7)
        Add(local1 local7 local8)
        Sub(local8 c60 local8)
        Copy(local6.n2 local9 )                   // unbundle
        Copy(local5.n2 local10 )                  // unbundle
        IsNE(local10 local9 local9)
        videf21(local11 local6)
        Copy(local5 local13 )                     // Pre-Loop copy into LSR
        Copy(c19 local14 )                        // Pre-Loop copy into LSR
        Copy(c21 local16 )                        // Pre-Loop copy into LSR
        Copy(c50 local12 )                        // initialize i
//--- begin while loop
        Perch(0)
        Copy(local13 local5 )    // LSR copy into inner wire
        Copy(local14 local10 )                    // LSR copy into inner wire
        Copy(local16 local15 )                    // LSR copy into inner wire
//--- begin case structure
        BranchIfTrue(15 local10)                  // CaseStructure test
//--- default case
        Copy(c22 local19 )                        // Pre-Loop copy into LSR
        Copy(c50 local17 )                        // initialize i
//--- begin while loop
        Perch(1)
        Copy(local19 local18 )   // LSR copy into inner wire
        Copy(local18.n0 local20 )                 // unbundle
        ArrayIndexElt(local11 local20 local6)
        videf8(local5 local6 local21 local22)
        IsEQ(local17 c50 local23)
//--- begin case structure
        BranchIfTrue(10 local22)                  // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfTrue(7 local23)                   // CaseStructure test
//--- default case
        Copy(local18.n0 local20 )                 // unbundle
        Copy(local18.n1 local24 )                 // unbundle
        IsGT(local24 c50 local22)
        IsEQ(local22 local21 local23)
//--- begin case structure
        BranchIfTrue(3 local23)                   // CaseStructure test
//--- default case
        Sub(local20 c60 local25)
        BranchIfTrue(2 local22)
        Copy(local20 local25 )
        Perch(2)
        Copy(local18 local26 )
        Copy(local25 local26.n0 )                 // bundle
        Copy(c24 local22 )                        // case output tunnel
        Branch(6)
//--- case
        Perch(3)
        IsNE(local20 c25 local22)
//--- begin case structure
        BranchIfTrue(4 local22)                   // CaseStructure test
//--- default case
        Branch(5)
//--- case
        Perch(4)
        Add(local20 local24 local24)
        IsNE(local24 c50 local23)
        Copy(local24 local20 )                    // case output tunnel
        Copy(local23 local22 )                    // case output tunnel
//--- end case structure
        Perch(5)
        Copy(local18 local27 )
        Copy(local20 local27.n0 )                 // bundle
        Copy(local27 local26 )                    // case output tunnel
//--- end case structure
        Perch(6)
        Copy(local22 local21 )   // case output tunnel
        Branch(9)
//--- case
        Perch(7)
        Copy(local18.n0 local20 )// unbundle
        Copy(c23 local24 )
        BranchIfFalse(8 local21)
        Copy(c26 local24 )
        Perch(8)
        Add(local20 local24 local20)
        Copy(local18 local27 )
        Copy(local20 local27.n0 )                 // bundle
        Copy(local24 local27.n1 )                 // bundle
        Copy(local27 local26 )                    // case output tunnel
        Copy(c20 local21 )                        // case output tunnel
//--- end case structure
        Perch(9)
        Copy(local26 local18 )   // case output tunnel
        Copy(c24 local22 )                        // case output tunnel
        Branch(11)
//--- case
        Perch(10)
        Copy(c24 local21 )      // case output tunnel
        Copy(c20 local22 )                        // case output tunnel
//--- end case structure
        Perch(11)
        Copy(local18 local19 )
        BranchIfFalse(12 local21)                 // Loop condition terminal
        Add(local17 c60 local17)                  // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(12)
        Copy(local19.n0 local17 )// unbundle
        IsNE(local17 c50 local21)
//--- begin case structure
        BranchIfTrue(13 local21)                  // CaseStructure test
//--- default case
        Copy(local5 local6 )                      // case output tunnel
        Branch(14)
//--- case
        Perch(13)
        videf22(local6 local17 local11)
        videf3(local28 local6 local5)
        Copy(local28 local6 )                     // case output tunnel
//--- end case structure
        Perch(14)
        videf23(local28 c23 local6)
        Convert(local17 local29)
        Copy(local28 local5 )                     // case output tunnel
        Copy(local22 local10 )                    // case output tunnel
        Branch(16)
//--- case
        Perch(15)
        Copy(c27 local29 )      // case output tunnel
//--- end case structure
        Perch(16)
        Copy(local10 local14 )
        ArrayConcatenate( local16 local15 local29)
        Copy(local5 local13 )
        IsGT(local8 local12 local10)
        BranchIfFalse(17 local10)                 // Loop condition terminal
        Add(local12 c60 local12)                  // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(17)
        videf18(local16 local15 local8)
        Sub(local8 local7 local7)
        Copy(local13 local4 )
        Copy(local15 local4.n0 )                  // bundle
        Copy(local7 local4.n1 )                   // bundle
        Copy(local9 local4.n2 )                   // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Factorial To the Fourth.vi
define (videf24 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // (N!)^4
        i(dv(.Int32 0) local1)   // N
    )
    c(
        e(.Int32 local3)   // N
        e(.Int32 local4)   // N
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local5)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A x Scalar
        e(.Boolean local7)
        e(.Boolean local8)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // N!
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // Answer
        e(.Int32 local11)
        e(.Int32 local12)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // A x Scalar
        e(.Int32 local14)
    )
        clump(1
//--- begin while loop
        Perch(0)
        Copy(local4 local3 )     // LSR copy into inner wire
        Copy(local6 local5 )                      // LSR copy into inner wire
        IsNE(local3 c50 local7)
        Copy(local1 local4 )
        IsGE(local1 local3 local8)
        And(local8 local7 local7)
//--- begin case structure
        BranchIfTrue(1 local7)                    // CaseStructure test
//--- default case
        videf25(local9 local1)
        videf12(local10 local9 local9)
        videf12(local9 local10 local10)
        Copy(local9 local5 )                      // case output tunnel
        Branch(4)
//--- case
        Perch(1)
        Add(local3 c60 local11)
        Sub(local1 local3 local3)
        Sub(local3 c60 local3)
        Copy(local5 local13 )                     // Pre-Loop copy into LSR
        Copy(c50 local12 )                        // initialize i
//--- begin while loop
        Perch(2)
        Copy(local13 local5 )    // LSR copy into inner wire
        IsGT(local3 local12 local7)
        Add(local11 local12 local14)
        Mul(local14 local14 local14)
        videf26(local5 local14 * local10)
        videf26(local10 local14 * local13)
        BranchIfFalse(3 local7)                   // Loop condition terminal
        Add(local12 c60 local12)                  // increment i
        Branch(2)                                 // loop again
//--- end while loop
        Perch(3)
        Copy(local13 local5 )    // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local5 local6 )
        Copy(local5 local2 )                      // tunnel out
        BranchIfFalse(5 c37)                      // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
//--- end of vi
        Perch(5)
    )
)))
//---------------------------------------------------
//VI Definition: Factorial.vi
define (videf25 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // N!
        i(dv(.Int32 0) local1)   // N
    )
    c(
        e(.Boolean local3)
        e(.Int32 local4)   // N
        e(.Int32 local5)   // N
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A x Scalar
        e(.Boolean local8)
        e(.Boolean local9)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // N!
        e(.Int32 local11)
        e(.Int32 local12)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // N!
        e(.Int32 local14)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // N!
        e(.Int32 local16)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // A x Scalar
    )
        clump(1
        IsGT(local1 c38 local3)
//--- begin while loop
        Perch(0)
        Copy(local5 local4 )     // LSR copy into inner wire
        Copy(local7 local6 )                      // LSR copy into inner wire
        IsNE(local4 c50 local8)
        Copy(local1 local5 )
        IsGE(local1 local4 local9)
        And(local9 local8 local8)
//--- begin case structure
        BranchIfTrue(5 local8)                    // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfTrue(1 local3)                    // CaseStructure test
//--- default case
        ArrayIndexElt(c41 local1 local10)
        Branch(4)
//--- case
        Perch(1)
        Add(c38 c60 local11)
        Sub(local1 c38 local12)
        Sub(local12 c60 local12)
        ArrayIndexElt(c41 c38 local13)
        Copy(local13 local15 )                    // Pre-Loop copy into LSR
        Copy(c50 local14 )                        // initialize i
//--- begin while loop
        Perch(2)
        Copy(local15 local13 )   // LSR copy into inner wire
        Add(local11 local14 local16)
        videf26(local13 local16 * local15)
        IsGT(local12 local14 local8)
        BranchIfFalse(3 local8)                   // Loop condition terminal
        Add(local14 c60 local14)                  // increment i
        Branch(2)                                 // loop again
//--- end while loop
        Perch(3)
        Copy(local15 local10 )   // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local10 local6 )    // case output tunnel
        Branch(8)
//--- case
        Perch(5)
        Add(local4 c60 local11)
        Sub(local1 local4 local4)
        Sub(local4 c60 local4)
        Copy(local6 local17 )                     // Pre-Loop copy into LSR
        Copy(c50 local12 )                        // initialize i
//--- begin while loop
        Perch(6)
        Copy(local17 local6 )    // LSR copy into inner wire
        IsGT(local4 local12 local8)
        Add(local11 local12 local14)
        videf26(local6 local14 * local17)
        BranchIfFalse(7 local8)                   // Loop condition terminal
        Add(local12 c60 local12)                  // increment i
        Branch(6)                                 // loop again
//--- end while loop
        Perch(7)
        Copy(local17 local6 )    // case output tunnel
//--- end case structure
        Perch(8)
        Copy(local6 local7 )
        Copy(local6 local2 )                      // tunnel out
        BranchIfFalse(9 c37)                      // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
//--- end of vi
        Perch(9)
    )
)))
//---------------------------------------------------
//VI Definition: Filter String.vi
define (videf15 dv(.VirtualInstrument (
    c(
        o(dv(.String '') local3)   // String Out
        i(dv(.Int32 0) local1)   // Index
        i(dv(.String '') local2)   // String In
    )
    c(
        e(.Int32 local4)
        e(a(.UInt8 *) local5)   // unsigned byte array
        e(.Int32 local6)
        e(.Int32 local7)
        e(a(.UInt8 *) local8)   // unsigned byte array
        e(.Boolean local9)
        e(.Int32 local10)
    )
        clump(1
        Mul(local1 c2 local4)
        Add(local4 c2 local4)
        Copy(local2 local5 )
        ArrayLength(local2 local6 )
        Sub(local6 local4 local6)
        Sub(local6 c60 local6)
        Copy(local5 local8 )                      // Pre-Loop copy into LSR
        Copy(c50 local7 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local8 local5 )     // LSR copy into inner wire
        IsGT(local6 local7 local9)
        Add(local4 local7 local10)
        ArrayReplaceElt(local8 local5 local10 c43)
        BranchIfFalse(1 local9)                   // Loop condition terminal
        Add(local7 c60 local7)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Copy(local8 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: GreaterNoOutput.vi
define (videf8 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(.Boolean false) local4)   // A Greater
        o(dv(.Boolean false) local3)   // Equal
    )
    c(
        e(a(.Int8 *) local5)   // Array Num
        e(.Int32 local6)   // Decimal Index
        e(.Int32 local7)
        e(a(.Int8 *) local8)   // Array Num
        e(.Int32 local9)   // Decimal Index
        e(.Int32 local10)
        e(.Int32 local11)
        e(.Int32 local12)
        e(.Boolean local13)
        e(.Int8 local14)   // digit
        e(.Boolean local15)
        e(.Int32 local16)
        e(.Int32 local17)
        e(.Boolean local18)
        e(.Int8 local19)   // digit
        e(.Boolean local20)
        e(.Boolean local21)
        e(.Int32 local22)
        e(.Int32 local23)
        e(.Int32 local24)
        e(.Int32 local25)
        e(.Int32 local26)
        e(.Int32 local27)
        e(.Int8 local28)   // digit
        e(.Int8 local29)   // digit
        e(.Boolean local30)
    )
        clump(1
        Copy(local1.n0 local5 )                   // unbundle
        Copy(local1.n1 local6 )                   // unbundle
        ArrayLength(local5 local7 )
        Sub(local7 c60 local7)
        Copy(local2.n0 local8 )                   // unbundle
        Copy(local2.n1 local9 )                   // unbundle
        ArrayLength(local8 local10 )
        Sub(local10 c60 local10)
        Trigger(1)                                // fork
        Copy(local10 local17 )                    // Pre-Loop copy into LSR
//--- begin while loop
        Perch(0)
        Copy(local17 local16 )   // LSR copy into inner wire
        Sub(local16 c60 local17)
        IsGE(local16 local9 local18)
        ArrayIndexElt(local8 local16 local19)
        IsEQ(local19 c27 local20)
        And(local20 local18 local18)
        BranchIfFalse(1 local18)                  // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Add(local16 c60 local16)
        Sub(local16 local9 local16)
        IsGT(local16 c50 local18)
        BranchIfTrue(2 local18)
        Copy(c15 local16 )
        Perch(2)
        Wait(1)                  // join
        IsGT(local16 local11 local21)
//--- begin case structure
        BranchIfTrue(8 local21)                   // CaseStructure test
//--- default case
        IsLT(local16 local11 local21)
//--- begin case structure
        BranchIfTrue(6 local21)                   // CaseStructure test
//--- default case
        Add(local11 local6 local22)
        Add(local11 local9 local23)
        IsGT(local22 local23 local21)
        Copy(local23 local24 )
        BranchIfFalse(3 local21)
        Copy(local22 local24 )
        Perch(3)
        Copy(local23 local26 )   // Pre-Loop copy into LSR
        Copy(local22 local27 )                    // Pre-Loop copy into LSR
        Copy(c50 local25 )                        // initialize i
//--- begin while loop
        Perch(4)
        Copy(local26 local23 )   // LSR copy into inner wire
        Copy(local27 local22 )                    // LSR copy into inner wire
        Sub(local22 c60 local27)
        Sub(local23 c60 local26)
        ArrayIndexElt(local8 local23 local28)
        ArrayIndexElt(local5 local22 local29)
        IsEQ(local28 local29 local21)
        IsLT(local25 local24 local30)
        And(local21 local30 local30)
        BranchIfFalse(5 local30)                  // Loop condition terminal
        Add(local25 c60 local25)                  // increment i
        Branch(4)                                 // loop again
//--- end while loop
        Perch(5)
        IsGT(local28 local29 local30)
        Branch(7)
//--- case
        Perch(6)
        Copy(c19 local30 )       // case output tunnel
        Copy(c19 local21 )                        // case output tunnel
//--- end case structure
        Perch(7)
        Branch(9)
//--- case
        Perch(8)
        Copy(c20 local30 )       // case output tunnel
        Copy(c19 local21 )                        // case output tunnel
//--- end case structure
        Perch(9)
        Copy(local21 local3 )
        Copy(local30 local4 )
//--- end of vi
    )
    clump(1
        Copy(local7 local12 )                     // Pre-Loop copy into LSR
//--- begin while loop
        Perch(0)
        Copy(local12 local11 )   // LSR copy into inner wire
        Sub(local11 c60 local12)
        IsGE(local11 local6 local13)
        ArrayIndexElt(local5 local11 local14)
        IsEQ(local14 c27 local15)
        And(local15 local13 local13)
        BranchIfFalse(1 local13)                  // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Add(local11 c60 local11)
        Sub(local11 local6 local11)
        IsGT(local11 c50 local13)
        BranchIfTrue(2 local13)
        Copy(c15 local11 )
        Perch(2)
    )
)))
//---------------------------------------------------
//VI Definition: GreaterThan.vi
define (videf2 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local5)   // Larger
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local6)   // Smaller
        o(dv(.Boolean false) local4)   // A Greater
        o(dv(.Boolean false) local3)   // Equal
    )
    c(
        e(.Boolean local7)   // A Greater
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
    )
        clump(1
        videf8(local2 local1 local7 local3)
//--- begin case structure
        BranchIfTrue(0 local7)                    // CaseStructure test
//--- default case
        Copy(local2 local8 )                      // case output tunnel
        Copy(local1 local9 )                      // case output tunnel
        Branch(1)
//--- case
        Perch(0)
        Copy(local1 local8 )     // case output tunnel
        Copy(local2 local9 )                      // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local7 local4 )
        Copy(local9 local5 )
        Copy(local8 local6 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Index ArrayClust.vi
define (videf22 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A
        i(dv(.Int32 0) local2)   // Index
        i(dv(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) () ) local1)   // Array
    )
    c(
        e(.Int32 local4)
        e(.Boolean local5)
        e(.Boolean local6)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A
    )
        clump(1
        ArrayLength(local1 local4 )
        IsGE(local2 local4 local5)
        IsLT(local2 c50 local6)
        Or(local6 local5 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        ArrayIndexElt(local1 local2 local7)
        Branch(1)
//--- case
        Perch(0)
        Copy(c28 local7 )        // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local7 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Index ArrayInt.vi
define (videf17 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int32 0) local3)   // digit
        i(dv(.Int32 0) local2)   // Index
        i(dv(a(.Int8 *) () ) local1)   // Array
    )
    c(
        e(.Int32 local4)
        e(.Boolean local5)
        e(.Boolean local6)
        e(.Int8 local7)   // digit
    )
        clump(1
        ArrayLength(local1 local4 )
        IsGE(local2 local4 local5)
        IsLT(local2 c50 local6)
        Or(local6 local5 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        ArrayIndexElt(local1 local2 local7)
        Convert(local7 local4)
        Branch(1)
//--- case
        Perch(0)
        Copy(c29 local4 )        // case output tunnel
//--- end case structure
        Perch(1)
        Copy(local4 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: MakeDivArray.vi
define (videf21 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) () ) local2)   // Arrays of A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(.Int32 local3)
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local4)
        e(a(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) *) local5)
        e(.Boolean local6)
        e(.Int32 local7)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A x Scalar
    )
        clump(1
        Copy(c31 local5 )                         // Pre-Loop copy into LSR
        Copy(c50 local3 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local5 local4 )     // LSR copy into inner wire
        IsGT(c33 local3 local6)
        Add(local3 c34 local7)
        videf26(local1 local7 * local8)
        ArrayConcatenate( local5 local4 local8)
        BranchIfFalse(1 local6)                   // Loop condition terminal
        Add(local3 c60 local3)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        ArrayConcatenate( local2 c32 local1 local5)
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Mult Scalar.vi
define (videf26 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )  0 false )) local2)   // A
        i(dv(.Int32 0) local1)   // Scalar
        i(dv(.Int32 0) local3)   // Shift by
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )  0 false )) local4)   // A x Scalar
    )
    c(
        e(.Boolean local5)
        e(.Int32 local6)
        e(a(.Int8 *) local7)   // Array Num
        e(.Int32 local8)   // Decimal Index
        e(.Int32 local9)
        e(.Int32 local10)
        e(.Int32 local11)
        e(a(.Int8 *) local12)   // Array Num
        e(.Int32 local13)
        e(.Int32 local14)   // digit
        e(.Int8 local15)   // digit
        e(a(.Int8 *) local16)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // Shifted A
    )
        clump(1
        IsEQ(local1 c50 local5)
//--- begin case structure
        BranchIfTrue(6 local5)                    // CaseStructure test
//--- default case
        IsGT(local1 c30 local5)
//--- begin case structure
        BranchIfTrue(0 local5)                    // CaseStructure test
//--- default case
        Copy(local2 local17 )                     // case output tunnel
        Branch(5)
//--- case
        Perch(0)
        Convert(c27 local6)
        Copy(local2.n0 local7 )                   // unbundle
        Copy(local2.n1 local8 )                   // unbundle
        ArrayLength(local7 local9 )
        Sub(local9 c60 local9)
        Copy(local6 local11 )                     // Pre-Loop copy into LSR
        Copy(local7 local12 )                     // Pre-Loop copy into LSR
        Copy(c50 local10 )                        // initialize i
//--- begin while loop
        Perch(1)
        Copy(local11 local6 )    // LSR copy into inner wire
        Copy(local12 local7 )                     // LSR copy into inner wire
        Convert(c14 local13)
        videf17(local14 local10 local7)
        Mul(local14 local1 local14)
        Add(local14 local6 local6)
        Quotient(local6 local13 local11)
        Remainder(local6 local13 local6)
        Convert(local6 local15)
        ArrayReplaceElt(local12 local7 local10 local15)
        IsGT(local9 local10 local5)
        BranchIfFalse(2 local5)                   // Loop condition terminal
        Add(local10 c60 local10)                  // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(2)
        IsEQ(local11 c50 local5)
//--- begin case structure
        BranchIfTrue(3 local5)                    // CaseStructure test
//--- default case
        videf27(local11 local7 *)
        ArrayConcatenate( local16 local12 local7)
        Copy(local16 local7 )                     // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(local12 local7 )    // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local2 local17 )
        Copy(local7 local17.n0 )                  // bundle
        Copy(local8 local17.n1 )                  // bundle
//--- end case structure
        Perch(5)
        videf23(local18 local3 local17)
        Copy(local18 local17 )                    // case output tunnel
        Branch(7)
//--- case
        Perch(6)
        Copy(local2 local17 )
        Copy(c36 local17.n0 )                     // bundle
        Copy(c35 local17.n1 )                     // bundle
        Copy(c37 local17.n2 )                     // bundle
//--- end case structure
        Perch(7)
        Copy(local17 local4 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Multiply.vi
define (videf12 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // Answer
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 5 4 5 1 5 2 8 8 3 3 7 8 2 3 2 6 1 6 8 0 0 6 8 7 8 3 9 6 7 6 7 2 5 2 1 3 4 0 3 4 4 2 8 4 2 5 4 9 6 3 4 3 1 3 2 4 0 1 6 0 3 7 8 5 3 2 4 4 0 2 9 5 0 0 5 5 7 7 1 8 2 1 8 4 7 9 0 6 0 6 3 7 9 1 0 5 3 5 5 3 4 0 7 3 9 3 7 4 7 6 9 2 5 7 9 6 0 2 1 9 2 8 3 0 1 2 7 7 5 0 2 7 0 7 5 3 9 8 3 0 2 2 2 7 9 4 9 8 4 2 4 7 8 9 1 0 3 8 9 9 8 9 2 5 2 7 7 0 0 1 9 0 5 0 8 0 5 4 5 7 3 2 9 2 3 9 4 3 9 9 8 2 9 7 7 4 0 0 1 2 7 7 7 6 3 9 0 6 3 4 8 3 2 2 2 8 3 4 0 9 4 7 9 5 4 6 7 2 2 8 4 8 5 4 4 6 0 8 0 6 8 5 4 0 3 1 1 3 4 6 1 5 1 5 6 0 9 1 7 3 8 5 9 6 0 9 1 1 7 2 7 9 6 9 2 2 1 8 3 5 0 6 8 6 7 2 5 6 3 3 5 1 1 8 2 4 3 1 2 6 3 0 8 9 6 9 0 5 9 9 4 6 3 6 0 2 7 8 8 5 9 2 8 7 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((6 1 2 9 6 5 2 6 7 9 9 2 7 8 5 9 0 2 8 5 9 4 4 3 7 3 5 6 8 1 1 4 3 0 2 6 3 3 3 7 6 8 3 7 6 0 4 7 5 9 4 4 7 5 0 5 6 7 0 8 4 6 4 4 7 8 2 4 2 4 3 0 4 1 8 2 2 7 2 1 3 6 9 9 8 9 4 1 3 2 9 4 5 4 1 8 2 4 0 4 2 9 9 1 6 8 8 2 3 3 7 2 6 8 6 4 3 8 8 7 6 6 7 6 9 6 5 0 6 3 2 8 6 3 1 3 4 8 2 0 8 4 8 8 4 4 7 1 4 0 3 5 2 9 0 2 6 2 2 8 8 0 0 6 0 0 2 3 4 3 4 9 1 9 3 8 7 3 5 1 5 4 0 7 2 1 4 0 6 8 8 8 0 3 8 0 9 8 8 4 7 6 7 5 6 5 9 2 6 9 2 4 4 8 4 4 2 3 6 4 9 9 8 0 7 5 3 9 2 2 3 0 9 3 3 4 3 9 9 4 1 0 3 0 2 9 5 5 0 0 8 0 4 7 0 9 0 6 4 9 9 1 2 4 6 9 4 0 1 2 4 3 0 8 1 9 8 9 7 8 8 8 5 3 5 3 7 2 3 6 8 4 6 9 0 1 3 5 6 6 8 1 7 1 7 4 0 0 9 5 9 9 3 2 1 5 9 6 1 9 2 4 9 2 0 3 0 4 8 5 6 8 8 9 0 4 2 5 3 9 3 3 2 9 2 1 4 0 4 4 5 3 6 4 1 0 2 0 7 5 0 0 9 7 4 0 3 3 9 0 5 2 1 0 8 6 3 9 0 0 9 3 0 3 9 2 3 4 5 6 7 1 2 2 1 8 5 9 8 7 7 1 5 9 0 6 9 8 7 3 4 8 9 9 7 9 1 1 0 7 8 1 8 5 9 9 6 7 6 5 8 3 1 5 6 7 1 4 5 7 8 8 4 8 7 9 3 7 7 4 8 9 6 4 3 7 2 8 3 5 7 2 6 5 6 6 4 4 6 6 9 7 5 4 1 8 3 1 9 3 6 8 9 4 1 8 3 2 9 1 3 3 5 9 7 2 0 7 3 3 1 9 3 5 7 1 4 4 0 9 8 1 3 9 7 9 2 0 5 9 8 2 4 6 9 1 7 3 6 0 7 6 9 8 7 1 6 4 7 1 2 9 8 1 4 4 8 3 4 7 3 7 4 6 5 2 3 0 7 8 9 1 8 0 5 9 4 7 5 0 0 9 2 2 3 8 6 9 1 3 8 9 4 7 7 8 1 0 8 4 4 1 4 9 1 5 6 6 6 9 5 4 0 2 5 4 5 1 5 5 8 5 3 7 2 7 9 1 0 0 7 5 9 9 7 1 6 9 6 5 2 1 2 9 1 6 4 7 2 5 4 4 3 6 2 0 6 7 1 7 2 6 1 3 9 0 3 6 6 7 6 8 7 2 2 3 1 7 6 8 5 5 7 7 5 4 2 2 9 5 4 8 4 7 6 6 3 0 0 5 2 7 3 4 4 8 4 8 6 1 6 8 8 1 4 7 3 )  0 false )) local1)   // A
    )
    c(
        e(a(.Int8 *) local4)   // Array Num
        e(.Boolean local5)   // stop
        e(a(.Int8 *) local6)   // Array Num
        e(.Boolean local7)   // stop
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local8)   // Starting Condition
        e(.Int32 local9)   // Working Digits
        e(.Int32 local10)   // Trailing Zeroes
        e(.Int32 local11)   // New Decimal Index
        e(.Int32 local12)
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local13)   // Starting Condition
        e(.Int32 local14)   // Working Digits
        e(.Int32 local15)   // Trailing Zeroes
        e(.Int32 local16)   // New Decimal Index
        e(.Int32 local17)
        e(.Int32 local18)
        e(.Int32 local19)
        e(a(.Int8 *) local20)
        e(a(.Int8 *) local21)
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local22)   // Starting Condition
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local23)   // Starting Condition
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local24)   // Starting Condition
        e(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) local25)   // Starting Condition
        e(.Int32 local26)   // digit 2
        e(.Int32 local27)   // digit 2
        e(.Int32 local28)
        e(.Int32 local29)   // digit
        e(.Int32 local30)
        e(.Int32 local31)
        e(.Int32 local32)
        e(.Int32 local33)   // digit
        e(.Int32 local34)
        e(.Int32 local35)
        e(.Boolean local36)
        e(.Int32 local37)
        e(.Int32 local38)
        e(.Boolean local39)
        e(.Int32 local40)
        e(.Int32 local41)   // digit 2
        e(.Int32 local42)
        e(.Int32 local43)
        e(.Int8 local44)   // digit
        e(.Int8 local45)   // digit
        e(.Int32 local46)   // digit 2
        e(a(.Int8 *) local47)
        e(.Int32 local48)
    )
        clump(1
        Copy(local1.n0 local4 )                   // unbundle
        Copy(local1.n2 local5 )                   // unbundle
        Copy(local2.n0 local6 )                   // unbundle
        Copy(local2.n2 local7 )                   // unbundle
        Xor(local5 local7 local5)
        Trigger(1)                                // fork
        videf28(local2 local13 local14 local15 local16)
        Wait(1)                                   // join
        Add(local9 local14 local17)
        Sub(local17 c60 local18)
        Sub(local18 c60 local18)
        Add(local10 local15 local19)
        Add(local19 local17 local17)
        ArrayFill(local20 local17 c27)
        Copy(local20 local21 )                    // Pre-Loop copy into LSR
        Copy(local8 local23 )                     // Pre-Loop copy into LSR
        Copy(local13 local25 )                    // Pre-Loop copy into LSR
        Copy(c35 local27 )                        // Pre-Loop copy into LSR
        Copy(local19 local28 )                    // Pre-Loop copy into LSR
        Copy(c50 local17 )                        // initialize i
//--- begin while loop
        Perch(0)
        Copy(local21 local20 )   // LSR copy into inner wire
        Copy(local23 local22 )                    // LSR copy into inner wire
        Copy(local25 local24 )                    // LSR copy into inner wire
        Copy(local27 local26 )                    // LSR copy into inner wire
        Copy(local28 local19 )                    // LSR copy into inner wire
        Add(local19 c60 local28)
        Copy(local24.n0 local29 )                 // unbundle
        Copy(local24.n1 local30 )                 // unbundle
        Copy(local24.n2 local31 )                 // unbundle
        Add(local29 local31 local29)
        Copy(local24.n1 local32 )                 // unbundle
        Copy(local22.n0 local33 )                 // unbundle
        Copy(local22.n1 local34 )                 // unbundle
        Copy(local22.n2 local35 )                 // unbundle
        IsEQ(local35 local12 local36)
//--- begin case structure
        BranchIfTrue(1 local36)                   // CaseStructure test
//--- default case
        Branch(2)
//--- case
        Perch(1)
        Add(local31 c60 local37)
        Add(local30 c60 local38)
        Copy(local38 local30 )                    // case output tunnel
        Copy(local37 local31 )                    // case output tunnel
//--- end case structure
//--- begin case structure
        Perch(2)
        BranchIfTrue(3 local36)  // CaseStructure test
//--- default case
        Add(local35 c60 local37)
        Add(local34 c60 local38)
        Copy(local38 local34 )                    // case output tunnel
        Copy(local37 local35 )                    // case output tunnel
        Branch(3)
//--- case
//--- end case structure
        Perch(3)
        Copy(local22.n0 local37 )// unbundle
        Copy(local22.n1 local38 )                 // unbundle
        IsEQ(local14 local29 local39)
        And(local39 local36 local36)
//--- begin case structure
        BranchIfTrue(6 local36)                   // CaseStructure test
//--- default case
        IsLT(local9 local14 local36)
        Copy(local14 local29 )
        BranchIfFalse(4 local36)
        Copy(local9 local29 )
        Perch(4)
        Add(local33 c60 local40)
        IsLT(local40 local29 local36)
        BranchIfFalse(5 local36)
        Copy(local40 local29 )
        Perch(5)
        Branch(7)
//--- case
        Perch(6)
        Sub(local33 c60 local33)
        Copy(local33 local29 )                    // case output tunnel
//--- end case structure
        Perch(7)
        Copy(local22 local23 )
        Copy(local29 local23.n0 )                 // bundle
        Copy(local34 local23.n1 )                 // bundle
        Copy(local35 local23.n2 )                 // bundle
        Copy(local24 local25 )
        Copy(local29 local25.n0 )                 // bundle
        Copy(local30 local25.n1 )                 // bundle
        Copy(local31 local25.n2 )                 // bundle
        Copy(local26 local41 )                    // Pre-Loop copy into LSR
        Copy(local38 local42 )                    // Pre-Loop copy into LSR
        Copy(local32 local43 )                    // Pre-Loop copy into LSR
        Copy(c50 local29 )                        // initialize i
//--- begin while loop
        Perch(8)
        Copy(local41 local26 )   // LSR copy into inner wire
        Copy(local42 local30 )                    // LSR copy into inner wire
        Copy(local43 local31 )                    // LSR copy into inner wire
        Add(local31 c60 local43)
        Sub(local30 c60 local42)
        ArrayIndexElt(local6 local31 local44)
        ArrayIndexElt(local4 local30 local45)
        Mul(local45 local44 local44)
        Convert(local44 local30)
        Add(local26 local30 local41)
        IsLT(local29 local37 local36)
        BranchIfFalse(9 local36)                  // Loop condition terminal
        Add(local29 c60 local29)                  // increment i
        Branch(8)                                 // loop again
//--- end while loop
        Perch(9)
        Quotient(local41 c38 local27)
        Remainder(local41 c38 local26)
        Convert(local26 local44)
        ArrayReplaceElt(local21 local20 local19 local44)
        IsGT(local18 local17 local36)
        BranchIfFalse(10 local36)                 // Loop condition terminal
        Add(local17 c60 local17)                  // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(10)
        IsEQ(local27 c50 local36)
//--- begin case structure
        BranchIfTrue(13 local36)                  // CaseStructure test
//--- default case
        Copy(local27 local46 )                    // Pre-Loop copy into LSR
        Copy(local21 local47 )                    // Pre-Loop copy into LSR
        Copy(local28 local48 )                    // Pre-Loop copy into LSR
//--- begin while loop
        Perch(11)
        Copy(local46 local17 )  // LSR copy into inner wire
        Copy(local47 local20 )                    // LSR copy into inner wire
        Copy(local48 local18 )                    // LSR copy into inner wire
        Add(local18 c60 local48)
        Quotient(local17 c38 local19)
        Remainder(local17 c38 local17)
        Convert(local17 local44)
        ArrayReplaceElt(local47 local20 local18 local44)
        Copy(local19 local46 )
        IsGT(local19 c50 local36)
        BranchIfFalse(12 local36)                 // Loop condition terminal
        Branch(11)                                // loop again
//--- end while loop
        Perch(12)
        Copy(local47 local20 )  // case output tunnel
        Branch(14)
//--- case
        Perch(13)
        Copy(local21 local20 )  // case output tunnel
//--- end case structure
        Perch(14)
        Add(local11 local16 local17)
        Copy(local1 local3 )
        Copy(local20 local3.n0 )                  // bundle
        Copy(local17 local3.n1 )                  // bundle
        Copy(local5 local3.n2 )                   // bundle
//--- end of vi
    )
    clump(1
        videf28(local1 local8 local9 local10 local11)
        Sub(local9 c60 local12)
    )
)))
//---------------------------------------------------
//VI Definition: Nearest Even.vi
define (videf29 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(.Int8 0) local2)   // Rounded to even
        i(dv(.Int8 0) local1)   // digit
    )
    c(
        e(.Int8 local3)
        e(.Int8 local4)
        e(.Boolean local5)
    )
        clump(1
        Add(local1 c18 local3)
        Remainder(local1 c59 local4)
        IsNE(local4 c27 local5)
        Copy(local1 local2 )
        BranchIfFalse(0 local5)
        Copy(local3 local2 )
//--- end of vi
        Perch(0)
    )
)))
//---------------------------------------------------
//VI Definition: Normalize.vi
define (videf19 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // Normalized A
        i(dv(.Int32 0) local1)   // Shift to
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(a(.Int8 *) local4)   // Array Num
        e(.Int32 local5)   // Decimal Index
        e(.Boolean local6)
        e(.Int32 local7)
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Int32 local10)   // digit
        e(.Boolean local11)
        e(.Boolean local12)
        e(a(.Int8 *) local13)
    )
        clump(1
        Copy(local2.n0 local4 )                   // unbundle
        Copy(local2.n1 local5 )                   // unbundle
        IsLT(local5 c50 local6)
        ArrayLength(local4 local7 )
        Sub(local7 c60 local7)
        Copy(c50 local8 )                         // initialize i
//--- begin while loop
        Perch(0)
        Sub(local7 local8 local9)
        videf17(local10 local9 local4)
        IsEQ(local10 c50 local11)
        IsGT(local9 c29 local12)
        And(local11 local12 local11)
        BranchIfFalse(1 local11)                  // Loop condition terminal
        Add(local8 c60 local8)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Add(local9 c60 local7)
        ArraySubset(local4 local4 c29 local7)
//--- begin case structure
        BranchIfTrue(2 local6)                    // CaseStructure test
//--- default case
        Branch(3)
//--- case
        Perch(2)
        Convert(c27 local7)
        Sub(c50 local5 local8)
        ArrayFill(local13 local8 c27)
        ArrayConcatenate( local13 local13 local4)
        Copy(local13 local4 )                     // case output tunnel
        Copy(local7 local5 )                      // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local2 local3 )
        Copy(local4 local3.n0 )                   // bundle
        Copy(local5 local3.n1 )                   // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Number To Digits.vi
define (videf27 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(.Int32 0) local1)   // Value
        o(dv(a(.Int8 *) () ) local3)   // Digits
        o(dv(.Int32 0) local2)   // Num Digits
    )
    c(
        e(.Int32 local4)   // Value
        e(.Int32 local5)   // Value
        e(a(.Int8 *) local6)
        e(a(.Int8 *) local7)
        e(.Int32 local8)
        e(.Int8 local9)
        e(.Boolean local10)
    )
        clump(1
        Copy(local1 local5 )                      // Pre-Loop copy into LSR
        Copy(c21 local7 )                         // Pre-Loop copy into LSR
//--- begin while loop
        Perch(0)
        Copy(local5 local4 )     // LSR copy into inner wire
        Copy(local7 local6 )                      // LSR copy into inner wire
        Quotient(local4 c38 local8)
        Remainder(local4 c38 local4)
        Convert(local4 local9)
        ArrayConcatenate( local7 local6 local9)
        Copy(local8 local5 )
        IsGT(local8 c50 local10)
        BranchIfFalse(1 local10)                  // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Copy(local7 local3 )
        ArrayLength(local7 local2 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Number To String.vi
define (videf14 dv(.VirtualInstrument (
    c(
        o(dv(.String '') local3)   // String
        i(dv(.Int32 0) local1)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // Number
    )
    c(
        e(.UInt8 local4)
        e(a(.Int8 *) local5)   // Array Num
        e(.Int32 local6)   // Decimal Index
        e(.Boolean local7)   // stop
        e(.Int32 local8)
        e(a(.Int8 *) local9)   // Array Dup
        e(.Int32 local10)   // NonZero Count
        e(.Int32 local11)
        e(.Int32 local12)
        e(.Boolean local13)
        e(.Boolean local14)
        e(.Int32 local15)
        e(.Int32 local16)   // NonZero Count
        e(.Int32 local17)
        e(a(.UInt8 *) local18)
        e(a(.UInt8 *) local19)
        e(.Int8 local20)   // digit
        e(a(.UInt8 *) local21)
    )
        clump(1
        Convert(c44 local4)
        Copy(local2.n0 local5 )                   // unbundle
        Copy(local2.n1 local6 )                   // unbundle
        Copy(local2.n2 local7 )                   // unbundle
        Copy(c35 local8 )
        BranchIfFalse(0 local7)
        Copy(c45 local8 )
        Perch(0)
        videf10(local5 local9 local10)
        Add(local8 local10 local11)
        Sub(local10 local6 local12)
        IsGT(local12 c50 local13)
        IsEQ(local12 c50 local14)
//--- begin case structure
        BranchIfTrue(5 local14)                   // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfFalse(3 local13)                  // CaseStructure test
//--- default case
        IsLT(local6 c50 local13)
//--- begin case structure
        BranchIfTrue(1 local13)                   // CaseStructure test
//--- default case
        Copy(c35 local15 )                        // case output tunnel
        Copy(local12 local16 )                    // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Sub(c50 local6 local15)
        Copy(local10 local16 )                    // case output tunnel
//--- end case structure
        Perch(2)
        Add(local16 local1 local16)
        Add(local16 local15 local15)
        Copy(c35 local12 )                        // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Sub(c50 local12 local12)
        Add(local12 c60 local16)
        Add(local12 local10 local12)
        Add(local1 c60 local17)
        Copy(local17 local15 )                    // case output tunnel
        Copy(local12 local6 )                     // case output tunnel
        Copy(local16 local12 )                    // case output tunnel
//--- end case structure
        Perch(4)
        Branch(6)
//--- case
        Perch(5)
        Add(local1 c60 local16)
        Copy(local16 local15 )                    // case output tunnel
        Copy(local10 local6 )                     // case output tunnel
        Copy(c45 local12 )                        // case output tunnel
//--- end case structure
        Perch(6)
        Add(local11 local12 local11)
        Sub(local11 c60 local12)
        Sub(local11 local6 local6)
        Add(local8 local15 local8)
        ArrayFill(local18 local8 c46)
        ArraySubset(local9 local9 * local10)
        ArrayLength(local9 local8 )
        Sub(local8 c60 local8)
        Copy(local18 local19 )                    // Pre-Loop copy into LSR
        Copy(c50 local10 )                        // initialize i
//--- begin while loop
        Perch(7)
        Copy(local19 local18 )   // LSR copy into inner wire
        ArrayIndexElt(local9 local10 local20)
        Add(local20 c47 local20)
        IsGT(local8 local10 local13)
        Sub(local12 local10 local11)
        ArrayReplaceElt(local19 local18 local11 local20)
        BranchIfFalse(8 local13)                  // Loop condition terminal
        Add(local10 c60 local10)                  // increment i
        Branch(7)                                 // loop again
//--- end while loop
        Perch(8)
        ArraySubset(local18 local19 local6 *)
        ArraySubset(local21 local19 * local6)
        ArrayConcatenate( local21 local21 local4 local18)
//--- begin case structure
        BranchIfTrue(9 local7)                    // CaseStructure test
//--- default case
        Copy(local21 local18 )                    // case output tunnel
        Branch(10)
//--- case
        Perch(9)
        Convert(c48 local6)
        ArrayReplaceElt(local18 local21 local6 c49)
//--- end case structure
        Perch(10)
        Copy(local18 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: PrepForMultiply.vi
define (videf28 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local1)   // A
        o(dv(c(
            e(.Int32 n0)   // digit
            e(.Int32 n1)
            e(.Int32 n2)
        ) (0 0 0 )) local3)   // Starting Condition
        o(dv(.Int32 0) local4)   // Working Digits
        o(dv(.Int32 0) local5)   // Trailing Zeroes
        o(dv(.Int32 0) local2)   // New Decimal Index
    )
    c(
        e(a(.Int8 *) local6)   // Array Num
        e(.Int32 local7)   // Decimal Index
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Int32 local10)   // digit
        e(.Boolean local11)
        e(.Boolean local12)
    )
        clump(1
        Copy(local1.n0 local6 )                   // unbundle
        Copy(local1.n1 local7 )                   // unbundle
        ArrayLength(local6 local8 )
        Copy(c50 local9 )                         // initialize i
//--- begin while loop
        Perch(0)
        videf17(local10 local9 local6)
        IsEQ(local10 c50 local11)
        IsLT(local9 local8 local12)
        And(local12 local11 local11)
        BranchIfFalse(1 local11)                  // Loop condition terminal
        Add(local9 c60 local9)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Sub(local9 local7 local7)
        Sub(c50 local7 local10)
        IsGT(local10 c35 local11)
        Copy(c35 local2 )
        BranchIfFalse(2 local11)
        Copy(local10 local2 )
        Perch(2)
        Sub(local8 local9 local9)
        Copy(local9 local4 )
        Sub(local8 local9 local8)
        Copy(c30 local3.n0 )                      // bundle
        Copy(local8 local3.n1 )                   // bundle
        Copy(c35 local3.n2 )                      // bundle
        IsGT(local7 c35 local11)
        Copy(c35 local5 )
        BranchIfFalse(3 local11)
        Copy(local7 local5 )
//--- end of vi
        Perch(3)
    )
)))
//---------------------------------------------------
//VI Definition: PrepareNumerator.vi
define (videf20 dv(.ReentrantVirtualInstrument (
    c(
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // B
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local5)   // Normalized A
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // B copy
        o(dv(.Int32 0) local4)   // Shifted
    )
    c(
        e(.Boolean local6)   // A Greater
        e(.Boolean local7)   // Equal
        e(.Int32 local8)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // Shifted A
        e(.Int32 local12)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local13)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // Shifted A
        e(.Int32 local16)   // Decimal Index
    )
        clump(1
        videf8(local2 local1 local6 local7)
//--- begin case structure
        BranchIfTrue(4 local6)                    // CaseStructure test
//--- default case
        Not(local7 local6 )
//--- begin case structure
        BranchIfTrue(0 local6)                    // CaseStructure test
//--- default case
        Copy(local1 local11 )                     // case output tunnel
        Copy(local2 local9 )                      // case output tunnel
        Copy(c29 local8 )                         // case output tunnel
        Branch(3)
//--- case
        Perch(0)
        Copy(local2 local10 )    // Pre-Loop copy into LSR
        Copy(c50 local8 )                         // initialize i
//--- begin while loop
        Perch(1)
        Copy(local10 local9 )    // LSR copy into inner wire
        videf23(local11 c23 local9)
        videf2(local11 local1 local9 local10 local6 *)
        BranchIfTrue(2 local6)                    // Loop condition terminal
        Add(local8 c60 local8)                    // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(2)
        Mul(c23 local8 local8)
        Sub(local8 c60 local8)
        Copy(local10 local11 )                    // case output tunnel
//--- end case structure
        Perch(3)
        Branch(7)
//--- case
        Perch(4)
        Copy(local2 local14 )    // Pre-Loop copy into LSR
        Copy(c50 local12 )                        // initialize i
//--- begin while loop
        Perch(5)
        Copy(local14 local13 )   // LSR copy into inner wire
        videf23(local15 c30 local13)
        videf2(local15 local1 local14 local13 local6 *)
        BranchIfFalse(6 local6)                   // Loop condition terminal
        Add(local12 c60 local12)                  // increment i
        Branch(5)                                 // loop again
//--- end while loop
        Perch(6)
        Copy(local13.n1 local16 )// unbundle
        Sub(local16 c60 local16)
        Copy(local16 local13.n1 )                 // bundle
        Copy(local13 local9 )                     // case output tunnel
        Copy(local12 local8 )                     // case output tunnel
        Copy(local14 local11 )                    // case output tunnel
//--- end case structure
        Perch(7)
        Copy(local11 local3 )
        Copy(local8 local4 )
        Copy(local9 local5 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Reverse Array.vi
define (videf18 dv(.VirtualInstrument (
    c(
        i(dv(a(.Int8 *) () ) local1)   // Array
        o(dv(a(.Int8 *) () ) local3)   // Reversed Array
        o(dv(.Int32 0) local2)   // Array Size
    )
    c(
        e(.Int32 local4)
        e(.Int32 local5)
        e(a(.Int8 *) local6)   // Array
        e(a(.Int8 *) local7)   // Array
        e(.Boolean local8)
        e(.Int32 local9)
        e(.Int8 local10)
    )
        clump(1
        ArrayLength(local1 local4 )
        Copy(local4 local2 )
        Sub(local4 c60 local4)
        Copy(local1 local7 )                      // Pre-Loop copy into LSR
        Copy(c50 local5 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local7 local6 )     // LSR copy into inner wire
        IsGT(local4 local5 local8)
        Sub(local4 local5 local9)
        ArrayIndexElt(local1 local5 local10)
        ArrayReplaceElt(local7 local6 local9 local10)
        BranchIfFalse(1 local8)                   // Loop condition terminal
        Add(local5 c60 local5)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
        Copy(local7 local3 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Round.vi
define (videf7 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A rounded to Digits
        i(dv(.Int32 2) local1)   // Digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local4)   // Normalized A
        e(a(.Int8 *) local5)   // Array Num
        e(.Int32 local6)   // Decimal Index
        e(.Boolean local7)
        e(.Int32 local8)
        e(.Int32 local9)
        e(.Int32 local10)   // digit
        e(.Boolean local11)
        e(.Int8 local12)   // digit
        e(.Int8 local13)   // Rounded to even
        e(a(.Int8 *) local14)   // Array Num
        e(a(.Int8 *) local15)   // Array Num
    )
        clump(1
        videf19(local4 * local2)
        Copy(local4.n0 local5 )                   // unbundle
        Copy(local4.n1 local6 )                   // unbundle
        IsGT(local6 local1 local7)
//--- begin case structure
        BranchIfTrue(0 local7)                    // CaseStructure test
//--- default case
        Branch(5)
//--- case
        Perch(0)
        Sub(local6 local1 local8)
        Sub(local8 c60 local9)
        videf17(local10 local8 local5)
        IsEQ(local10 c58 local7)
        IsGT(c58 local10 local11)
        videf17(local10 local9 local5)
//--- begin case structure
        BranchIfTrue(3 local11)                   // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfFalse(1 local7)                   // CaseStructure test
//--- default case
        Convert(local10 local12)
        videf29(local13 local12)
        Sub(local8 c60 local9)
        ArrayReplaceElt(local14 local5 local9 local13)
        Copy(local8 local9 )                      // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Add(local10 c60 local9)
        Convert(local9 local12)
        Sub(local8 c60 local9)
        ArrayReplaceElt(local15 local5 local9 local12)
        Copy(local15 local14 )                    // case output tunnel
        Copy(local8 local9 )                      // case output tunnel
//--- end case structure
        Perch(2)
        Copy(local9 local8 )     // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(local5 local14 )    // case output tunnel
//--- end case structure
        Perch(4)
        ArrayLength(local14 local9 )
        Sub(local9 local8 local9)
        ArraySubset(local15 local14 local8 local9)
        Copy(local15 local5 )                     // case output tunnel
        Copy(local1 local6 )                      // case output tunnel
//--- end case structure
        Perch(5)
        Copy(local4 local3 )
        Copy(local5 local3.n0 )                   // bundle
        Copy(local6 local3.n1 )                   // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Shift.vi
define (videf23 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // Shifted A
        i(dv(.Int32 1) local1)   // Shift by
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // A
    )
    c(
        e(dv(.Boolean false) local3)   // Normalize?
        e(.Int32 local5)   // Decimal Index
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // Normalized A
    )
        clump(1
//--- begin case structure
        BranchIfEQ(2 local1 c50)             // CaseStructure test
//--- default case
        Copy(local2.n1 local5 )                   // unbundle
        Add(local5 local1 local5)
        Copy(local2 local6 )
        Copy(local5 local6.n1 )                   // bundle
//--- begin case structure
        BranchIfTrue(0 local3)                    // CaseStructure test
//--- default case
        Branch(1)
//--- case
        Perch(0)
        videf19(local7 * local6)
        Copy(local7 local6 )                      // case output tunnel
//--- end case structure
        Perch(1)
        Branch(3)
//--- case
        Perch(2)
        Copy(local2 local6 )     // case output tunnel
//--- end case structure
        Perch(3)
        Copy(local6 local4 )
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Sqrt.vi
define (videf30 dv(.VirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local4)   // Square Root A
        i(dv(.Int32 50) local2)   // digits
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((0 0 4 )  0 false )) local1)   // A
    )
    c(
        e(dv(.Int32 0) local3)
        e(.Int32 local5)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local6)   // A/B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // A / Scalar
        e(.Int32 local8)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local11)   // A/B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local12)   // A/B
        e(.Boolean local13)   // Equal
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // Answer
    )
        clump(1
        Add(local2 c60 local5)
        Trigger(1)                                // fork
        videf16(local7 local5 c55 local1)
        Wait(1)                                   // join
        Copy(c54 local10 )                        // Pre-Loop copy into LSR
        Copy(local6 local12 )                     // Pre-Loop copy into LSR
        Copy(c50 local8 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local10 local9 )    // LSR copy into inner wire
        Copy(local12 local11 )                    // LSR copy into inner wire
        Copy(local11 local10 )
        videf6(local13 local2 local9 local11)
//--- begin case structure
        BranchIfTrue(1 local13)                   // CaseStructure test
//--- default case
        videf12(local9 local11 local11)
        videf12(local14 local9 local7)
        videf31(local9 local14 c53)
        videf12(local14 local11 local9)
        Copy(c56 local13 )                        // case output tunnel
        Copy(local14 local9 )                     // case output tunnel
        Branch(2)
//--- case
        Perch(1)
        Copy(c57 local13 )       // case output tunnel
        Copy(local11 local9 )                     // case output tunnel
//--- end case structure
        Perch(2)
        videf7(local12 local5 local9)
        Copy(local8 local3 )
        BranchIfFalse(3 local13)                  // Loop condition terminal
        Add(local8 c60 local8)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(3)
        videf12(local9 local12 local1)
        videf19(local4 * local9)
//--- end of vi
    )
    clump(1
        videf13(c54 local1 local2 local6)
    )
)))
//---------------------------------------------------
//VI Definition: Subtract.vi
define (videf31 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A-B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(a(.Int8 *) local4)   // Array Num
        e(.Int32 local5)   // Decimal Index
        e(.Boolean local6)   // stop
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local7)   // B
    )
        clump(1
        Copy(local2.n0 local4 )                   // unbundle
        Copy(local2.n1 local5 )                   // unbundle
        Copy(local2.n2 local6 )                   // unbundle
        Not(local6 local6 )
        Copy(local2 local7 )
        Copy(local4 local7.n0 )                   // bundle
        Copy(local5 local7.n1 )                   // bundle
        Copy(local6 local7.n2 )                   // bundle
        videf1(local3 local7 local1)
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Unsigned Unsafe Subtract.vi
define (videf3 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local3)   // A-B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local2)   // B
        i(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) ((1 2 3 )  0 false )) local1)   // A
    )
    c(
        e(a(.Int8 *) local4)   // Array Num
        e(.Int32 local5)   // Decimal Index
        e(a(.Int8 *) local6)   // Array Num
        e(.Int32 local7)   // Decimal Index
        e(.Boolean local8)
        e(.Int32 local9)   // Decimal Index
        e(.Int32 local10)   // B Index
        e(.Int32 local11)   // A Index
        e(.Int32 local12)   // Loop Count
        e(.Int8 local13)
        e(.Int8 local14)
        e(.Int32 local15)   // A Index
        e(.Int32 local16)   // B Index
        e(a(.Int8 *) local17)
        e(a(.Int8 *) local18)
        e(.Int8 local19)   // digit
        e(.Int8 local20)
    )
        clump(1
        Copy(local1.n0 local4 )                   // unbundle
        Copy(local1.n1 local5 )                   // unbundle
        Copy(local2.n0 local6 )                   // unbundle
        Copy(local2.n1 local7 )                   // unbundle
        IsGT(local5 local7 local8)
        Copy(local7 local9 )
        BranchIfFalse(0 local8)
        Copy(local5 local9 )
        Perch(0)
        videf9(local10 local11 local12 local7 local6 local5 local4)
        Sub(local12 c60 local5)
        Copy(c17 local14 )                        // Pre-Loop copy into LSR
        Copy(local11 local15 )                    // Pre-Loop copy into LSR
        Copy(local10 local16 )                    // Pre-Loop copy into LSR
        Copy(c10 local18 )                        // Pre-Loop copy into LSR
        Copy(c50 local7 )                         // initialize i
//--- begin while loop
        Perch(1)
        Copy(local14 local13 )   // LSR copy into inner wire
        Copy(local15 local11 )                    // LSR copy into inner wire
        Copy(local16 local10 )                    // LSR copy into inner wire
        Copy(local18 local17 )                    // LSR copy into inner wire
        Add(local10 c60 local16)
        Add(local11 c60 local15)
        ArrayIndexElt(local4 local11 local19)
        Sub(local19 local13 local13)
        ArrayIndexElt(local6 local10 local19)
        Sub(local13 local19 local13)
        IsLT(local13 c27 local8)
//--- begin case structure
        BranchIfFalse(2 local8)                   // CaseStructure test
//--- default case
        Add(local13 c14 local19)
        Copy(c18 local20 )                        // case output tunnel
        Copy(local19 local13 )                    // case output tunnel
        Branch(3)
//--- case
        Perch(2)
        Copy(c17 local20 )       // case output tunnel
//--- end case structure
        Perch(3)
        ArrayConcatenate( local18 local17 local13)
        Copy(local20 local14 )
        IsGT(local5 local7 local8)
        BranchIfFalse(4 local8)                   // Loop condition terminal
        Add(local7 c60 local7)                    // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(4)
        Copy(local1 local3 )
        Copy(local18 local3.n0 )                  // bundle
        Copy(local9 local3.n1 )                   // bundle
        Copy(c16 local3.n2 )                      // bundle
//--- end of vi
    )
)))
//---------------------------------------------------
//VI Definition: Untitled 1
define (videf32 dv(.VirtualInstrument (
    c(
        e(dv(.Int32 50) local1)   // Digits
        e(dv(.UInt32 19) local2)   // x-y
        e(.String local3)   // Results
        e(.UInt32 local4)   // millisecond timer value
        e(.Int32 local5)
        e(.Int32 local6)
        e(.Int32 local7)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local8)   // A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A
        e(.Boolean local10)
        e(.Int32 local11)
        e(.Int32 local12)
        e(.Int32 local13)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // Result
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // (N!)^4
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local16)   // Answer
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local17)   // N!
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local18)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local19)   // A/B
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local20)   // Square Root A
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local21)   // A / Scalar
        e(.UInt32 local22)   // millisecond timer value
    )
        clump(1
        GetMillisecondTickCount(local4)
        Add(c3 local1 local5)
        Quotient(local5 c2 local6)
        Trigger(1)                                // fork
        videf30(local20 local5 c0)
        videf16(local21 local5 c4 local20)
        Wait(1)                                   // join
        videf11(local21 local9 local5 * local3)
        GetMillisecondTickCount(local22)
        Sub(local22 local4 local2)
        
        Printf("Pi calculated to %s digits is %s\n" local1 local3)
        Printf("It took %s milliseconds\n" local2)

//--- end of vi
    )
    clump(1
        Copy(c1 local9 )                          // Pre-Loop copy into LSR
        Copy(c50 local7 )                         // initialize i
//--- begin while loop
        Perch(0)
        Copy(local9 local8 )     // LSR copy into inner wire
        IsGT(local6 local7 local10)
        Mul(local7 c6 local11)
        Mul(local7 c6 local12)
        Mul(c8 local7 local13)
        Add(c7 local13 local13)
        Trigger(2)                                // fork
        Trigger(3)                                // fork
        videf25(local17 local11)
        videf26(local17 local13 * local18)
        Wait(2)                                   // join
        videf13(local18 local16 local5 local19)
        videf1(local9 local19 local8)
        BranchIfFalse(1 local10)                  // Loop condition terminal
        Add(local7 c60 local7)                    // increment i
        Branch(0)                                 // loop again
//--- end while loop
        Perch(1)
    )
    clump(1
        videf24(local15 local7)
        Wait(3)                                   // join
        videf12(local16 local15 local14)
    )
    clump(1
        videf33(local14 c5 local12)
    )
)))
//---------------------------------------------------
//VI Definition: XtoY.vi
define (videf33 dv(.ReentrantVirtualInstrument (
    c(
        o(dv(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) (()  0 false )) local3)   // Result
        i(dv(.Int32 0) local2)   // X
        i(dv(.Int32 0) local1)   // Y
    )
    c(
        e(.Boolean local4)
        e(.Int32 local5)   // X
        e(.Int32 local6)   // X
        e(.Int32 local7)   // Y
        e(.Int32 local8)   // Y
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local9)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local10)   // A x Scalar
        e(.Boolean local11)
        e(.Boolean local12)
        e(.Int32 local13)
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local14)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local15)   // A x Scalar
        e(c(
            e(a(.Int8 *) n0)   // Array Num
            e(.Int32 n1)   // Decimal Index
            e(.Boolean n2)   // stop
        ) local16)   // A x Scalar
    )
        clump(1
        IsNE(local1 c50 local4)
//--- begin while loop
        Perch(0)
        Copy(local6 local5 )     // LSR copy into inner wire
        Copy(local8 local7 )                      // LSR copy into inner wire
        Copy(local10 local9 )                     // LSR copy into inner wire
        Copy(local1 local8 )
        Sub(local1 local7 local7)
        IsGE(local7 c50 local11)
        And(local4 local11 local11)
        Copy(local2 local6 )
        IsEQ(local2 local5 local12)
        And(local11 local12 local11)
//--- begin case structure
        BranchIfTrue(5 local11)                   // CaseStructure test
//--- default case
//--- begin case structure
        BranchIfEQ(3 local1 c50)             // CaseStructure test
//--- default case
        Sub(local1 c60 local5)
        Copy(c39 local15 )                        // Pre-Loop copy into LSR
        Copy(c50 local13 )                        // initialize i
//--- begin while loop
        Perch(1)
        Copy(local15 local14 )   // LSR copy into inner wire
        videf26(local14 local2 * local15)
        IsGT(local5 local13 local11)
        BranchIfFalse(2 local11)                  // Loop condition terminal
        Add(local13 c60 local13)                  // increment i
        Branch(1)                                 // loop again
//--- end while loop
        Perch(2)
        Copy(local15 local14 )   // case output tunnel
        Branch(4)
//--- case
        Perch(3)
        Copy(c39 local14 )       // case output tunnel
//--- end case structure
        Perch(4)
        Copy(local14 local9 )    // case output tunnel
        Branch(8)
//--- case
        Perch(5)
        Sub(local7 c60 local5)
        Copy(local9 local16 )                     // Pre-Loop copy into LSR
        Copy(c50 local7 )                         // initialize i
//--- begin while loop
        Perch(6)
        Copy(local16 local9 )    // LSR copy into inner wire
        videf26(local9 local2 * local16)
        IsGT(local5 local7 local11)
        BranchIfFalse(7 local11)                  // Loop condition terminal
        Add(local7 c60 local7)                    // increment i
        Branch(6)                                 // loop again
//--- end while loop
        Perch(7)
        Copy(local16 local9 )    // case output tunnel
//--- end case structure
        Perch(8)
        Copy(local9 local10 )
        BranchIfFalse(9 c37)                      // Loop condition terminal
        Branch(0)                                 // loop again
//--- end while loop
        Perch(9)
        Copy(local10 local3 )
//--- end of vi
    )
)))
enqueue (videf32)

# Vireo make file for linux/unix

VIREO_SDK_DIR=..

OBJS=$(VIREO_SDK_DIR)/make-it/objs
INCDIR=$(VIREO_SDK_DIR)/source/include
BIN=$(VIREO_SDK_DIR)/bin
SITESOURCEDIR=$(VIREO_SDK_DIR)/source/dox/playground
SITEDIR=$(VIREO_SDK_DIR)/Documents/gh-pages/playground
TARGETDIR=$(VIREO_SDK_DIR)/dist
CORESOURCEDIR=$(VIREO_SDK_DIR)/source/core
IOSOURCEDIR=$(VIREO_SDK_DIR)/source/io
UTSOURCEDIR=$(VIREO_SDK_DIR)/source/unittest

.PHONY: clean install help vjs dox
.DEFAULT_GOAL=help

clean:
	rm -f $(OBJS)/*
	rm -f $(TARGETDIR)/vireo.js*

install:
	mkdir -p $(SITEDIR)
	cp $(TARGETDIR)/vireo.js $(SITEDIR)/
	cp $(SITESOURCEDIR)/*.html $(SITEDIR)/
	cp $(SITESOURCEDIR)/*.via $(SITEDIR)/
	cp $(SITESOURCEDIR)/*.json $(SITEDIR)/
	@echo '==> website files copied to  $(SITEDIR)'

help:
	@echo 'Execute "make vjs"     to build vireo.js'
	@echo '        "make clean"   to remove intermediate files'
	@echo '        "make install" to copy files to web directory'
	@echo '        "make"         to print this help dialogue'
	@echo ''


# Instead of trying fake out make for emscripten just build it explicitly
# To install the Emscripten SDK
#   https://github.com/kripken/emscripten/wiki

# Note on debugging:
#   https://github.com/kripken/emscripten/wiki/Optimizing-Code

# On optimization, resulting Vireo.js # yielded the following sizes:
#
#  In early builds of emscripten high level optimizations (-O3 -Os) tended to fail though
#  Vireo had an alignment bug that may have caused the failures.
#
#  5/2014 using emcc 1.16
#  -O3 833k / -Os 760k / -Oz 719k
#
#  10/2014 using emcc 1.22.0
#  Data segment is now broken out to the vireo.js.asm file
#  -03 611k+35k  / -Os 571k+35k / -Oz 527k+35k  (all work)
#  Vireo has grown as well, so emscripten is getting better if the over all size has shrunk by about 20%

EMCC= emcc
EM_DBGFLAG = -g4
EM_OPTFLAG = -Os # -Os -O3

ifneq ($(wildcard custom.mak),)
   include custom.mak
endif

EM_OPTFLAGS ?= $(EM_OPTFLAG)	# Can be overrided in custom.mak
EM_ANALYSIS_OPT_FLAG = $(EM_OPTFLAG)

# NO_DYNAMIC_EXECUTION=1 Allows Vireo to be used in CSP environments where eval() is forbidden: https://github.com/kripken/emscripten/blob/master/src/settings.js#L563
EM_OPT = $(EM_OPTFLAGS) -s NO_EXIT_RUNTIME=1 -fno-exceptions --memory-init-file 0 -s NO_DYNAMIC_EXECUTION=1
EMFLAGS = -I$(INCDIR) -DkVireoOS_emscripten -DVIREO_LEAN $(EM_OPT)
EMLIBRARY = --js-library $(CORESOURCEDIR)/library_coreHelpers.js \
            --js-library $(IOSOURCEDIR)/library_canvas2d.js \
            --js-library $(IOSOURCEDIR)/library_httpClient.js
PREJS = $(OBJS)/vireo.preamble.js
POSTJS = $(OBJS)/vireo.postamble.js
EM_WRAP = --pre-js $(PREJS) --post-js $(POSTJS)

EM_EXPORTS = -s EXPORTED_FUNCTIONS="[\
    '_Vireo_Version', \
    '_EggShell_Create', \
    '_EggShell_REPL',\
    '_EggShell_ExecuteSlices',\
    '_EggShell_Delete',\
    '_EggShell_ReadDouble',\
    '_EggShell_WriteDouble',\
    '_EggShell_ReadValueString',\
    '_EggShell_WriteValueString',\
    '_Occurrence_Set',\
    '_Data_GetStringBegin',\
    '_Data_GetStringLength',\
    '_Data_WriteString',\
    '_Data_WriteInt32',\
    '_Data_WriteUInt32'\
    ]"

EM_BC_FILES=$(OBJS)/Array.bc\
	$(OBJS)/Assert.bc\
	$(OBJS)/CEntryPoints.bc\
	$(OBJS)/EventLog.bc\
	$(OBJS)/ExecutionContext.bc\
	$(OBJS)/GenericFunctions.bc\
	$(OBJS)/Math.bc\
	$(OBJS)/NumericString.bc\
	$(OBJS)/Platform.bc\
	$(OBJS)/RefNum.bc\
	$(OBJS)/Queue.bc\
	$(OBJS)/String.bc\
	$(OBJS)/StringUtilities.bc\
	$(OBJS)/Synchronization.bc\
	$(OBJS)/TDCodecLVFlat.bc\
	$(OBJS)/TDCodecVia.bc\
	$(OBJS)/Thread.bc\
	$(OBJS)/Date.bc\
	$(OBJS)/Timestamp.bc\
	$(OBJS)/TimeFunctions.bc\
	$(OBJS)/TypeAndDataManager.bc\
	$(OBJS)/TypeAndDataReflection.bc\
	$(OBJS)/TypeDefiner.bc\
	$(OBJS)/TypeTemplates.bc\
	$(OBJS)/UnitTest.bc\
	$(OBJS)/VirtualInstrument.bc\
	$(OBJS)/RefNumTest.bc\
    $(OBJS)/Canvas2d.bc\
    $(OBJS)/FileIO.bc\
    $(OBJS)/HttpClient.bc

ifneq (,$(wildcard ./EmMakefile-AAL))
AAL_ONLY = 1
-include EmMakefile-AAL
endif

$(OBJS)/%.bc: $(CORESOURCEDIR)/%.cpp
	$(EMCC) $(EMFLAGS) -MD -MF $(patsubst %.bc,%.bc.d,$@) -c -o $@ $<
$(OBJS)/%.bc: $(IOSOURCEDIR)/%.cpp
	$(EMCC) $(EMFLAGS) -MD -MF $(patsubst %.bc,%.bc.d,$@) -c -o $@ $<
$(OBJS)/%.bc: $(UTSOURCEDIR)/%.cpp
	$(EMCC) $(EMFLAGS) -MD -MF $(patsubst %.bc,%.bc.d,$@) -c -o $@ $<

$(EM_BC_FILES): | $(OBJS)
$(OBJS):
	@mkdir -p $(OBJS)

$(PREJS) $(POSTJS): $(CORESOURCEDIR)/vireo.wrapper.js
	node splitVireoWrapper.js $(CORESOURCEDIR)/vireo.wrapper.js $(PREJS) $(POSTJS)

vjs: $(TARGETDIR)/vireo.js

$(TARGETDIR)/vireo.js: $(EM_BC_FILES) $(ANALYSIS_LIBRARY) $(PREJS) $(POSTJS)
	$(EMCC) $(EM_OPT) $(EM_WRAP) $(EMLIBRARY) $(EM_BC_FILES) $(ANALYSIS_LIBRARY) $(EM_EXPORTS) -o $@

# In at least the initial test the compression made start up mcuh slower (2x?)
# it was much better to let the server use gzip automatically

#$(EMCC) $(EM_OPT) $(EM_BC_FILES) -o vireo.html --compression $(EM_DIR)third_party/lzma.js/lzma-native,$(EM_DIR)third_party/lzma.js/lzma-decoder.js,LZMA.decompress
#$(EMCC) $(EM_OPT) $(EM_WRAP) $(EM_BC_FILES) -o vireo.js

DEPS := $(EM_BC_FILES:.bc=.bc.d)


-include $(DEPS)
